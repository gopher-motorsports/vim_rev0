
vim_fsae_rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abcc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800ada0  0800ada0  0000bda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae30  0800ae30  00012478  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae30  0800ae30  0000be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae38  0800ae38  00012478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae38  0800ae38  0000be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae3c  0800ae3c  0000be3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00006478  20000000  0800ae40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007414  20006478  080112b8  00012478  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d88c  080112b8  0001288c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026809  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004560  00000000  00000000  00038cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0003d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ff  00000000  00000000  0003e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fa4  00000000  00000000  0003fb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2e0  00000000  00000000  00066b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f198a  00000000  00000000  00083de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017576d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  001757b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0017bf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20006478 	.word	0x20006478
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad84 	.word	0x0800ad84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000647c 	.word	0x2000647c
 800020c:	0800ad84 	.word	0x0800ad84

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	@ 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ba8:	d2ed      	bcs.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ldivmod>:
 8000d04:	b97b      	cbnz	r3, 8000d26 <__aeabi_ldivmod+0x22>
 8000d06:	b972      	cbnz	r2, 8000d26 <__aeabi_ldivmod+0x22>
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	bfbe      	ittt	lt
 8000d0c:	2000      	movlt	r0, #0
 8000d0e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d12:	e006      	blt.n	8000d22 <__aeabi_ldivmod+0x1e>
 8000d14:	bf08      	it	eq
 8000d16:	2800      	cmpeq	r0, #0
 8000d18:	bf1c      	itt	ne
 8000d1a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000d22:	f000 b9e9 	b.w	80010f8 <__aeabi_idiv0>
 8000d26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d2e:	2900      	cmp	r1, #0
 8000d30:	db09      	blt.n	8000d46 <__aeabi_ldivmod+0x42>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db1a      	blt.n	8000d6c <__aeabi_ldivmod+0x68>
 8000d36:	f000 f881 	bl	8000e3c <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4770      	bx	lr
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db1b      	blt.n	8000d88 <__aeabi_ldivmod+0x84>
 8000d50:	f000 f874 	bl	8000e3c <__udivmoddi4>
 8000d54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5c:	b004      	add	sp, #16
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	4252      	negs	r2, r2
 8000d66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f863 	bl	8000e3c <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4240      	negs	r0, r0
 8000d82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d86:	4770      	bx	lr
 8000d88:	4252      	negs	r2, r2
 8000d8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d8e:	f000 f855 	bl	8000e3c <__udivmoddi4>
 8000d92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d9a:	b004      	add	sp, #16
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b99e 	b.w	80010f8 <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f83a 	bl	8000e3c <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_f2lz>:
 8000dd4:	ee07 0a90 	vmov	s15, r0
 8000dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	d401      	bmi.n	8000de6 <__aeabi_f2lz+0x12>
 8000de2:	f000 b80b 	b.w	8000dfc <__aeabi_f2ulz>
 8000de6:	eef1 7a67 	vneg.f32	s15, s15
 8000dea:	b508      	push	{r3, lr}
 8000dec:	ee17 0a90 	vmov	r0, s15
 8000df0:	f000 f804 	bl	8000dfc <__aeabi_f2ulz>
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	bd08      	pop	{r3, pc}

08000dfc <__aeabi_f2ulz>:
 8000dfc:	b5d0      	push	{r4, r6, r7, lr}
 8000dfe:	f7ff fb6b 	bl	80004d8 <__aeabi_f2d>
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__aeabi_f2ulz+0x38>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	4606      	mov	r6, r0
 8000e08:	460f      	mov	r7, r1
 8000e0a:	f7ff fbbd 	bl	8000588 <__aeabi_dmul>
 8000e0e:	f000 f975 	bl	80010fc <__aeabi_d2uiz>
 8000e12:	4604      	mov	r4, r0
 8000e14:	f7ff fb3e 	bl	8000494 <__aeabi_ui2d>
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <__aeabi_f2ulz+0x3c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f7ff fbb4 	bl	8000588 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4630      	mov	r0, r6
 8000e26:	4639      	mov	r1, r7
 8000e28:	f7ff f9f6 	bl	8000218 <__aeabi_dsub>
 8000e2c:	f000 f966 	bl	80010fc <__aeabi_d2uiz>
 8000e30:	4621      	mov	r1, r4
 8000e32:	bdd0      	pop	{r4, r6, r7, pc}
 8000e34:	3df00000 	.word	0x3df00000
 8000e38:	41f00000 	.word	0x41f00000

08000e3c <__udivmoddi4>:
 8000e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e40:	9d08      	ldr	r5, [sp, #32]
 8000e42:	460c      	mov	r4, r1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d14e      	bne.n	8000ee6 <__udivmoddi4+0xaa>
 8000e48:	4694      	mov	ip, r2
 8000e4a:	458c      	cmp	ip, r1
 8000e4c:	4686      	mov	lr, r0
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	d962      	bls.n	8000f1a <__udivmoddi4+0xde>
 8000e54:	b14a      	cbz	r2, 8000e6a <__udivmoddi4+0x2e>
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	4319      	orrs	r1, r3
 8000e66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f f68c 	uxth.w	r6, ip
 8000e72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d90a      	bls.n	8000ea0 <__udivmoddi4+0x64>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e92:	f080 8112 	bcs.w	80010ba <__udivmoddi4+0x27e>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 810f 	bls.w	80010ba <__udivmoddi4+0x27e>
 8000e9c:	3c02      	subs	r4, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1a59      	subs	r1, r3, r1
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000eae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb2:	fb00 f606 	mul.w	r6, r0, r6
 8000eb6:	429e      	cmp	r6, r3
 8000eb8:	d90a      	bls.n	8000ed0 <__udivmoddi4+0x94>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec2:	f080 80fc 	bcs.w	80010be <__udivmoddi4+0x282>
 8000ec6:	429e      	cmp	r6, r3
 8000ec8:	f240 80f9 	bls.w	80010be <__udivmoddi4+0x282>
 8000ecc:	4463      	add	r3, ip
 8000ece:	3802      	subs	r0, #2
 8000ed0:	1b9b      	subs	r3, r3, r6
 8000ed2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	b11d      	cbz	r5, 8000ee2 <__udivmoddi4+0xa6>
 8000eda:	40d3      	lsrs	r3, r2
 8000edc:	2200      	movs	r2, #0
 8000ede:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d905      	bls.n	8000ef6 <__udivmoddi4+0xba>
 8000eea:	b10d      	cbz	r5, 8000ef0 <__udivmoddi4+0xb4>
 8000eec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e7f5      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8000ef6:	fab3 f183 	clz	r1, r3
 8000efa:	2900      	cmp	r1, #0
 8000efc:	d146      	bne.n	8000f8c <__udivmoddi4+0x150>
 8000efe:	42a3      	cmp	r3, r4
 8000f00:	d302      	bcc.n	8000f08 <__udivmoddi4+0xcc>
 8000f02:	4290      	cmp	r0, r2
 8000f04:	f0c0 80f0 	bcc.w	80010e8 <__udivmoddi4+0x2ac>
 8000f08:	1a86      	subs	r6, r0, r2
 8000f0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000f0e:	2001      	movs	r0, #1
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d0e6      	beq.n	8000ee2 <__udivmoddi4+0xa6>
 8000f14:	e9c5 6300 	strd	r6, r3, [r5]
 8000f18:	e7e3      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x204>
 8000f20:	eba1 040c 	sub.w	r4, r1, ip
 8000f24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f36:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f3e:	fb07 f006 	mul.w	r0, r7, r6
 8000f42:	4298      	cmp	r0, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x11c>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x11a>
 8000f50:	4298      	cmp	r0, r3
 8000f52:	f200 80cd 	bhi.w	80010f0 <__udivmoddi4+0x2b4>
 8000f56:	4626      	mov	r6, r4
 8000f58:	1a1c      	subs	r4, r3, r0
 8000f5a:	fa1f f38e 	uxth.w	r3, lr
 8000f5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f62:	fb08 4410 	mls	r4, r8, r0, r4
 8000f66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6a:	fb00 f707 	mul.w	r7, r0, r7
 8000f6e:	429f      	cmp	r7, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x148>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x146>
 8000f7c:	429f      	cmp	r7, r3
 8000f7e:	f200 80b0 	bhi.w	80010e2 <__udivmoddi4+0x2a6>
 8000f82:	4620      	mov	r0, r4
 8000f84:	1bdb      	subs	r3, r3, r7
 8000f86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8a:	e7a5      	b.n	8000ed8 <__udivmoddi4+0x9c>
 8000f8c:	f1c1 0620 	rsb	r6, r1, #32
 8000f90:	408b      	lsls	r3, r1
 8000f92:	fa22 f706 	lsr.w	r7, r2, r6
 8000f96:	431f      	orrs	r7, r3
 8000f98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa0:	ea43 030c 	orr.w	r3, r3, ip
 8000fa4:	40f4      	lsrs	r4, r6
 8000fa6:	fa00 f801 	lsl.w	r8, r0, r1
 8000faa:	0c38      	lsrs	r0, r7, #16
 8000fac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb4:	fa1f fc87 	uxth.w	ip, r7
 8000fb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000fbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc4:	45a1      	cmp	r9, r4
 8000fc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fca:	d90a      	bls.n	8000fe2 <__udivmoddi4+0x1a6>
 8000fcc:	193c      	adds	r4, r7, r4
 8000fce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd2:	f080 8084 	bcs.w	80010de <__udivmoddi4+0x2a2>
 8000fd6:	45a1      	cmp	r9, r4
 8000fd8:	f240 8081 	bls.w	80010de <__udivmoddi4+0x2a2>
 8000fdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe0:	443c      	add	r4, r7
 8000fe2:	eba4 0409 	sub.w	r4, r4, r9
 8000fe6:	fa1f f983 	uxth.w	r9, r3
 8000fea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ff6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffa:	45a4      	cmp	ip, r4
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x1d2>
 8000ffe:	193c      	adds	r4, r7, r4
 8001000:	f103 30ff 	add.w	r0, r3, #4294967295
 8001004:	d267      	bcs.n	80010d6 <__udivmoddi4+0x29a>
 8001006:	45a4      	cmp	ip, r4
 8001008:	d965      	bls.n	80010d6 <__udivmoddi4+0x29a>
 800100a:	3b02      	subs	r3, #2
 800100c:	443c      	add	r4, r7
 800100e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001012:	fba0 9302 	umull	r9, r3, r0, r2
 8001016:	eba4 040c 	sub.w	r4, r4, ip
 800101a:	429c      	cmp	r4, r3
 800101c:	46ce      	mov	lr, r9
 800101e:	469c      	mov	ip, r3
 8001020:	d351      	bcc.n	80010c6 <__udivmoddi4+0x28a>
 8001022:	d04e      	beq.n	80010c2 <__udivmoddi4+0x286>
 8001024:	b155      	cbz	r5, 800103c <__udivmoddi4+0x200>
 8001026:	ebb8 030e 	subs.w	r3, r8, lr
 800102a:	eb64 040c 	sbc.w	r4, r4, ip
 800102e:	fa04 f606 	lsl.w	r6, r4, r6
 8001032:	40cb      	lsrs	r3, r1
 8001034:	431e      	orrs	r6, r3
 8001036:	40cc      	lsrs	r4, r1
 8001038:	e9c5 6400 	strd	r6, r4, [r5]
 800103c:	2100      	movs	r1, #0
 800103e:	e750      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8001040:	f1c2 0320 	rsb	r3, r2, #32
 8001044:	fa20 f103 	lsr.w	r1, r0, r3
 8001048:	fa0c fc02 	lsl.w	ip, ip, r2
 800104c:	fa24 f303 	lsr.w	r3, r4, r3
 8001050:	4094      	lsls	r4, r2
 8001052:	430c      	orrs	r4, r1
 8001054:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001058:	fa00 fe02 	lsl.w	lr, r0, r2
 800105c:	fa1f f78c 	uxth.w	r7, ip
 8001060:	fbb3 f0f8 	udiv	r0, r3, r8
 8001064:	fb08 3110 	mls	r1, r8, r0, r3
 8001068:	0c23      	lsrs	r3, r4, #16
 800106a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800106e:	fb00 f107 	mul.w	r1, r0, r7
 8001072:	4299      	cmp	r1, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x24c>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 36ff 	add.w	r6, r0, #4294967295
 800107e:	d22c      	bcs.n	80010da <__udivmoddi4+0x29e>
 8001080:	4299      	cmp	r1, r3
 8001082:	d92a      	bls.n	80010da <__udivmoddi4+0x29e>
 8001084:	3802      	subs	r0, #2
 8001086:	4463      	add	r3, ip
 8001088:	1a5b      	subs	r3, r3, r1
 800108a:	b2a4      	uxth	r4, r4
 800108c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001090:	fb08 3311 	mls	r3, r8, r1, r3
 8001094:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001098:	fb01 f307 	mul.w	r3, r1, r7
 800109c:	42a3      	cmp	r3, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x276>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010a8:	d213      	bcs.n	80010d2 <__udivmoddi4+0x296>
 80010aa:	42a3      	cmp	r3, r4
 80010ac:	d911      	bls.n	80010d2 <__udivmoddi4+0x296>
 80010ae:	3902      	subs	r1, #2
 80010b0:	4464      	add	r4, ip
 80010b2:	1ae4      	subs	r4, r4, r3
 80010b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010b8:	e739      	b.n	8000f2e <__udivmoddi4+0xf2>
 80010ba:	4604      	mov	r4, r0
 80010bc:	e6f0      	b.n	8000ea0 <__udivmoddi4+0x64>
 80010be:	4608      	mov	r0, r1
 80010c0:	e706      	b.n	8000ed0 <__udivmoddi4+0x94>
 80010c2:	45c8      	cmp	r8, r9
 80010c4:	d2ae      	bcs.n	8001024 <__udivmoddi4+0x1e8>
 80010c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ce:	3801      	subs	r0, #1
 80010d0:	e7a8      	b.n	8001024 <__udivmoddi4+0x1e8>
 80010d2:	4631      	mov	r1, r6
 80010d4:	e7ed      	b.n	80010b2 <__udivmoddi4+0x276>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e799      	b.n	800100e <__udivmoddi4+0x1d2>
 80010da:	4630      	mov	r0, r6
 80010dc:	e7d4      	b.n	8001088 <__udivmoddi4+0x24c>
 80010de:	46d6      	mov	lr, sl
 80010e0:	e77f      	b.n	8000fe2 <__udivmoddi4+0x1a6>
 80010e2:	4463      	add	r3, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e74d      	b.n	8000f84 <__udivmoddi4+0x148>
 80010e8:	4606      	mov	r6, r0
 80010ea:	4623      	mov	r3, r4
 80010ec:	4608      	mov	r0, r1
 80010ee:	e70f      	b.n	8000f10 <__udivmoddi4+0xd4>
 80010f0:	3e02      	subs	r6, #2
 80010f2:	4463      	add	r3, ip
 80010f4:	e730      	b.n	8000f58 <__udivmoddi4+0x11c>
 80010f6:	bf00      	nop

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_d2uiz>:
 80010fc:	004a      	lsls	r2, r1, #1
 80010fe:	d211      	bcs.n	8001124 <__aeabi_d2uiz+0x28>
 8001100:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001104:	d211      	bcs.n	800112a <__aeabi_d2uiz+0x2e>
 8001106:	d50d      	bpl.n	8001124 <__aeabi_d2uiz+0x28>
 8001108:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800110c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001110:	d40e      	bmi.n	8001130 <__aeabi_d2uiz+0x34>
 8001112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800111e:	fa23 f002 	lsr.w	r0, r3, r2
 8001122:	4770      	bx	lr
 8001124:	f04f 0000 	mov.w	r0, #0
 8001128:	4770      	bx	lr
 800112a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800112e:	d102      	bne.n	8001136 <__aeabi_d2uiz+0x3a>
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <init>:
bool lowMode = true;

// init
//  What needs to happen on startup in order to run GopherCAN
void init(CAN_HandleTypeDef* hcan_ptr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	example_hcan = hcan_ptr;
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <init+0x40>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(2, example_hcan, THIS_MODULE_ID, BXTYPE_MASTER))
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <init+0x40>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	2201      	movs	r2, #1
 8001152:	2002      	movs	r0, #2
 8001154:	f001 fa7c 	bl	8002650 <init_can>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <init+0x26>
	{
		// an error has occurred, stay here
		while (1);
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <init+0x22>
	}

	// enable all of the variables in GopherCAN for testing
	//set_all_params_state(TRUE);

	clear();
 8001162:	f000 f98f 	bl	8001484 <clear>
	setStripBrightness(100);
 8001166:	2064      	movs	r0, #100	@ 0x64
 8001168:	f000 fa82 	bl	8001670 <setStripBrightness>
	generateRainbow(rainbowArr);
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <init+0x44>)
 800116e:	f000 fabf 	bl	80016f0 <generateRainbow>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20006494 	.word	0x20006494
 8001180:	2000649c 	.word	0x2000649c

08001184 <can_buffer_handling_loop>:

// can_buffer_handling_loop
//  This loop will handle CAN RX software task and CAN TX hardware task. Should be
//  called every 1ms or as often as received messages should be handled
void can_buffer_handling_loop()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 8001188:	f002 f94e 	bl	8003428 <service_can_rx_buffer>
	{
		// an error has occurred
	}

	// handle the transmission hardware for each CAN bus
	service_can_tx(example_hcan);
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <can_buffer_handling_loop+0x18>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f8bf 	bl	8003314 <service_can_tx>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20006494 	.word	0x20006494

080011a0 <main_loop>:

// main_loop
//  another loop. This includes logic for sending a CAN command. Designed to be
//  called every 10ms
void main_loop()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	ed2d 8b02 	vpush	{d8}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af02      	add	r7, sp, #8
	uint32_t time = HAL_GetTick();
 80011aa:	f002 fde3 	bl	8003d74 <HAL_GetTick>
 80011ae:	61b8      	str	r0, [r7, #24]
	if(time - lastUpdate >= 1)
 80011b0:	4b95      	ldr	r3, [pc, #596]	@ (8001408 <main_loop+0x268>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	f000 811c 	beq.w	80013f4 <main_loop+0x254>

		#define SPACING      13

		static float offset = 0;

		if(motorSpeedLF_rpm.data < (uint16_t)MIN_RPM)
 80011bc:	4b93      	ldr	r3, [pc, #588]	@ (800140c <main_loop+0x26c>)
 80011be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80011c2:	2b09      	cmp	r3, #9
 80011c4:	f300 80aa 	bgt.w	800131c <main_loop+0x17c>
		{
			float packVoltage = bmsAveBrickVoltage_V.data*84;
 80011c8:	4b91      	ldr	r3, [pc, #580]	@ (8001410 <main_loop+0x270>)
 80011ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80011ce:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001414 <main_loop+0x274>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	edc7 7a05 	vstr	s15, [r7, #20]
			if(dcBusVoltage_V.data < 0.05f * packVoltage) {
 80011da:	4b8f      	ldr	r3, [pc, #572]	@ (8001418 <main_loop+0x278>)
 80011dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80011e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800141c <main_loop+0x27c>
 80011e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	d52c      	bpl.n	8001250 <main_loop+0xb0>
				  float intensity = abs((HAL_GetTick() % 2000) - 1000) / 1000.0f;
 80011f6:	f002 fdbd 	bl	8003d74 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <main_loop+0x280>)
 80011fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001202:	09db      	lsrs	r3, r3, #7
 8001204:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfb8      	it	lt
 8001216:	425b      	neglt	r3, r3
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001424 <main_loop+0x284>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	edc7 7a02 	vstr	s15, [r7, #8]
				  setStripColor(0, (uint8_t)(255.0f * intensity), 0);
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001428 <main_loop+0x288>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001240:	793b      	ldrb	r3, [r7, #4]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f9f3 	bl	8001634 <setStripColor>
 800124e:	e0cc      	b.n	80013ea <main_loop+0x24a>
			} else if (dcBusVoltage_V.data > 0.95f * packVoltage) {
 8001250:	4b71      	ldr	r3, [pc, #452]	@ (8001418 <main_loop+0x278>)
 8001252:	ed93 7a07 	vldr	s14, [r3, #28]
 8001256:	edd7 7a05 	vldr	s15, [r7, #20]
 800125a:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800142c <main_loop+0x28c>
 800125e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dd2b      	ble.n	80012c4 <main_loop+0x124>
				float intensity = abs((HAL_GetTick() % 300) - 150) / 150.0f;
 800126c:	f002 fd82 	bl	8003d74 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <main_loop+0x290>)
 8001274:	fba3 1302 	umull	r1, r3, r3, r2
 8001278:	095b      	lsrs	r3, r3, #5
 800127a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	3b96      	subs	r3, #150	@ 0x96
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8001434 <main_loop+0x294>
 8001298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]
				  setStripColor((uint8_t)(255.0f * intensity), 0, 0);
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001428 <main_loop+0x288>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80012b4:	793b      	ldrb	r3, [r7, #4]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f9b9 	bl	8001634 <setStripColor>
 80012c2:	e092      	b.n	80013ea <main_loop+0x24a>
			} else {
				float intensity = abs((HAL_GetTick() % 500) - 250) / 250.0f;
 80012c4:	f002 fd56 	bl	8003d74 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <main_loop+0x280>)
 80012cc:	fba3 1302 	umull	r1, r3, r3, r2
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	3bfa      	subs	r3, #250	@ 0xfa
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bfb8      	it	lt
 80012e2:	425b      	neglt	r3, r3
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ec:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8001438 <main_loop+0x298>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	edc7 7a04 	vstr	s15, [r7, #16]
				  setStripColor(0, 0, (uint8_t)(255.0f * intensity));
 80012f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001428 <main_loop+0x288>
 8001300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f000 f98d 	bl	8001634 <setStripColor>
 800131a:	e066      	b.n	80013ea <main_loop+0x24a>
			}
		}
		else
		{
		  static float lastOffset = 0;
		  float motorSpeed = (float)motorSpeedLF_rpm.data;
 800131c:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <main_loop+0x26c>)
 800131e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	edc7 7a07 	vstr	s15, [r7, #28]
		  if(motorSpeed > MAX_RPM)
 800132e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001332:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800143c <main_loop+0x29c>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	dd01      	ble.n	8001344 <main_loop+0x1a4>
		  {
			motorSpeed = MAX_RPM;
 8001340:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <main_loop+0x2a0>)
 8001342:	61fb      	str	r3, [r7, #28]
		  }

		  // Offset = (base_speed + speed_per_rpm * rpm) * delta_t
		  offset += (INTERCEPT + SLOPE * motorSpeed) * (float)(HAL_GetTick() - lastUpdate) / 1000.0f;
 8001344:	edd7 7a07 	vldr	s15, [r7, #28]
 8001348:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001444 <main_loop+0x2a4>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001354:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001358:	f002 fd0c 	bl	8003d74 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <main_loop+0x268>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001370:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001424 <main_loop+0x284>
 8001374:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001378:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <main_loop+0x2a8>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <main_loop+0x2a8>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
		  // If offset has advanced to the next integer value
		  if((uint32_t)lastOffset != (uint32_t)offset)
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <main_loop+0x2ac>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <main_loop+0x2a8>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d01c      	beq.n	80013e2 <main_loop+0x242>
		  {
			// Update the dotted line
			dottedLine(SPACING, (uint32_t)offset, 255, 0, 0);
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <main_loop+0x2a8>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	22ff      	movs	r2, #255	@ 0xff
 80013ba:	ee17 1a90 	vmov	r1, s15
 80013be:	200d      	movs	r0, #13
 80013c0:	f000 fad4 	bl	800196c <dottedLine>
			write();
 80013c4:	f000 f87e 	bl	80014c4 <write>
			fmod(offset, SPACING);
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <main_loop+0x2a8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f883 	bl	80004d8 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001400 <main_loop+0x260>
 80013da:	ec43 2b10 	vmov	d0, r2, r3
 80013de:	f009 fb99 	bl	800ab14 <fmod>
		  }
		  // Update last offset
		  lastOffset = offset;
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <main_loop+0x2a8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a19      	ldr	r2, [pc, #100]	@ (800144c <main_loop+0x2ac>)
 80013e8:	6013      	str	r3, [r2, #0]
		}
		write();
 80013ea:	f000 f86b 	bl	80014c4 <write>
//				  lowMode = true;
//			  }
//		  }

//		  write();
		lastUpdate = time;
 80013ee:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <main_loop+0x268>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6013      	str	r3, [r2, #0]
	}
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	ecbd 8b02 	vpop	{d8}
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	00000000 	.word	0x00000000
 8001404:	402a0000 	.word	0x402a0000
 8001408:	20006498 	.word	0x20006498
 800140c:	200001cc 	.word	0x200001cc
 8001410:	200043ac 	.word	0x200043ac
 8001414:	42a80000 	.word	0x42a80000
 8001418:	200006ec 	.word	0x200006ec
 800141c:	3d4ccccd 	.word	0x3d4ccccd
 8001420:	10624dd3 	.word	0x10624dd3
 8001424:	447a0000 	.word	0x447a0000
 8001428:	437f0000 	.word	0x437f0000
 800142c:	3f733333 	.word	0x3f733333
 8001430:	1b4e81b5 	.word	0x1b4e81b5
 8001434:	43160000 	.word	0x43160000
 8001438:	437a0000 	.word	0x437a0000
 800143c:	459c4000 	.word	0x459c4000
 8001440:	459c4000 	.word	0x459c4000
 8001444:	3d3bf906 	.word	0x3d3bf906
 8001448:	20006b80 	.word	0x20006b80
 800144c:	20006b84 	.word	0x20006b84

08001450 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a07      	ldr	r2, [pc, #28]	@ (800147c <vApplicationGetIdleTaskMemory+0x2c>)
 8001460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	4a06      	ldr	r2, [pc, #24]	@ (8001480 <vApplicationGetIdleTaskMemory+0x30>)
 8001466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20006b88 	.word	0x20006b88
 8001480:	20006c28 	.word	0x20006c28

08001484 <clear>:
 */
uint8_t  ledData[NUM_PIXELS][4]	= {0};


void clear()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	memset(ledData, 0, sizeof(ledData[0][0]) * NUM_PIXELS * 4);
 800148a:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800148e:	2100      	movs	r1, #0
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <clear+0x3c>)
 8001492:	f009 fa51 	bl	800a938 <memset>
	for (int i = 0; i < NUM_PIXELS; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	e008      	b.n	80014ae <clear+0x2a>
	{
		ledData[i][BRIGHTNESS_INDEX] = 255;
 800149c:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <clear+0x3c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	22ff      	movs	r2, #255	@ 0xff
 80014a6:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < NUM_PIXELS; i++)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b92      	cmp	r3, #146	@ 0x92
 80014b2:	ddf3      	ble.n	800149c <clear+0x18>
	}
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20008bec 	.word	0x20008bec

080014c4 <write>:

void write()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
	for (int colorPhasePixelIndex = 0; colorPhasePixelIndex < NUM_PIXELS; colorPhasePixelIndex++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e070      	b.n	80015b2 <write+0xee>
	{
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80014d0:	4a3f      	ldr	r2, [pc, #252]	@ (80015d0 <write+0x10c>)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80014d8:	4619      	mov	r1, r3
							 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80014da:	4a3d      	ldr	r2, [pc, #244]	@ (80015d0 <write+0x10c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	78db      	ldrb	r3, [r3, #3]
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
							 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80014e8:	4a3a      	ldr	r2, [pc, #232]	@ (80015d4 <write+0x110>)
 80014ea:	fb82 1203 	smull	r1, r2, r2, r3
 80014ee:	441a      	add	r2, r3
 80014f0:	11d2      	asrs	r2, r2, #7
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1ad3      	subs	r3, r2, r3
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80014f6:	617b      	str	r3, [r7, #20]
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 80014f8:	4a35      	ldr	r2, [pc, #212]	@ (80015d0 <write+0x10c>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	4619      	mov	r1, r3
				 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8001504:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <write+0x10c>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	78db      	ldrb	r3, [r3, #3]
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 800150e:	fb01 f303 	mul.w	r3, r1, r3
				 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8001512:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <write+0x110>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	441a      	add	r2, r3
 800151a:	11d2      	asrs	r2, r2, #7
 800151c:	17db      	asrs	r3, r3, #31
 800151e:	1ad3      	subs	r3, r2, r3
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 8001520:	613b      	str	r3, [r7, #16]
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 8001522:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <write+0x10c>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	4619      	mov	r1, r3
	 	 	 	 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 800152e:	4a28      	ldr	r2, [pc, #160]	@ (80015d0 <write+0x10c>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	78db      	ldrb	r3, [r3, #3]
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 8001538:	fb01 f303 	mul.w	r3, r1, r3
	 	 	 	 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <write+0x110>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	441a      	add	r2, r3
 8001544:	11d2      	asrs	r2, r2, #7
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 800154a:	60fb      	str	r3, [r7, #12]
		uint32_t color = 	(green << 16) | (red <<  8) | (blue);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	041a      	lsls	r2, r3, #16
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	4313      	orrs	r3, r2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
		uint32_t mask  = 	 0x00000001 << (BITS_PER_PIXEL - 1);
 800155c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001560:	607b      	str	r3, [r7, #4]

		for (int i = 0; i < BITS_PER_PIXEL; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	e01e      	b.n	80015a6 <write+0xe2>
		{
			// Where in the pwm array we are. +24 due to front DMA padding
			uint32_t pwmIndex = colorPhasePixelIndex * BITS_PER_PIXEL + i + 24;
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	461a      	mov	r2, r3
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	4413      	add	r3, r2
 8001578:	3318      	adds	r3, #24
 800157a:	603b      	str	r3, [r7, #0]
			if ((mask >> i) & color)
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	40da      	lsrs	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <write+0xd2>
			{
				// Write 1
				pwmData[pwmIndex] = ONE_HIGH_TIME;
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <write+0x114>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2154      	movs	r1, #84	@ 0x54
 8001590:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001594:	e004      	b.n	80015a0 <write+0xdc>
			}
			else
			{
				// Write 0
				pwmData[pwmIndex] = ZERO_HIGH_TIME;
 8001596:	4a10      	ldr	r2, [pc, #64]	@ (80015d8 <write+0x114>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	211c      	movs	r1, #28
 800159c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BITS_PER_PIXEL; i++)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b17      	cmp	r3, #23
 80015aa:	dddd      	ble.n	8001568 <write+0xa4>
	for (int colorPhasePixelIndex = 0; colorPhasePixelIndex < NUM_PIXELS; colorPhasePixelIndex++)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b92      	cmp	r3, #146	@ 0x92
 80015b6:	dd8b      	ble.n	80014d0 <write+0xc>
			}
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)pwmData, ARRAY_SIZE);
 80015b8:	f640 53e1 	movw	r3, #3553	@ 0xde1
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <write+0x114>)
 80015be:	210c      	movs	r1, #12
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <write+0x118>)
 80015c2:	f005 f9cb 	bl	800695c <HAL_TIM_PWM_Start_DMA>
}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20008bec 	.word	0x20008bec
 80015d4:	80808081 	.word	0x80808081
 80015d8:	20007028 	.word	0x20007028
 80015dc:	20008ef0 	.word	0x20008ef0

080015e0 <setPixelColor>:

void setPixelColor(uint32_t ledNum, uint8_t red, uint8_t green, uint8_t blue)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70bb      	strb	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
	if (ledNum >= NUM_PIXELS) return;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b92      	cmp	r3, #146	@ 0x92
 80015fe:	d811      	bhi.n	8001624 <setPixelColor+0x44>
	ledData[ledNum][0] = red;
 8001600:	490b      	ldr	r1, [pc, #44]	@ (8001630 <setPixelColor+0x50>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	ledData[ledNum][1] = green;
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <setPixelColor+0x50>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	78ba      	ldrb	r2, [r7, #2]
 8001614:	705a      	strb	r2, [r3, #1]
	ledData[ledNum][2] = blue;
 8001616:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <setPixelColor+0x50>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	787a      	ldrb	r2, [r7, #1]
 8001620:	709a      	strb	r2, [r3, #2]
 8001622:	e000      	b.n	8001626 <setPixelColor+0x46>
	if (ledNum >= NUM_PIXELS) return;
 8001624:	bf00      	nop
}
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20008bec 	.word	0x20008bec

08001634 <setStripColor>:
	ledData[ledNum][2] = blue;
	ledData[ledNum][3] = brightness;
}

void setStripColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	460b      	mov	r3, r1
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	4613      	mov	r3, r2
 8001644:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < NUM_PIXELS; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e008      	b.n	800165e <setStripColor+0x2a>
	{
		setPixelColor(i, red, green, blue);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	797b      	ldrb	r3, [r7, #5]
 8001650:	79ba      	ldrb	r2, [r7, #6]
 8001652:	79f9      	ldrb	r1, [r7, #7]
 8001654:	f7ff ffc4 	bl	80015e0 <setPixelColor>
	for (int i = 0; i < NUM_PIXELS; i++)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b92      	cmp	r3, #146	@ 0x92
 8001662:	ddf3      	ble.n	800164c <setStripColor+0x18>
	}
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <setStripBrightness>:
		setPixel(i, red, green, blue, brightness);
	}
}

void setStripBrightness(uint32_t brightness)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if (brightness > 255) brightness = 255;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2bff      	cmp	r3, #255	@ 0xff
 800167c:	d901      	bls.n	8001682 <setStripBrightness+0x12>
 800167e:	23ff      	movs	r3, #255	@ 0xff
 8001680:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_PIXELS; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e00a      	b.n	800169e <setStripBrightness+0x2e>
	{
		ledData[i][BRIGHTNESS_INDEX] = brightness;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <setStripBrightness+0x44>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	460a      	mov	r2, r1
 8001696:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < NUM_PIXELS; i++)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b92      	cmp	r3, #146	@ 0x92
 80016a2:	ddf1      	ble.n	8001688 <setStripBrightness+0x18>
	}
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20008bec 	.word	0x20008bec

080016b8 <map>:
		ledData[ledNum][BRIGHTNESS_INDEX] = brightness;
	}
}

int32_t map(int32_t x, int32_t inputMin, int32_t inputMax, int32_t outputMin, int32_t outputMax)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  return (x - inputMin) * (outputMax - outputMin) / (inputMax - inputMin) + outputMin;
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	69b9      	ldr	r1, [r7, #24]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	1a8a      	subs	r2, r1, r2
 80016d2:	fb03 f202 	mul.w	r2, r3, r2
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1acb      	subs	r3, r1, r3
 80016dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4413      	add	r3, r2
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <generateRainbow>:

void generateRainbow(uint32_t rainbowArr[NUM_PIXELS][3])
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	6078      	str	r0, [r7, #4]
	uint32_t colorPhaseStartIndex = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	76fb      	strb	r3, [r7, #27]
 8001700:	e128      	b.n	8001954 <generateRainbow+0x264>
	{
		uint32_t numPhasePixels = (NUM_PIXELS / NUM_COLOR_PHASES) +
 8001702:	7efb      	ldrb	r3, [r7, #27]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d801      	bhi.n	800170c <generateRainbow+0x1c>
 8001708:	2319      	movs	r3, #25
 800170a:	e000      	b.n	800170e <generateRainbow+0x1e>
 800170c:	2318      	movs	r3, #24
 800170e:	613b      	str	r3, [r7, #16]
									((colorPhase < (NUM_PIXELS % NUM_COLOR_PHASES)) ? 1 : 0);
		uint32_t colorPhasePixelIndex = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPhasePixels)
 8001714:	e112      	b.n	800193c <generateRainbow+0x24c>
		{
			uint32_t pixelIndex = (colorPhaseStartIndex + colorPhasePixelIndex) % NUM_PIXELS;
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	4a92      	ldr	r2, [pc, #584]	@ (8001968 <generateRainbow+0x278>)
 800171e:	fba2 1203 	umull	r1, r2, r2, r3
 8001722:	09d2      	lsrs	r2, r2, #7
 8001724:	2193      	movs	r1, #147	@ 0x93
 8001726:	fb01 f202 	mul.w	r2, r1, r2
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
			switch (colorPhase)
 800172e:	7efb      	ldrb	r3, [r7, #27]
 8001730:	2b05      	cmp	r3, #5
 8001732:	f200 80ff 	bhi.w	8001934 <generateRainbow+0x244>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <generateRainbow+0x4c>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	08001755 	.word	0x08001755
 8001740:	080017a5 	.word	0x080017a5
 8001744:	080017f5 	.word	0x080017f5
 8001748:	08001845 	.word	0x08001845
 800174c:	08001895 	.word	0x08001895
 8001750:	080018e5 	.word	0x080018e5
			{
			case RED_TO_RED_GREEN:
				rainbowArr[pixelIndex][0] = 255;
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	22ff      	movs	r2, #255	@ 0xff
 8001766:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	23ff      	movs	r3, #255	@ 0xff
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2100      	movs	r1, #0
 8001774:	f7ff ffa0 	bl	80016b8 <map>
 8001778:	4601      	mov	r1, r0
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	460a      	mov	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 0;
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
				break;
 80017a2:	e0c8      	b.n	8001936 <generateRainbow+0x246>

			case RED_GREEN_TO_GREEN:
				rainbowArr[pixelIndex][0] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 80017a4:	6978      	ldr	r0, [r7, #20]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	23ff      	movs	r3, #255	@ 0xff
 80017ae:	2100      	movs	r1, #0
 80017b0:	f7ff ff82 	bl	80016b8 <map>
 80017b4:	4601      	mov	r1, r0
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	460a      	mov	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 255;
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	22ff      	movs	r2, #255	@ 0xff
 80017dc:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 0;
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
				break;
 80017f2:	e0a0      	b.n	8001936 <generateRainbow+0x246>

			case GREEN_TO_GREEN_BLUE:
				rainbowArr[pixelIndex][0] = 0;
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 255;
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	22ff      	movs	r2, #255	@ 0xff
 800181a:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 800181c:	6978      	ldr	r0, [r7, #20]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	23ff      	movs	r3, #255	@ 0xff
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	2100      	movs	r1, #0
 8001828:	f7ff ff46 	bl	80016b8 <map>
 800182c:	4601      	mov	r1, r0
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	460a      	mov	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
				break;
 8001842:	e078      	b.n	8001936 <generateRainbow+0x246>

			case GREEN_BLUE_TO_BLUE:
				rainbowArr[pixelIndex][0] = 0;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	23ff      	movs	r3, #255	@ 0xff
 8001862:	2100      	movs	r1, #0
 8001864:	f7ff ff28 	bl	80016b8 <map>
 8001868:	4601      	mov	r1, r0
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	460a      	mov	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 255;
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	609a      	str	r2, [r3, #8]
				break;
 8001892:	e050      	b.n	8001936 <generateRainbow+0x246>

			case BLUE_TO_BLUE_RED:
				rainbowArr[pixelIndex][0] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 8001894:	6978      	ldr	r0, [r7, #20]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	23ff      	movs	r3, #255	@ 0xff
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	f7ff ff0a 	bl	80016b8 <map>
 80018a4:	4601      	mov	r1, r0
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	460a      	mov	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 0;
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 255;
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	22ff      	movs	r2, #255	@ 0xff
 80018e0:	609a      	str	r2, [r3, #8]
				break;
 80018e2:	e028      	b.n	8001936 <generateRainbow+0x246>

			case BLUE_RED_TO_RED:
				rainbowArr[pixelIndex][0] = 255;
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	22ff      	movs	r2, #255	@ 0xff
 80018f6:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 0;
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	23ff      	movs	r3, #255	@ 0xff
 8001916:	2100      	movs	r1, #0
 8001918:	f7ff fece 	bl	80016b8 <map>
 800191c:	4601      	mov	r1, r0
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	460a      	mov	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
				break;
 8001932:	e000      	b.n	8001936 <generateRainbow+0x246>

			default:
				break;
 8001934:	bf00      	nop
			}
			colorPhasePixelIndex++;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPhasePixels)
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	f4ff aee8 	bcc.w	8001716 <generateRainbow+0x26>
		}

		colorPhaseStartIndex += numPhasePixels;
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 800194e:	7efb      	ldrb	r3, [r7, #27]
 8001950:	3301      	adds	r3, #1
 8001952:	76fb      	strb	r3, [r7, #27]
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	2b06      	cmp	r3, #6
 8001958:	f67f aed3 	bls.w	8001702 <generateRainbow+0x12>
	}
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	dee95c4d 	.word	0xdee95c4d

0800196c <dottedLine>:

}


void dottedLine(uint32_t stepSize, uint32_t offset, uint8_t red, uint8_t green, uint8_t blue)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	460b      	mov	r3, r1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	4613      	mov	r3, r2
 8001980:	71bb      	strb	r3, [r7, #6]
	clear();
 8001982:	f7ff fd7f 	bl	8001484 <clear>
	offset %= stepSize;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	fbb3 f2f2 	udiv	r2, r3, r2
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	fb01 f202 	mul.w	r2, r1, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
	for (int ledIndex = offset; ledIndex < NUM_PIXELS; ledIndex+=stepSize)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <dottedLine+0x48>
	{
		setPixelColor(ledIndex, red, green, blue);
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019a4:	79ba      	ldrb	r2, [r7, #6]
 80019a6:	79f9      	ldrb	r1, [r7, #7]
 80019a8:	f7ff fe1a 	bl	80015e0 <setPixelColor>
	for (int ledIndex = offset; ledIndex < NUM_PIXELS; ledIndex+=stepSize)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b92      	cmp	r3, #146	@ 0x92
 80019b8:	ddf1      	ble.n	800199e <dottedLine+0x32>
	}
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b08e      	sub	sp, #56	@ 0x38
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ca:	f002 f99d 	bl	8003d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ce:	f000 f843 	bl	8001a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d2:	f000 fa71 	bl	8001eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d6:	f000 fa47 	bl	8001e68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019da:	f000 fa1b 	bl	8001e14 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80019de:	f000 f8f9 	bl	8001bd4 <MX_CAN1_Init>
  MX_TIM2_Init();
 80019e2:	f000 f92d 	bl	8001c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019e6:	f000 f99f 	bl	8001d28 <MX_TIM3_Init>
  MX_ADC1_Init();
 80019ea:	f000 f8a1 	bl	8001b30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init(&hcan1);
 80019ee:	4815      	ldr	r0, [pc, #84]	@ (8001a44 <main+0x80>)
 80019f0:	f7ff fba4 	bl	800113c <init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskMain_Loop */
  osThreadDef(taskMain_Loop, task_main_loop, osPriorityNormal, 0, 256);
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <main+0x84>)
 80019f6:	f107 041c 	add.w	r4, r7, #28
 80019fa:	461d      	mov	r5, r3
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskMain_LoopHandle = osThreadCreate(osThread(taskMain_Loop), NULL);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f006 fb9d 	bl	800814e <osThreadCreate>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <main+0x88>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskGCAN_Hardwa */
  osThreadDef(taskGCAN_Hardwa, task_gcan_hw, osPriorityNormal, 0, 256);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <main+0x8c>)
 8001a1c:	463c      	mov	r4, r7
 8001a1e:	461d      	mov	r5, r3
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskGCAN_HardwaHandle = osThreadCreate(osThread(taskGCAN_Hardwa), NULL);
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f006 fb8c 	bl	800814e <osThreadCreate>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <main+0x90>)
 8001a3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a3c:	f006 fb80 	bl	8008140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <main+0x7c>
 8001a44:	20008e80 	.word	0x20008e80
 8001a48:	0800adb0 	.word	0x0800adb0
 8001a4c:	2000903c 	.word	0x2000903c
 8001a50:	0800addc 	.word	0x0800addc
 8001a54:	20009040 	.word	0x20009040

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b094      	sub	sp, #80	@ 0x50
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2234      	movs	r2, #52	@ 0x34
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 ff66 	bl	800a938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <SystemClock_Config+0xd0>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	4a28      	ldr	r2, [pc, #160]	@ (8001b28 <SystemClock_Config+0xd0>)
 8001a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <SystemClock_Config+0xd0>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <SystemClock_Config+0xd4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <SystemClock_Config+0xd4>)
 8001aa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <SystemClock_Config+0xd4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ab8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001abc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001ac8:	230c      	movs	r3, #12
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001acc:	23a0      	movs	r3, #160	@ 0xa0
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fb83 	bl	80061ec <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aec:	f000 fa7a 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	2302      	movs	r3, #2
 8001af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001afc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f876 	bl	8005c00 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b1a:	f000 fa63 	bl	8001fe4 <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	@ 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40007000 	.word	0x40007000

08001b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b36:	463b      	mov	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b44:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <MX_ADC1_Init+0x9c>)
 8001b46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <MX_ADC1_Init+0xa0>)
 8001b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b90:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b92:	f002 f923 	bl	8003ddc <HAL_ADC_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b9c:	f000 fa22 	bl	8001fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001bb2:	f002 f957 	bl	8003e64 <HAL_ADC_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bbc:	f000 fa12 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20008e38 	.word	0x20008e38
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	0f000001 	.word	0x0f000001

08001bd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_CAN1_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001be0:	2205      	movs	r2, #5
 8001be2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bf2:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001bf6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c24:	f002 fb4c 	bl	80042c0 <HAL_CAN_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c2e:	f000 f9d9 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20008e80 	.word	0x20008e80
 8001c3c:	40006400 	.word	0x40006400

08001c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	@ 0x38
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c70:	4b2c      	ldr	r3, [pc, #176]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c78:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 112;
 8001c84:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c86:	2270      	movs	r2, #112	@ 0x70
 8001c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c96:	4823      	ldr	r0, [pc, #140]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c98:	f004 fd46 	bl	8006728 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001ca2:	f000 f99f 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481c      	ldr	r0, [pc, #112]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001cb4:	f005 f9e4 	bl	8007080 <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001cbe:	f000 f991 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cc2:	4818      	ldr	r0, [pc, #96]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001cc4:	f004 fdf0 	bl	80068a8 <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001cce:	f000 f989 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4810      	ldr	r0, [pc, #64]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001ce2:	f005 feb1 	bl	8007a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001cec:	f000 f97a 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	2360      	movs	r3, #96	@ 0x60
 8001cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	220c      	movs	r2, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001d08:	f005 f8f8 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d12:	f000 f967 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d16:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001d18:	f000 fae2 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	@ 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20008ea8 	.word	0x20008ea8

08001d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	@ 0x38
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e10 <MX_TIM3_Init+0xe8>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 112;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d6c:	2270      	movs	r2, #112	@ 0x70
 8001d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d7c:	4823      	ldr	r0, [pc, #140]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d7e:	f004 fcd3 	bl	8006728 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001d88:	f000 f92c 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d96:	4619      	mov	r1, r3
 8001d98:	481c      	ldr	r0, [pc, #112]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d9a:	f005 f971 	bl	8007080 <HAL_TIM_ConfigClockSource>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001da4:	f000 f91e 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da8:	4818      	ldr	r0, [pc, #96]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001daa:	f004 fd7d 	bl	80068a8 <HAL_TIM_PWM_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001db4:	f000 f916 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4811      	ldr	r0, [pc, #68]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001dc8:	f005 fe3e 	bl	8007a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001dd2:	f000 f907 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd6:	2360      	movs	r3, #96	@ 0x60
 8001dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	220c      	movs	r2, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001dee:	f005 f885 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001df8:	f000 f8f4 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001dfe:	f000 fa6f 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3738      	adds	r7, #56	@ 0x38
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20008ef0 	.word	0x20008ef0
 8001e10:	40000400 	.word	0x40000400

08001e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_USART2_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	f005 fe8c 	bl	8007b68 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f000 f8c5 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20008ff8 	.word	0x20008ff8
 8001e64:	40004400 	.word	0x40004400

08001e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <MX_DMA_Init+0x4c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb4 <MX_DMA_Init+0x4c>)
 8001e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <MX_DMA_Init+0x4c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	200d      	movs	r0, #13
 8001e90:	f003 f96e 	bl	8005170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e94:	200d      	movs	r0, #13
 8001e96:	f003 f987 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	202f      	movs	r0, #47	@ 0x2f
 8001ea0:	f003 f966 	bl	8005170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001ea4:	202f      	movs	r0, #47	@ 0x2f
 8001ea6:	f003 f97f 	bl	80051a8 <HAL_NVIC_EnableIRQ>

}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2120      	movs	r1, #32
 8001f42:	4812      	ldr	r0, [pc, #72]	@ (8001f8c <MX_GPIO_Init+0xd4>)
 8001f44:	f003 fe42 	bl	8005bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <MX_GPIO_Init+0xd8>)
 8001f5e:	f003 fca1 	bl	80058a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f62:	2320      	movs	r3, #32
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_GPIO_Init+0xd4>)
 8001f7a:	f003 fc93 	bl	80058a4 <HAL_GPIO_Init>

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020800 	.word	0x40020800

08001f94 <task_main_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main_loop */
void task_main_loop(void const * argument)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  main_loop();
 8001f9c:	f7ff f900 	bl	80011a0 <main_loop>
    osDelay(10);
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f006 f920 	bl	80081e6 <osDelay>
	  main_loop();
 8001fa6:	bf00      	nop
 8001fa8:	e7f8      	b.n	8001f9c <task_main_loop+0x8>

08001faa <task_gcan_hw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gcan_hw */
void task_gcan_hw(void const * argument)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gcan_hw */
  /* Infinite loop */
  for(;;)
  {
	  can_buffer_handling_loop();
 8001fb2:	f7ff f8e7 	bl	8001184 <can_buffer_handling_loop>
    osDelay(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f006 f915 	bl	80081e6 <osDelay>
	  can_buffer_handling_loop();
 8001fbc:	bf00      	nop
 8001fbe:	e7f8      	b.n	8001fb2 <task_gcan_hw+0x8>

08001fc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fd2:	f001 febb 	bl	8003d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40001000 	.word	0x40001000

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <Error_Handler+0x8>

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_MspInit+0x54>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <HAL_MspInit+0x54>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_MspInit+0x54>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_MspInit+0x54>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_MspInit+0x54>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_MspInit+0x54>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	210f      	movs	r1, #15
 8002032:	f06f 0001 	mvn.w	r0, #1
 8002036:	f003 f89b 	bl	8005170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a17      	ldr	r2, [pc, #92]	@ (80020c4 <HAL_ADC_MspInit+0x7c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d127      	bne.n	80020ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	4a15      	ldr	r2, [pc, #84]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002078:	6453      	str	r3, [r2, #68]	@ 0x44
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a6:	2303      	movs	r3, #3
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <HAL_ADC_MspInit+0x84>)
 80020b6:	f003 fbf5 	bl	80058a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	@ 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40012000 	.word	0x40012000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a25      	ldr	r2, [pc, #148]	@ (8002184 <HAL_CAN_MspInit+0xb4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d144      	bne.n	800217c <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	4a23      	ldr	r2, [pc, #140]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 80020fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002100:	6413      	str	r3, [r2, #64]	@ 0x40
 8002102:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800212a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800213c:	2309      	movs	r3, #9
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4811      	ldr	r0, [pc, #68]	@ (800218c <HAL_CAN_MspInit+0xbc>)
 8002148:	f003 fbac 	bl	80058a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2105      	movs	r1, #5
 8002150:	2013      	movs	r0, #19
 8002152:	f003 f80d 	bl	8005170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002156:	2013      	movs	r0, #19
 8002158:	f003 f826 	bl	80051a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2105      	movs	r1, #5
 8002160:	2014      	movs	r0, #20
 8002162:	f003 f805 	bl	8005170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002166:	2014      	movs	r0, #20
 8002168:	f003 f81e 	bl	80051a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2105      	movs	r1, #5
 8002170:	2015      	movs	r0, #21
 8002172:	f002 fffd 	bl	8005170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002176:	2015      	movs	r0, #21
 8002178:	f003 f816 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40006400 	.word	0x40006400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a0:	d144      	bne.n	800222c <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b48      	ldr	r3, [pc, #288]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a47      	ldr	r2, [pc, #284]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 80021be:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021c0:	4a43      	ldr	r2, [pc, #268]	@ (80022d0 <HAL_TIM_Base_MspInit+0x140>)
 80021c2:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 80021c4:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021c6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80021ca:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021cc:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d2:	4b3e      	ldr	r3, [pc, #248]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80021d8:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021de:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e0:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e8:	4b38      	ldr	r3, [pc, #224]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ee:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_NORMAL;
 80021f0:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80021f6:	4b35      	ldr	r3, [pc, #212]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021fc:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 8002202:	4832      	ldr	r0, [pc, #200]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002204:	f002 ffde 	bl	80051c4 <HAL_DMA_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800220e:	f7ff fee9 	bl	8001fe4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2d      	ldr	r2, [pc, #180]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	4a2c      	ldr	r2, [pc, #176]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2a      	ldr	r2, [pc, #168]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
 8002224:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800222a:	e048      	b.n	80022be <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	@ (80022d4 <HAL_TIM_Base_MspInit+0x144>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d143      	bne.n	80022be <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <HAL_TIM_Base_MspInit+0x14c>)
 8002256:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800225a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800225e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002260:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002262:	2240      	movs	r2, #64	@ 0x40
 8002264:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002266:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800226e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002272:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002274:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800227a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800227e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002282:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002296:	4810      	ldr	r0, [pc, #64]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002298:	f002 ff94 	bl	80051c4 <HAL_DMA_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 80022a2:	f7ff fe9f 	bl	8001fe4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022b6:	621a      	str	r2, [r3, #32]
 80022b8:	4a07      	ldr	r2, [pc, #28]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	20008f38 	.word	0x20008f38
 80022d0:	400260b8 	.word	0x400260b8
 80022d4:	40000400 	.word	0x40000400
 80022d8:	20008f98 	.word	0x20008f98
 80022dc:	40026040 	.word	0x40026040

080022e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002300:	d11e      	bne.n	8002340 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a21      	ldr	r2, [pc, #132]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PIXELS2_Pin;
 800231e:	2304      	movs	r3, #4
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800232e:	2301      	movs	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PIXELS2_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4816      	ldr	r0, [pc, #88]	@ (8002394 <HAL_TIM_MspPostInit+0xb4>)
 800233a:	f003 fab3 	bl	80058a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800233e:	e023      	b.n	8002388 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <HAL_TIM_MspPostInit+0xb8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d11e      	bne.n	8002388 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PIXELS_Pin;
 8002366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002378:	2302      	movs	r3, #2
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PIXELS_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	4806      	ldr	r0, [pc, #24]	@ (800239c <HAL_TIM_MspPostInit+0xbc>)
 8002384:	f003 fa8e 	bl	80058a4 <HAL_GPIO_Init>
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400
 8002398:	40000400 	.word	0x40000400
 800239c:	40020800 	.word	0x40020800

080023a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <HAL_UART_MspInit+0x84>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12b      	bne.n	800241a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a17      	ldr	r2, [pc, #92]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023fa:	230c      	movs	r3, #12
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800240a:	2307      	movs	r3, #7
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	@ (800242c <HAL_UART_MspInit+0x8c>)
 8002416:	f003 fa45 	bl	80058a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	@ 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004400 	.word	0x40004400
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000

08002430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	@ 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_InitTick+0xe4>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	4a32      	ldr	r2, [pc, #200]	@ (8002514 <HAL_InitTick+0xe4>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_InitTick+0xe4>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800245c:	f107 0210 	add.w	r2, r7, #16
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fce4 	bl	8005e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002476:	f003 fcb5 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 800247a:	6378      	str	r0, [r7, #52]	@ 0x34
 800247c:	e004      	b.n	8002488 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800247e:	f003 fcb1 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8002482:	4603      	mov	r3, r0
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	4a23      	ldr	r2, [pc, #140]	@ (8002518 <HAL_InitTick+0xe8>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	3b01      	subs	r3, #1
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_InitTick+0xec>)
 8002498:	4a21      	ldr	r2, [pc, #132]	@ (8002520 <HAL_InitTick+0xf0>)
 800249a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_InitTick+0xec>)
 800249e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_InitTick+0xec>)
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <HAL_InitTick+0xec>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_InitTick+0xec>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_InitTick+0xec>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024bc:	4817      	ldr	r0, [pc, #92]	@ (800251c <HAL_InitTick+0xec>)
 80024be:	f004 f933 	bl	8006728 <HAL_TIM_Base_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80024c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11b      	bne.n	8002508 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024d0:	4812      	ldr	r0, [pc, #72]	@ (800251c <HAL_InitTick+0xec>)
 80024d2:	f004 f979 	bl	80067c8 <HAL_TIM_Base_Start_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80024dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024e4:	2036      	movs	r0, #54	@ 0x36
 80024e6:	f002 fe5f 	bl	80051a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d808      	bhi.n	8002502 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	2036      	movs	r0, #54	@ 0x36
 80024f6:	f002 fe3b 	bl	8005170 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_InitTick+0xf4>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e002      	b.n	8002508 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002508:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800250c:	4618      	mov	r0, r3
 800250e:	3738      	adds	r7, #56	@ 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	431bde83 	.word	0x431bde83
 800251c:	20009044 	.word	0x20009044
 8002520:	40001000 	.word	0x40001000
 8002524:	2000641c 	.word	0x2000641c

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <UsageFault_Handler+0x4>

08002550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <DMA1_Stream2_IRQHandler+0x10>)
 8002566:	f002 ff33 	bl	80053d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20008f98 	.word	0x20008f98

08002574 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <CAN1_TX_IRQHandler+0x10>)
 800257a:	f002 fb58 	bl	8004c2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20008e80 	.word	0x20008e80

08002588 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <CAN1_RX0_IRQHandler+0x10>)
 800258e:	f002 fb4e 	bl	8004c2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20008e80 	.word	0x20008e80

0800259c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <CAN1_RX1_IRQHandler+0x10>)
 80025a2:	f002 fb44 	bl	8004c2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20008e80 	.word	0x20008e80

080025b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch4);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <DMA1_Stream7_IRQHandler+0x10>)
 80025b6:	f002 ff0b 	bl	80053d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20008f38 	.word	0x20008f38

080025c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <TIM6_DAC_IRQHandler+0x10>)
 80025ca:	f004 fb8f 	bl	8006cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20009044 	.word	0x20009044

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	@ (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	@ (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	@ (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7ff ffd7 	bl	80025d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f008 f9e9 	bl	800aa00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7ff f9c9 	bl	80019c4 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	20006478 	.word	0x20006478
  ldr r2, =_sidata
 8002640:	0800ae40 	.word	0x0800ae40
  ldr r2, =_sbss
 8002644:	20006478 	.word	0x20006478
  ldr r4, =_ebss
 8002648:	2000d88c 	.word	0x2000d88c

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <init_can>:
//  MODULE_ID module_id:     what module this is (ex. PDM_ID, ACM_ID)
//  BXCAN_TYPE bx_type:      master or slave BXcan type. This is usually BXTYPE_MASTER
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(U8 bus_id, CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6039      	str	r1, [r7, #0]
 8002658:	4611      	mov	r1, r2
 800265a:	461a      	mov	r2, r3
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	460b      	mov	r3, r1
 8002662:	71bb      	strb	r3, [r7, #6]
 8002664:	4613      	mov	r3, r2
 8002666:	717b      	strb	r3, [r7, #5]
	U8 c;

	// set the current module
	this_module_id = module_id;
 8002668:	4a3e      	ldr	r2, [pc, #248]	@ (8002764 <init_can+0x114>)
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	7013      	strb	r3, [r2, #0]

	// check for invalid bus ID
	if (!(bus_id == GCAN0 || bus_id == GCAN1 || bus_id == GCAN2)) {
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <init_can+0x36>
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d005      	beq.n	8002686 <init_can+0x36>
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d002      	beq.n	8002686 <init_can+0x36>
	    return INIT_FAILED;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
 8002684:	e06a      	b.n	800275c <init_can+0x10c>
        txbuff1.hcan = hcan;
        osMutexDef(txbuff1_mutex);
        txbuff1.mutex = osMutexCreate(osMutex(txbuff1_mutex));
    }
#endif
    if (bus_id == GCAN0) {
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10e      	bne.n	80026aa <init_can+0x5a>
        txbuff0.hcan = hcan;
 800268c:	4a36      	ldr	r2, [pc, #216]	@ (8002768 <init_can+0x118>)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6053      	str	r3, [r2, #4]
        osMutexDef(txbuff0_mutex);
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
        txbuff0.mutex = osMutexCreate(osMutex(txbuff0_mutex));
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	4618      	mov	r0, r3
 80026a0:	f005 fdb5 	bl	800820e <osMutexCreate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <init_can+0x118>)
 80026a8:	6113      	str	r3, [r2, #16]
    }

	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f001 fb6e 	bl	8003d8c <HAL_SetTickFreq>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
 80026b4:	e01f      	b.n	80026f6 <init_can+0xa6>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 80026b6:	7dfa      	ldrb	r2, [r7, #23]
 80026b8:	492c      	ldr	r1, [pc, #176]	@ (800276c <init_can+0x11c>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <init_can+0x120>)
 80026c6:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 80026c8:	7dfa      	ldrb	r2, [r7, #23]
 80026ca:	4928      	ldr	r1, [pc, #160]	@ (800276c <init_can+0x11c>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3304      	adds	r3, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 80026dc:	7dfa      	ldrb	r2, [r7, #23]
 80026de:	4923      	ldr	r1, [pc, #140]	@ (800276c <init_can+0x11c>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3308      	adds	r3, #8
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	3301      	adds	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d9dc      	bls.n	80026b6 <init_can+0x66>

	}

	if (init_filters(hcan, bx_type))
 80026fc:	797b      	ldrb	r3, [r7, #5]
 80026fe:	4619      	mov	r1, r3
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f000 f837 	bl	8002774 <init_filters>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <init_can+0xc2>
	{
		return FILTER_SET_FAILED;
 800270c:	f06f 0304 	mvn.w	r3, #4
 8002710:	e024      	b.n	800275c <init_can+0x10c>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8002712:	2102      	movs	r1, #2
 8002714:	6838      	ldr	r0, [r7, #0]
 8002716:	f002 fa3d 	bl	8004b94 <HAL_CAN_ActivateNotification>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <init_can+0xde>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8002720:	2110      	movs	r1, #16
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f002 fa36 	bl	8004b94 <HAL_CAN_ActivateNotification>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <init_can+0xe4>
	{
		return IRQ_SET_FAILED;
 800272e:	f06f 0305 	mvn.w	r3, #5
 8002732:	e013      	b.n	800275c <init_can+0x10c>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002734:	2101      	movs	r1, #1
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	f002 fa2c 	bl	8004b94 <HAL_CAN_ActivateNotification>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <init_can+0xf8>
	{
		return IRQ_SET_FAILED;
 8002742:	f06f 0305 	mvn.w	r3, #5
 8002746:	e009      	b.n	800275c <init_can+0x10c>
	}
#endif

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f001 ff95 	bl	8004678 <HAL_CAN_Start>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <init_can+0x10a>
	{
		return CAN_START_FAILED;
 8002754:	f06f 0306 	mvn.w	r3, #6
 8002758:	e000      	b.n	800275c <init_can+0x10c>
	}

	return CAN_SUCCESS;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200090bc 	.word	0x200090bc
 8002768:	20000018 	.word	0x20000018
 800276c:	2000908c 	.word	0x2000908c
 8002770:	08003971 	.word	0x08003971

08002774 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b092      	sub	sp, #72	@ 0x48
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (bx_type == BXTYPE_SLAVE)
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d102      	bne.n	8002792 <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 800278c:	230e      	movs	r3, #14
 800278e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002792:	2301      	movs	r3, #1
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK; // use mask mode to filter
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
	}
#else

#ifndef IGNORE_DATA
	// accept STD ID messages (IDE=0)
	filterConfig.FilterBank = banknum++;
 800279a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80027a4:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // 16 bit scale includes IDE bit
 80027aa:	2300      	movs	r3, #0
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	filterConfig.FilterIdLow = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = 0b00001000;
 80027b6:	2308      	movs	r3, #8
 80027b8:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f001 fe77 	bl	80044b8 <HAL_CAN_ConfigFilter>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <init_filters+0x62>
	{
		return FILTER_SET_FAILED;
 80027d0:	f06f 0304 	mvn.w	r3, #4
 80027d4:	e08d      	b.n	80028f2 <init_filters+0x17e>
	}

	// apply same filter to FIFO1
	filterConfig.FilterBank = banknum++;
 80027d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80027e0:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f001 fe63 	bl	80044b8 <HAL_CAN_ConfigFilter>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <init_filters+0x8a>
	{
		return FILTER_SET_FAILED;
 80027f8:	f06f 0304 	mvn.w	r3, #4
 80027fc:	e079      	b.n	80028f2 <init_filters+0x17e>
    U32 filt_id_high;
    U32 filt_mask_high;
    U32 filt_mask_low;

	// accept EXT messages with destination = this_module_id
	filt_id_high = GET_ID_HIGH(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 80027fe:	4b3f      	ldr	r3, [pc, #252]	@ (80028fc <init_filters+0x188>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	065b      	lsls	r3, r3, #25
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
	filt_id_low = GET_ID_LOW(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8002808:	2304      	movs	r3, #4
 800280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 800280c:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
    filt_mask_low = GET_ID_LOW(DEST_MASK);
 8002812:	2304      	movs	r3, #4
 8002814:	637b      	str	r3, [r7, #52]	@ 0x34

	filterConfig.FilterBank = banknum++;
 8002816:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8002820:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002826:	2301      	movs	r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
	filterConfig.FilterIdLow = filt_id_low;
 800282a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282c:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;
 800282e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002830:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;
 8002832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002834:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fe39 	bl	80044b8 <HAL_CAN_ConfigFilter>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <init_filters+0xde>
	{
		return FILTER_SET_FAILED;
 800284c:	f06f 0304 	mvn.w	r3, #4
 8002850:	e04f      	b.n	80028f2 <init_filters+0x17e>
	}

	// apply same filter to FIFO1
	filterConfig.FilterBank = banknum++;
 8002852:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 800285c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f001 fe25 	bl	80044b8 <HAL_CAN_ConfigFilter>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <init_filters+0x106>
	{
		return FILTER_SET_FAILED;
 8002874:	f06f 0304 	mvn.w	r3, #4
 8002878:	e03b      	b.n	80028f2 <init_filters+0x17e>
	}

	// accept EXT messages with destination = ALL_MODULES_ID
	filt_id_high = GET_ID_HIGH(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 800287a:	2300      	movs	r3, #0
 800287c:	643b      	str	r3, [r7, #64]	@ 0x40
	filt_id_low = GET_ID_LOW(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 800287e:	2304      	movs	r3, #4
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 8002882:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8002886:	63bb      	str	r3, [r7, #56]	@ 0x38
	filt_mask_low = GET_ID_LOW(DEST_MASK);
 8002888:	2304      	movs	r3, #4
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34

	filterConfig.FilterBank = banknum++;
 800288c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8002896:	623b      	str	r3, [r7, #32]
    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800289c:	2301      	movs	r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
    filterConfig.FilterIdLow = filt_id_low;
 80028a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a2:	613b      	str	r3, [r7, #16]
    filterConfig.FilterIdHigh = filt_id_high;
 80028a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a6:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;
 80028ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ae:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f001 fdfe 	bl	80044b8 <HAL_CAN_ConfigFilter>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <init_filters+0x154>
	{
		return FILTER_SET_FAILED;
 80028c2:	f06f 0304 	mvn.w	r3, #4
 80028c6:	e014      	b.n	80028f2 <init_filters+0x17e>
	}

	// apply same filter to FIFO1
	filterConfig.FilterBank = banknum++;
 80028c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80028d2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 fdea 	bl	80044b8 <HAL_CAN_ConfigFilter>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <init_filters+0x17c>
	{
		return FILTER_SET_FAILED;
 80028ea:	f06f 0304 	mvn.w	r3, #4
 80028ee:	e000      	b.n	80028f2 <init_filters+0x17e>
	}

#endif // CAN_ROUTER

	return CAN_SUCCESS;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3748      	adds	r7, #72	@ 0x48
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200090bc 	.word	0x200090bc

08002900 <send_parameter>:
// params:
// CAN_INFO_STRUCT* param: parameter to send (along with its group)
// returns:
// error codes specified in GopherCAN.h
S8 send_parameter(CAN_INFO_STRUCT* param)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	return send_group(param->GROUP_ID);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	885b      	ldrh	r3, [r3, #2]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f805 	bl	800291c <send_group>
 8002912:	4603      	mov	r3, r0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <send_group>:
// params:
//  U16 group_id: the CAN ID of the group to be sent
// returns:
//  error codes specificed in GopherCAN.h
S8 send_group(U16 group_id)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b091      	sub	sp, #68	@ 0x44
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
    PARAM_GROUP* group = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // find the specified parameter group
    for (U8 i = 0; i < NUM_OF_GROUPS; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002930:	e01a      	b.n	8002968 <send_group+0x4c>
    {
        if (GROUPS[i].group_id == group_id)
 8002932:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8002936:	494d      	ldr	r1, [pc, #308]	@ (8002a6c <send_group+0x150>)
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	429a      	cmp	r2, r3
 8002948:	d109      	bne.n	800295e <send_group+0x42>
        {
            group = &GROUPS[i];
 800294a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4a45      	ldr	r2, [pc, #276]	@ (8002a6c <send_group+0x150>)
 8002958:	4413      	add	r3, r2
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800295c:	e008      	b.n	8002970 <send_group+0x54>
    for (U8 i = 0; i < NUM_OF_GROUPS; i++)
 800295e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002962:	3301      	adds	r3, #1
 8002964:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002968:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800296c:	2b8c      	cmp	r3, #140	@ 0x8c
 800296e:	d9e0      	bls.n	8002932 <send_group+0x16>
        }
    }

    if (group == NULL) return NOT_FOUND_ERR;
 8002970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <send_group+0x60>
 8002976:	f06f 0309 	mvn.w	r3, #9
 800297a:	e073      	b.n	8002a64 <send_group+0x148>

    // build parameter group message. Setting the data to 0 means that training zeros
    // will be properly removed when sending the message, cutting down the DLC with it
    CAN_MSG message = {
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	2224      	movs	r2, #36	@ 0x24
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f007 ffd7 	bl	800a938 <memset>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2308      	movs	r3, #8
 8002990:	61fb      	str	r3, [r7, #28]
    };

    // run through all of the bytes in the group, putting the correct data in them based
    // on the parameters that are in this group
    S8 err;
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002998:	e031      	b.n	80029fe <send_group+0xe2>
    {
        GCAN_PARAM_ID id = group->param_ids[i];
 800299a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800299e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	885b      	ldrh	r3, [r3, #2]
 80029a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if (id == EMPTY_ID) continue;
 80029a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d021      	beq.n	80029f2 <send_group+0xd6>

        // check to make sure this is a good id. We are down bad if it is not
        if (id < EMPTY_ID || id >= NUM_OF_PARAMETERS) return BAD_PARAMETER_ID;
 80029ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029b0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80029b4:	d902      	bls.n	80029bc <send_group+0xa0>
 80029b6:	f06f 0302 	mvn.w	r3, #2
 80029ba:	e053      	b.n	8002a64 <send_group+0x148>

        // add this parameter's data to the message
        CAN_INFO_STRUCT* parameter = (CAN_INFO_STRUCT*) PARAMETERS[id];
 80029bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029be:	4a2c      	ldr	r2, [pc, #176]	@ (8002a70 <send_group+0x154>)
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30
        err = encode_parameter(parameter, message.data, i, parameter->ENC_SIZE);
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	79d8      	ldrb	r0, [r3, #7]
 80029ca:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	f103 0118 	add.w	r1, r3, #24
 80029d6:	4603      	mov	r3, r0
 80029d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029da:	f000 f84b 	bl	8002a74 <encode_parameter>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        if (err) return err;
 80029e4:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <send_group+0xd8>
 80029ec:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 80029f0:	e038      	b.n	8002a64 <send_group+0x148>
        if (id == EMPTY_ID) continue;
 80029f2:	bf00      	nop
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 80029f4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80029f8:	3301      	adds	r3, #1
 80029fa:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80029fe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002a02:	2b07      	cmp	r3, #7
 8002a04:	d9c9      	bls.n	800299a <send_group+0x7e>
    }

    // send the message
    err = tx_can_message(&message);
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fd3c 	bl	8003488 <tx_can_message>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    if (err) return err;
 8002a16:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <send_group+0x108>
 8002a1e:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8002a22:	e01f      	b.n	8002a64 <send_group+0x148>

    // if successful send, update the last_tx for all of the sent parameters
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8002a2a:	e016      	b.n	8002a5a <send_group+0x13e>
    {
        GCAN_PARAM_ID id = group->param_ids[i];
 8002a2c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	885b      	ldrh	r3, [r3, #2]
 8002a38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if (id != EMPTY_ID) ((CAN_INFO_STRUCT*)PARAMETERS[id])->last_tx = HAL_GetTick();
 8002a3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <send_group+0x134>
 8002a40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <send_group+0x154>)
 8002a44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002a48:	f001 f994 	bl	8003d74 <HAL_GetTick>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	6123      	str	r3, [r4, #16]
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8002a50:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a54:	3301      	adds	r3, #1
 8002a56:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8002a5a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d9e4      	bls.n	8002a2c <send_group+0x110>
    }

    return CAN_SUCCESS;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3744      	adds	r7, #68	@ 0x44
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	20005a30 	.word	0x20005a30
 8002a70:	2000502c 	.word	0x2000502c

08002a74 <encode_parameter>:

// encode_parameter
// encodes a parameter as an unsigned int with scale & offset
// adds encoded param to the CAN message data field
static S8 encode_parameter(CAN_INFO_STRUCT* param, U8* data, U8 start, U8 length)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b09e      	sub	sp, #120	@ 0x78
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6678      	str	r0, [r7, #100]	@ 0x64
 8002a7e:	6639      	str	r1, [r7, #96]	@ 0x60
 8002a80:	4619      	mov	r1, r3
 8002a82:	4613      	mov	r3, r2
 8002a84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002a88:	460b      	mov	r3, r1
 8002a8a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    U64 value = 0;
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // apply quantization and store in U64
    // use scale = 1 if necessary to avoid divide by 0 due to truncation
    switch (param->TYPE) {
 8002a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a9c:	791b      	ldrb	r3, [r3, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	f200 81b1 	bhi.w	8002e08 <encode_parameter+0x394>
 8002aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <encode_parameter+0x38>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002b9f 	.word	0x08002b9f
 8002ab4:	08002c55 	.word	0x08002c55
 8002ab8:	08002cf1 	.word	0x08002cf1
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002bf9 	.word	0x08002bf9
 8002ac4:	08002ca5 	.word	0x08002ca5
 8002ac8:	08002d67 	.word	0x08002d67
 8002acc:	08002ddd 	.word	0x08002ddd
        case UNSIGNED8:
            value = (((U8_CAN_STRUCT*)param)->data - (U8)param->OFFSET)
 8002ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ad2:	7f1b      	ldrb	r3, [r3, #28]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ad8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002ae4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	1ad2      	subs	r2, r2, r3
                / ((U8)param->SCALE + ((U8)param->SCALE == 0));
 8002aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002afa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b04:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b10:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	440b      	add	r3, r1
 8002b22:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((U8_CAN_STRUCT*)param)->data - (U8)param->OFFSET)
 8002b26:	17da      	asrs	r2, r3, #31
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b2c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b30:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002b34:	e16b      	b.n	8002e0e <encode_parameter+0x39a>
        case SIGNED8:
            value = (((S8_CAN_STRUCT*)param)->data - (S8)param->OFFSET)
 8002b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b38:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b48:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b4c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	1ad2      	subs	r2, r2, r3
                / ((S8)param->SCALE + ((S8)param->SCALE == 0));
 8002b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b56:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b62:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b74:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b78:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	440b      	add	r3, r1
 8002b8a:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((S8_CAN_STRUCT*)param)->data - (S8)param->OFFSET)
 8002b8e:	17da      	asrs	r2, r3, #31
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	61fa      	str	r2, [r7, #28]
 8002b94:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002b98:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002b9c:	e137      	b.n	8002e0e <encode_parameter+0x39a>
        case UNSIGNED16:
            value = (((U16_CAN_STRUCT*)param)->data - (U16)param->OFFSET)
 8002b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba0:	8b9b      	ldrh	r3, [r3, #28]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bae:	ee17 3a90 	vmov	r3, s15
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	1ad2      	subs	r2, r2, r3
                / ((U16)param->SCALE + ((U16)param->SCALE == 0));
 8002bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc0:	ee17 3a90 	vmov	r3, s15
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	ee17 3a90 	vmov	r3, s15
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	440b      	add	r3, r1
 8002be4:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((U16_CAN_STRUCT*)param)->data - (U16)param->OFFSET)
 8002be8:	17da      	asrs	r2, r3, #31
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	617a      	str	r2, [r7, #20]
 8002bee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002bf2:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002bf6:	e10a      	b.n	8002e0e <encode_parameter+0x39a>
        case SIGNED16:
            value = (((S16_CAN_STRUCT*)param)->data - (S16)param->OFFSET)
 8002bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c0a:	ee17 3a90 	vmov	r3, s15
 8002c0e:	b21b      	sxth	r3, r3
 8002c10:	1ad2      	subs	r2, r2, r3
                / ((S16)param->SCALE + ((S16)param->SCALE == 0));
 8002c12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c1c:	ee17 3a90 	vmov	r3, s15
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	4619      	mov	r1, r3
 8002c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	440b      	add	r3, r1
 8002c40:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((S16_CAN_STRUCT*)param)->data - (S16)param->OFFSET)
 8002c44:	17da      	asrs	r2, r3, #31
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	60fa      	str	r2, [r7, #12]
 8002c4a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c4e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002c52:	e0dc      	b.n	8002e0e <encode_parameter+0x39a>
        case UNSIGNED32:
            value = (((U32_CAN_STRUCT*)param)->data - (U32)(param->OFFSET))
 8002c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c5a:	edd2 7a03 	vldr	s15, [r2, #12]
 8002c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c62:	ee17 2a90 	vmov	r2, s15
 8002c66:	1a9a      	subs	r2, r3, r2
                / ((U32)param->SCALE + ((U32)param->SCALE == 0));
 8002c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c72:	ee17 1a90 	vmov	r1, s15
 8002c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c78:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c80:	ee17 3a90 	vmov	r3, s15
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
            value = (((U32_CAN_STRUCT*)param)->data - (U32)(param->OFFSET))
 8002c94:	2200      	movs	r2, #0
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c9e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002ca2:	e0b4      	b.n	8002e0e <encode_parameter+0x39a>
        case SIGNED32:
            value = (((S32_CAN_STRUCT*)param)->data - (S32)(param->OFFSET))
 8002ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002caa:	edd2 7a03 	vldr	s15, [r2, #12]
 8002cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb2:	ee17 2a90 	vmov	r2, s15
 8002cb6:	1a9a      	subs	r2, r3, r2
                / ((S32)param->SCALE + ((S32)param->SCALE == 0));
 8002cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc2:	ee17 1a90 	vmov	r1, s15
 8002cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd0:	ee17 3a90 	vmov	r3, s15
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	440b      	add	r3, r1
 8002ce0:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((S32_CAN_STRUCT*)param)->data - (S32)(param->OFFSET))
 8002ce4:	17da      	asrs	r2, r3, #31
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	4615      	mov	r5, r2
 8002cea:	e9c7 451c 	strd	r4, r5, [r7, #112]	@ 0x70
            break;
 8002cee:	e08e      	b.n	8002e0e <encode_parameter+0x39a>
        case UNSIGNED64:
            value = (((U64_CAN_STRUCT*)param)->data - (U64)param->OFFSET)
 8002cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f87e 	bl	8000dfc <__aeabi_f2ulz>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	1aa1      	subs	r1, r4, r2
 8002d06:	6539      	str	r1, [r7, #80]	@ 0x50
 8002d08:	eb65 0303 	sbc.w	r3, r5, r3
 8002d0c:	657b      	str	r3, [r7, #84]	@ 0x54
                / ((U64)param->SCALE + ((U64)param->SCALE == 0));
 8002d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f872 	bl	8000dfc <__aeabi_f2ulz>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f86b 	bl	8000dfc <__aeabi_f2ulz>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2200      	movs	r2, #0
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d3c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002d42:	460b      	mov	r3, r1
 8002d44:	18e3      	adds	r3, r4, r3
 8002d46:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d48:	4613      	mov	r3, r2
 8002d4a:	eb45 0303 	adc.w	r3, r5, r3
 8002d4e:	647b      	str	r3, [r7, #68]	@ 0x44
            value = (((U64_CAN_STRUCT*)param)->data - (U64)param->OFFSET)
 8002d50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d54:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d58:	f7fe f824 	bl	8000da4 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            break;
 8002d64:	e053      	b.n	8002e0e <encode_parameter+0x39a>
        case SIGNED64:
            value = (((S64_CAN_STRUCT*)param)->data - (S64)param->OFFSET)
 8002d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d68:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f82f 	bl	8000dd4 <__aeabi_f2lz>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	1aa1      	subs	r1, r4, r2
 8002d7c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d7e:	eb65 0303 	sbc.w	r3, r5, r3
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
                / ((S64)param->SCALE + ((S64)param->SCALE == 0));
 8002d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe f823 	bl	8000dd4 <__aeabi_f2lz>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
 8002d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f81c 	bl	8000dd4 <__aeabi_f2lz>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4313      	orrs	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002db2:	637a      	str	r2, [r7, #52]	@ 0x34
 8002db4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002db8:	460b      	mov	r3, r1
 8002dba:	18e3      	adds	r3, r4, r3
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	eb45 0303 	adc.w	r3, r5, r3
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002dce:	f7fd ff99 	bl	8000d04 <__aeabi_ldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
            value = (((S64_CAN_STRUCT*)param)->data - (S64)param->OFFSET)
 8002dd6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            break;
 8002dda:	e018      	b.n	8002e0e <encode_parameter+0x39a>
        case FLOATING:
            // send floats as signed values
            value = (S64)( (((FLOAT_CAN_STRUCT*)param)->data - param->OFFSET) / param->SCALE );
 8002ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dde:	ed93 7a07 	vldr	s14, [r3, #28]
 8002de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002de8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002df2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df6:	ee16 0a90 	vmov	r0, s13
 8002dfa:	f7fd ffeb 	bl	8000dd4 <__aeabi_f2lz>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            break;
 8002e06:	e002      	b.n	8002e0e <encode_parameter+0x39a>
        default:
            return ENCODING_ERR;
 8002e08:	f06f 030d 	mvn.w	r3, #13
 8002e0c:	e060      	b.n	8002ed0 <encode_parameter+0x45c>
    }

    // move bytes into data field
    for (U8 i = 0; i < length; i++) {
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002e14:	e055      	b.n	8002ec2 <encode_parameter+0x44e>
        if (param->ENC == LSB) {
 8002e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e18:	799b      	ldrb	r3, [r3, #6]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d120      	bne.n	8002e60 <encode_parameter+0x3ec>
            data[start + i] = value >> (i * BITS_IN_BYTE);
 8002e1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e22:	00d9      	lsls	r1, r3, #3
 8002e24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e28:	f1c1 0420 	rsb	r4, r1, #32
 8002e2c:	f1a1 0020 	sub.w	r0, r1, #32
 8002e30:	fa22 f801 	lsr.w	r8, r2, r1
 8002e34:	fa03 f404 	lsl.w	r4, r3, r4
 8002e38:	ea48 0804 	orr.w	r8, r8, r4
 8002e3c:	fa23 f000 	lsr.w	r0, r3, r0
 8002e40:	ea48 0800 	orr.w	r8, r8, r0
 8002e44:	fa23 f901 	lsr.w	r9, r3, r1
 8002e48:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e50:	4413      	add	r3, r2
 8002e52:	461a      	mov	r2, r3
 8002e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e56:	4413      	add	r3, r2
 8002e58:	fa5f f288 	uxtb.w	r2, r8
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e02b      	b.n	8002eb8 <encode_parameter+0x444>
        } else if (param->ENC == MSB) {
 8002e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e62:	799b      	ldrb	r3, [r3, #6]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d124      	bne.n	8002eb2 <encode_parameter+0x43e>
            data[start + i] = value >> ((length - 1 - i) * BITS_IN_BYTE);
 8002e68:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	00d9      	lsls	r1, r3, #3
 8002e76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e7a:	f1c1 0420 	rsb	r4, r1, #32
 8002e7e:	f1a1 0020 	sub.w	r0, r1, #32
 8002e82:	fa22 fa01 	lsr.w	sl, r2, r1
 8002e86:	fa03 f404 	lsl.w	r4, r3, r4
 8002e8a:	ea4a 0a04 	orr.w	sl, sl, r4
 8002e8e:	fa23 f000 	lsr.w	r0, r3, r0
 8002e92:	ea4a 0a00 	orr.w	sl, sl, r0
 8002e96:	fa23 fb01 	lsr.w	fp, r3, r1
 8002e9a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002e9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002ea2:	4413      	add	r3, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ea8:	4413      	add	r3, r2
 8002eaa:	fa5f f28a 	uxtb.w	r2, sl
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e002      	b.n	8002eb8 <encode_parameter+0x444>
        } else return ENCODING_ERR;
 8002eb2:	f06f 030d 	mvn.w	r3, #13
 8002eb6:	e00b      	b.n	8002ed0 <encode_parameter+0x45c>
    for (U8 i = 0; i < length; i++) {
 8002eb8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002ec2:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002ec6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d3a3      	bcc.n	8002e16 <encode_parameter+0x3a2>
    }

    return CAN_SUCCESS;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3778      	adds	r7, #120	@ 0x78
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop

08002edc <decode_parameter>:


// decode_parameter
// extract and decode a parameter from CAN data field
static S8 decode_parameter(CAN_INFO_STRUCT* param, U8* data, U8 start, U8 length)
{
 8002edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee0:	b098      	sub	sp, #96	@ 0x60
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002ee6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4613      	mov	r3, r2
 8002eec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    U64 value = 0;
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    float value_fl = 0;
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	657b      	str	r3, [r7, #84]	@ 0x54

    // reconstruct U64
    for (U8 i = 0; i < length; i++) {
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002f0e:	e051      	b.n	8002fb4 <decode_parameter+0xd8>
        if (param->ENC == LSB) {
 8002f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f12:	799b      	ldrb	r3, [r3, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11e      	bne.n	8002f56 <decode_parameter+0x7a>
            value |= data[start + i] << (i * BITS_IN_BYTE);
 8002f18:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002f1c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f20:	4413      	add	r3, r2
 8002f22:	461a      	mov	r2, r3
 8002f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	17da      	asrs	r2, r3, #31
 8002f38:	469a      	mov	sl, r3
 8002f3a:	4693      	mov	fp, r2
 8002f3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f40:	ea42 010a 	orr.w	r1, r2, sl
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	ea43 030b 	orr.w	r3, r3, fp
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f50:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002f54:	e029      	b.n	8002faa <decode_parameter+0xce>
        } else if (param->ENC == MSB) {
 8002f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f58:	799b      	ldrb	r3, [r3, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d122      	bne.n	8002fa4 <decode_parameter+0xc8>
            value |= data[start + i] << ((length - 1 - i) * BITS_IN_BYTE);
 8002f5e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002f62:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f66:	4413      	add	r3, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f76:	1e5a      	subs	r2, r3, #1
 8002f78:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	17da      	asrs	r2, r3, #31
 8002f86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f90:	4311      	orrs	r1, r2
 8002f92:	6039      	str	r1, [r7, #0]
 8002f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f96:	430b      	orrs	r3, r1
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f9e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002fa2:	e002      	b.n	8002faa <decode_parameter+0xce>
        } else return DECODING_ERR;
 8002fa4:	f06f 030e 	mvn.w	r3, #14
 8002fa8:	e16d      	b.n	8003286 <decode_parameter+0x3aa>
    for (U8 i = 0; i < length; i++) {
 8002faa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002fb4:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002fb8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3a7      	bcc.n	8002f10 <decode_parameter+0x34>
    }

    // restore original type
    switch (param->TYPE) {
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc2:	791b      	ldrb	r3, [r3, #4]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	f200 8159 	bhi.w	800327e <decode_parameter+0x3a2>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <decode_parameter+0xf8>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	08003081 	.word	0x08003081
 8002fdc:	080030f7 	.word	0x080030f7
 8002fe0:	08003155 	.word	0x08003155
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	080030b5 	.word	0x080030b5
 8002fec:	08003121 	.word	0x08003121
 8002ff0:	080031a3 	.word	0x080031a3
 8002ff4:	080031ed 	.word	0x080031ed
        case UNSIGNED8:
            ((U8_CAN_STRUCT*)param)->data = (value * (U8)param->SCALE) + (U8)param->OFFSET;
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003002:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003006:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800300a:	b2da      	uxtb	r2, r3
 800300c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003010:	fb12 f303 	smulbb	r3, r2, r3
 8003014:	b2da      	uxtb	r2, r3
 8003016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003018:	edd3 7a03 	vldr	s15, [r3, #12]
 800301c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003020:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003024:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4413      	add	r3, r2
 800302c:	b2da      	uxtb	r2, r3
 800302e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003030:	771a      	strb	r2, [r3, #28]
            break;
 8003032:	e127      	b.n	8003284 <decode_parameter+0x3a8>
        case SIGNED8:
            ((S8_CAN_STRUCT*)param)->data = (value * (S8)param->SCALE) + (S8)param->OFFSET;
 8003034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003036:	edd3 7a02 	vldr	s15, [r3, #8]
 800303a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003042:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003046:	b25b      	sxtb	r3, r3
 8003048:	b25b      	sxtb	r3, r3
 800304a:	17da      	asrs	r2, r3, #31
 800304c:	633b      	str	r3, [r7, #48]	@ 0x30
 800304e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003050:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003054:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003058:	fb12 f303 	smulbb	r3, r2, r3
 800305c:	b2da      	uxtb	r2, r3
 800305e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003060:	edd3 7a03 	vldr	s15, [r3, #12]
 8003064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003068:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 800306c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003070:	b25b      	sxtb	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	4413      	add	r3, r2
 8003076:	b2db      	uxtb	r3, r3
 8003078:	b25a      	sxtb	r2, r3
 800307a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307c:	771a      	strb	r2, [r3, #28]
            break;
 800307e:	e101      	b.n	8003284 <decode_parameter+0x3a8>
        case UNSIGNED16:
            ((U16_CAN_STRUCT*)param)->data = (value * (U16)param->SCALE) + (U16)param->OFFSET;
 8003080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003082:	edd3 7a02 	vldr	s15, [r3, #8]
 8003086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308a:	ee17 3a90 	vmov	r3, s15
 800308e:	b29a      	uxth	r2, r3
 8003090:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003094:	fb12 f303 	smulbb	r3, r2, r3
 8003098:	b29a      	uxth	r2, r3
 800309a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800309c:	edd3 7a03 	vldr	s15, [r3, #12]
 80030a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a4:	ee17 3a90 	vmov	r3, s15
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b0:	839a      	strh	r2, [r3, #28]
            break;
 80030b2:	e0e7      	b.n	8003284 <decode_parameter+0x3a8>
        case SIGNED16:
            ((S16_CAN_STRUCT*)param)->data = (value * (S16)param->SCALE) + (S16)param->OFFSET;
 80030b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80030ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030be:	ee17 3a90 	vmov	r3, s15
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	17da      	asrs	r2, r3, #31
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80030ce:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80030d2:	fb12 f303 	smulbb	r3, r2, r3
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030da:	edd3 7a03 	vldr	s15, [r3, #12]
 80030de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e2:	ee17 3a90 	vmov	r3, s15
 80030e6:	b21b      	sxth	r3, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f2:	839a      	strh	r2, [r3, #28]
            break;
 80030f4:	e0c6      	b.n	8003284 <decode_parameter+0x3a8>
        case UNSIGNED32:
            ((U32_CAN_STRUCT*)param)->data = (value * (U32)param->SCALE) + (U32)param->OFFSET;
 80030f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80030fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003100:	ee17 2a90 	vmov	r2, s15
 8003104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800310c:	edd2 7a03 	vldr	s15, [r2, #12]
 8003110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003114:	ee17 2a90 	vmov	r2, s15
 8003118:	441a      	add	r2, r3
 800311a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800311c:	61da      	str	r2, [r3, #28]
            break;
 800311e:	e0b1      	b.n	8003284 <decode_parameter+0x3a8>
        case SIGNED32:
            ((S32_CAN_STRUCT*)param)->data = (value * (S32)param->SCALE) + (S32)param->OFFSET;
 8003120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003122:	edd3 7a02 	vldr	s15, [r3, #8]
 8003126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312a:	ee17 2a90 	vmov	r2, s15
 800312e:	17d3      	asrs	r3, r2, #31
 8003130:	623a      	str	r2, [r7, #32]
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800313e:	edd2 7a03 	vldr	s15, [r2, #12]
 8003142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003146:	ee17 2a90 	vmov	r2, s15
 800314a:	4413      	add	r3, r2
 800314c:	461a      	mov	r2, r3
 800314e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003150:	61da      	str	r2, [r3, #28]
            break;
 8003152:	e097      	b.n	8003284 <decode_parameter+0x3a8>
        case UNSIGNED64:
            ((U64_CAN_STRUCT*)param)->data = (value * (U64)param->SCALE) + (U64)param->OFFSET;
 8003154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fe4f 	bl	8000dfc <__aeabi_f2ulz>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003164:	fb03 f001 	mul.w	r0, r3, r1
 8003168:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800316a:	fb02 f101 	mul.w	r1, r2, r1
 800316e:	4401      	add	r1, r0
 8003170:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003172:	fba0 8902 	umull	r8, r9, r0, r2
 8003176:	eb01 0309 	add.w	r3, r1, r9
 800317a:	4699      	mov	r9, r3
 800317c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fe3b 	bl	8000dfc <__aeabi_f2ulz>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	eb18 0102 	adds.w	r1, r8, r2
 800318e:	61b9      	str	r1, [r7, #24]
 8003190:	eb49 0303 	adc.w	r3, r9, r3
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003198:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800319c:	e9c3 1208 	strd	r1, r2, [r3, #32]
            break;
 80031a0:	e070      	b.n	8003284 <decode_parameter+0x3a8>
        case SIGNED64:
            ((S64_CAN_STRUCT*)param)->data = (value * (S64)param->SCALE) + (S64)param->OFFSET;
 80031a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fe14 	bl	8000dd4 <__aeabi_f2lz>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80031b2:	fb03 f001 	mul.w	r0, r3, r1
 80031b6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80031b8:	fb02 f101 	mul.w	r1, r2, r1
 80031bc:	4401      	add	r1, r0
 80031be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80031c0:	fba0 4502 	umull	r4, r5, r0, r2
 80031c4:	194b      	adds	r3, r1, r5
 80031c6:	461d      	mov	r5, r3
 80031c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fe01 	bl	8000dd4 <__aeabi_f2lz>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	18a1      	adds	r1, r4, r2
 80031d8:	6139      	str	r1, [r7, #16]
 80031da:	eb45 0303 	adc.w	r3, r5, r3
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80031e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
            break;
 80031ea:	e04b      	b.n	8003284 <decode_parameter+0x3a8>
				else if (length == 4) value_fl = (S32)value;
				else if (length == 8) value_fl = (S64)value;
				else value_fl = value;
        	}
#else
            if (length == 1) value_fl = (S8)value;
 80031ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d108      	bne.n	8003206 <decode_parameter+0x32a>
 80031f4:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003200:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8003204:	e02b      	b.n	800325e <decode_parameter+0x382>
            else if (length == 2) value_fl = (S16)value;
 8003206:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800320a:	2b02      	cmp	r3, #2
 800320c:	d108      	bne.n	8003220 <decode_parameter+0x344>
 800320e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800321e:	e01e      	b.n	800325e <decode_parameter+0x382>
            else if (length == 4) value_fl = (S32)value;
 8003220:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003224:	2b04      	cmp	r3, #4
 8003226:	d107      	bne.n	8003238 <decode_parameter+0x35c>
 8003228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003232:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8003236:	e012      	b.n	800325e <decode_parameter+0x382>
            else if (length == 8) value_fl = (S64)value;
 8003238:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800323c:	2b08      	cmp	r3, #8
 800323e:	d108      	bne.n	8003252 <decode_parameter+0x376>
 8003240:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	f7fd fd1e 	bl	8000c88 <__aeabi_l2f>
 800324c:	4603      	mov	r3, r0
 800324e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003250:	e005      	b.n	800325e <decode_parameter+0x382>
            else value_fl = value;
 8003252:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003256:	f7fd fd0f 	bl	8000c78 <__aeabi_ul2f>
 800325a:	4603      	mov	r3, r0
 800325c:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
            ((FLOAT_CAN_STRUCT*)param)->data = (value_fl * param->SCALE) + param->OFFSET;
 800325e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003260:	ed93 7a02 	vldr	s14, [r3, #8]
 8003264:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800326c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800326e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003278:	edc3 7a07 	vstr	s15, [r3, #28]
            break;
 800327c:	e002      	b.n	8003284 <decode_parameter+0x3a8>
        default:
            return DECODING_ERR;
 800327e:	f06f 030e 	mvn.w	r3, #14
 8003282:	e000      	b.n	8003286 <decode_parameter+0x3aa>
    }

    return CAN_SUCCESS;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3760      	adds	r7, #96	@ 0x60
 800328a:	46bd      	mov	sp, r7
 800328c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003290 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
static void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	CAN_MSG* message;
	CAN_MSG_RING_BUFFER* buffer;
    U32 tx_mailbox_num;

	// With multiple busses, choose the correct bus buffer to be working with
	buffer = choose_tx_buffer_from_hcan(hcan);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fbe3 	bl	8003a64 <choose_tx_buffer_from_hcan>
 800329e:	6178      	str	r0, [r7, #20]

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80032a0:	e028      	b.n	80032f4 <service_can_tx_hardware+0x64>
	{
		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	7b5b      	ldrb	r3, [r3, #13]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	7b12      	ldrb	r2, [r2, #12]
 80032ae:	fb93 f0f2 	sdiv	r0, r3, r2
 80032b2:	fb00 f202 	mul.w	r2, r0, r2
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	613b      	str	r3, [r7, #16]

		// configure the settings/params of the CAN message
		message->header.TransmitGlobalTime = DISABLE;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2200      	movs	r2, #0
 80032ca:	751a      	strb	r2, [r3, #20]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &(message->header), message->data, &tx_mailbox_num) != HAL_OK)
 80032cc:	6939      	ldr	r1, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f103 0218 	add.w	r2, r3, #24
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f001 fa11 	bl	8004700 <HAL_CAN_AddTxMessage>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <service_can_tx_hardware+0x5e>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <service_can_tx_hardware+0x80>)
 80032ea:	6013      	str	r3, [r2, #0]
			return;
 80032ec:	e00d      	b.n	800330a <service_can_tx_hardware+0x7a>
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f000 fbe2 	bl	8003ab8 <remove_from_front>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	7b9b      	ldrb	r3, [r3, #14]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <service_can_tx_hardware+0x78>
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f001 fada 	bl	80048b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1cc      	bne.n	80032a2 <service_can_tx_hardware+0x12>
	}

	return;
 8003308:	bf00      	nop
}
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200090cc 	.word	0x200090cc

08003314 <service_can_tx>:
// service_can_tx
// Calls service_can_tx_hardware
// Acquires mutexes and temporarily disables interrupts
//  designed to be called at high priority on 1ms loop
void service_can_tx(CAN_HandleTypeDef* hcan)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    CAN_MSG_RING_BUFFER* buffer;

    // find buffer connected to this bus
    buffer = choose_tx_buffer_from_hcan(hcan);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fba1 	bl	8003a64 <choose_tx_buffer_from_hcan>
 8003322:	60f8      	str	r0, [r7, #12]

    // protect buffer from RTOS thread switching
    if (buffer->mutex != NULL) {
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <service_can_tx+0x2a>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2105      	movs	r1, #5
 8003332:	4618      	mov	r0, r3
 8003334:	f004 ff84 	bl	8008240 <osMutexWait>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d114      	bne.n	8003368 <service_can_tx+0x54>
    }
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    // protect buffer from interrupts
    HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800333e:	2101      	movs	r1, #1
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f001 fc4d 	bl	8004be0 <HAL_CAN_DeactivateNotification>
#endif

    service_can_tx_hardware(hcan);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa2 	bl	8003290 <service_can_tx_hardware>

#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800334c:	2101      	movs	r1, #1
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f001 fc20 	bl	8004b94 <HAL_CAN_ActivateNotification>
#endif
    if (buffer->mutex != NULL) {
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <service_can_tx+0x58>
        osMutexRelease(buffer->mutex);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	4618      	mov	r0, r3
 8003362:	f004 ffbb 	bl	80082dc <osMutexRelease>
    }

    return;
 8003366:	e001      	b.n	800336c <service_can_tx+0x58>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <service_can_tx+0x5a>
    return;
 800336c:	bf00      	nop
}
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <service_can_rx_hardware>:
//  U32 rx_mailbox:         the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//                           Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rxbuff) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 800337e:	e03f      	b.n	8003400 <service_can_rx_hardware+0x8c>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rxbuff, rxbuff.fill_level);
 8003380:	4b27      	ldr	r3, [pc, #156]	@ (8003420 <service_can_rx_hardware+0xac>)
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <service_can_rx_hardware+0xac>)
 8003386:	7b5b      	ldrb	r3, [r3, #13]
 8003388:	461a      	mov	r2, r3
 800338a:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <service_can_rx_hardware+0xac>)
 800338c:	7b9b      	ldrb	r3, [r3, #14]
 800338e:	4413      	add	r3, r2
 8003390:	4a23      	ldr	r2, [pc, #140]	@ (8003420 <service_can_rx_hardware+0xac>)
 8003392:	7b12      	ldrb	r2, [r2, #12]
 8003394:	fb93 f0f2 	sdiv	r0, r3, r2
 8003398:	fb00 f202 	mul.w	r2, r0, r2
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	461a      	mov	r2, r3
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	3318      	adds	r3, #24
 80033b0:	f107 0208 	add.w	r2, r7, #8
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f001 fab2 	bl	8004920 <HAL_CAN_GetRxMessage>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <service_can_rx_hardware+0x58>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	4a17      	ldr	r2, [pc, #92]	@ (8003424 <service_can_rx_hardware+0xb0>)
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e026      	b.n	800341a <service_can_rx_hardware+0xa6>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rxbuff.fill_level++;
 80033cc:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <service_can_rx_hardware+0xac>)
 80033ce:	7b9b      	ldrb	r3, [r3, #14]
 80033d0:	3301      	adds	r3, #1
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <service_can_rx_hardware+0xac>)
 80033d6:	739a      	strb	r2, [r3, #14]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->header.RTR = rx_header.RTR;
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	60da      	str	r2, [r3, #12]
		message->header.DLC = rx_header.DLC;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	611a      	str	r2, [r3, #16]
		message->header.ExtId = rx_header.ExtId;
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	605a      	str	r2, [r3, #4]
		message->header.StdId = rx_header.StdId;
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	601a      	str	r2, [r3, #0]
		message->header.IDE = rx_header.IDE;
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	609a      	str	r2, [r3, #8]
		message->rx_time = HAL_GetTick();
 80033f6:	f000 fcbd 	bl	8003d74 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	621a      	str	r2, [r3, #32]
	while (!IS_FULL(&rxbuff) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <service_can_rx_hardware+0xac>)
 8003402:	7b9a      	ldrb	r2, [r3, #14]
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <service_can_rx_hardware+0xac>)
 8003406:	7b1b      	ldrb	r3, [r3, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d206      	bcs.n	800341a <service_can_rx_hardware+0xa6>
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 fb98 	bl	8004b44 <HAL_CAN_GetRxFifoFillLevel>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1b2      	bne.n	8003380 <service_can_rx_hardware+0xc>
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
#endif // CAN_ROUTER
	}
}
 800341a:	3728      	adds	r7, #40	@ 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000004 	.word	0x20000004
 8003424:	200090cc 	.word	0x200090cc

08003428 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!IS_EMPTY(&rxbuff))
 800342e:	e01f      	b.n	8003470 <service_can_rx_buffer+0x48>
	{
		// get the message at the head of the array
		current_message = GET_FROM_BUFFER(&rxbuff, 0);
 8003430:	4b14      	ldr	r3, [pc, #80]	@ (8003484 <service_can_rx_buffer+0x5c>)
 8003432:	6899      	ldr	r1, [r3, #8]
 8003434:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <service_can_rx_buffer+0x5c>)
 8003436:	7b5b      	ldrb	r3, [r3, #13]
 8003438:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <service_can_rx_buffer+0x5c>)
 800343a:	7b12      	ldrb	r2, [r2, #12]
 800343c:	fb93 f0f2 	sdiv	r0, r3, r2
 8003440:	fb00 f202 	mul.w	r2, r0, r2
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	461a      	mov	r2, r3
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	607b      	str	r3, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		if (current_message->header.IDE == CAN_ID_STD) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <service_can_rx_buffer+0x3c>
		    service_can_rx_message_std(current_message);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f83d 	bl	80034dc <service_can_rx_message_std>
 8003462:	e002      	b.n	800346a <service_can_rx_buffer+0x42>
		} else {
		    service_can_rx_message_ext(current_message);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f8e1 	bl	800362c <service_can_rx_message_ext>
		}

		// move the head now that the first element has been removed
		remove_from_front(&rxbuff);
 800346a:	4806      	ldr	r0, [pc, #24]	@ (8003484 <service_can_rx_buffer+0x5c>)
 800346c:	f000 fb24 	bl	8003ab8 <remove_from_front>
	while (!IS_EMPTY(&rxbuff))
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <service_can_rx_buffer+0x5c>)
 8003472:	7b9b      	ldrb	r3, [r3, #14]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1db      	bne.n	8003430 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000004 	.word	0x20000004

08003488 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	}
#endif

	// if extended ID, get destination
	// send standard ID data messages to all modules
	MODULE_ID module_id = message->header.IDE == CAN_ID_EXT ?
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
	        GET_ID_DEST(message->header.ExtId) :
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <tx_can_message+0x20>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0d9b      	lsrs	r3, r3, #22
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e000      	b.n	80034aa <tx_can_message+0x22>
 80034a8:	2300      	movs	r3, #0
	MODULE_ID module_id = message->header.IDE == CAN_ID_EXT ?
 80034aa:	73fb      	strb	r3, [r7, #15]
	        ALL_MODULES_ID;

	if (module_id == ALL_MODULES_ID) {
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <tx_can_message+0x34>
        add_message_by_highest_prio(&txbuff2, message);
#endif
#if NUM_OF_BUSSES > 1
        add_message_by_highest_prio(&txbuff1, message);
#endif
        add_message_by_highest_prio(&txbuff0, message);
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4808      	ldr	r0, [pc, #32]	@ (80034d8 <tx_can_message+0x50>)
 80034b6:	f000 fb21 	bl	8003afc <add_message_by_highest_prio>
 80034ba:	e008      	b.n	80034ce <tx_can_message+0x46>
    } else {
        CAN_MSG_RING_BUFFER* buffer = choose_tx_buffer_from_dest_module(module_id);
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 faec 	bl	8003a9c <choose_tx_buffer_from_dest_module>
 80034c4:	60b8      	str	r0, [r7, #8]
        add_message_by_highest_prio(buffer, message);
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	68b8      	ldr	r0, [r7, #8]
 80034ca:	f000 fb17 	bl	8003afc <add_message_by_highest_prio>
    }

    return CAN_SUCCESS;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000018 	.word	0x20000018

080034dc <service_can_rx_message_std>:

// service_can_rx_message_std
// handle standard ID CAN messages (data messages)
// finds the specified group and decodes parameters
static S8 service_can_rx_message_std(CAN_MSG* message)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    PARAM_GROUP* group = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]

    // find the specified parameter group
    for (U8 i = 0; i < NUM_OF_GROUPS; i++) {
 80034e8:	2300      	movs	r3, #0
 80034ea:	76fb      	strb	r3, [r7, #27]
 80034ec:	e018      	b.n	8003520 <service_can_rx_message_std+0x44>
        if (GROUPS[i].group_id == message->header.StdId) {
 80034ee:	7efa      	ldrb	r2, [r7, #27]
 80034f0:	4947      	ldr	r1, [pc, #284]	@ (8003610 <service_can_rx_message_std+0x134>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	440b      	add	r3, r1
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d108      	bne.n	800351a <service_can_rx_message_std+0x3e>
            group = &GROUPS[i];
 8003508:	7efa      	ldrb	r2, [r7, #27]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4a3f      	ldr	r2, [pc, #252]	@ (8003610 <service_can_rx_message_std+0x134>)
 8003514:	4413      	add	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
            break;
 8003518:	e005      	b.n	8003526 <service_can_rx_message_std+0x4a>
    for (U8 i = 0; i < NUM_OF_GROUPS; i++) {
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	3301      	adds	r3, #1
 800351e:	76fb      	strb	r3, [r7, #27]
 8003520:	7efb      	ldrb	r3, [r7, #27]
 8003522:	2b8c      	cmp	r3, #140	@ 0x8c
 8003524:	d9e3      	bls.n	80034ee <service_can_rx_message_std+0x12>
        }
    }

    if (group == NULL) return NOT_FOUND_ERR;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <service_can_rx_message_std+0x56>
 800352c:	f06f 0309 	mvn.w	r3, #9
 8003530:	e06a      	b.n	8003608 <service_can_rx_message_std+0x12c>

	if (group->group_id == BEACON_ID) {
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	2be5      	cmp	r3, #229	@ 0xe5
 8003538:	d132      	bne.n	80035a0 <service_can_rx_message_std+0xc4>
		if (HAL_GetTick() - lastHitTick > 100) {
 800353a:	f000 fc1b 	bl	8003d74 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <service_can_rx_message_std+0x138>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d92a      	bls.n	80035a0 <service_can_rx_message_std+0xc4>

			U32 beaconData = message->data[0]  << 16 | message->data[1] << 8 | message->data[2];
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7e1b      	ldrb	r3, [r3, #24]
 800354e:	041a      	lsls	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e5b      	ldrb	r3, [r3, #25]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	4313      	orrs	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	7e92      	ldrb	r2, [r2, #26]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
			if (beaconData <= (BEACON_DATA_CHECK*1.01) && beaconData >= (BEACON_DATA_CHECK*0.99)) {
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <service_can_rx_message_std+0x13c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d813      	bhi.n	8003590 <service_can_rx_message_std+0xb4>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4a2c      	ldr	r2, [pc, #176]	@ (800361c <service_can_rx_message_std+0x140>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d90f      	bls.n	8003590 <service_can_rx_message_std+0xb4>
				lapBeacon_ul.data = 1;
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <service_can_rx_message_std+0x144>)
 8003572:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003576:	61da      	str	r2, [r3, #28]
				beacon_success_counter++;
 8003578:	4b2a      	ldr	r3, [pc, #168]	@ (8003624 <service_can_rx_message_std+0x148>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <service_can_rx_message_std+0x148>)
 8003582:	801a      	strh	r2, [r3, #0]
				lastHitTick = HAL_GetTick();
 8003584:	f000 fbf6 	bl	8003d74 <HAL_GetTick>
 8003588:	4603      	mov	r3, r0
 800358a:	4a22      	ldr	r2, [pc, #136]	@ (8003614 <service_can_rx_message_std+0x138>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e003      	b.n	8003598 <service_can_rx_message_std+0xbc>
			} else {
				lapBeacon_ul.data = 0;
 8003590:	4b23      	ldr	r3, [pc, #140]	@ (8003620 <service_can_rx_message_std+0x144>)
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	61da      	str	r2, [r3, #28]
			}
			lapBeacon_ul.info.last_rx = message->rx_time;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a20      	ldr	r2, [pc, #128]	@ (8003620 <service_can_rx_message_std+0x144>)
 800359e:	6153      	str	r3, [r2, #20]
	}

    // decode parameters
    S8 err;

    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	76bb      	strb	r3, [r7, #26]
 80035a4:	e02c      	b.n	8003600 <service_can_rx_message_std+0x124>
    {
        GCAN_PARAM_ID id = group->param_ids[i];
 80035a6:	7ebb      	ldrb	r3, [r7, #26]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	885b      	ldrh	r3, [r3, #2]
 80035b0:	827b      	strh	r3, [r7, #18]
        if (id == EMPTY_ID) continue;
 80035b2:	8a7b      	ldrh	r3, [r7, #18]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01f      	beq.n	80035f8 <service_can_rx_message_std+0x11c>

        // check to make sure this is a good id. We are down bad if it is not
        if (id < EMPTY_ID || id >= NUM_OF_PARAMETERS) return BAD_PARAMETER_ID;
 80035b8:	8a7b      	ldrh	r3, [r7, #18]
 80035ba:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80035be:	d902      	bls.n	80035c6 <service_can_rx_message_std+0xea>
 80035c0:	f06f 0302 	mvn.w	r3, #2
 80035c4:	e020      	b.n	8003608 <service_can_rx_message_std+0x12c>

        // decode this parameters data from the message
        // update last_rx if there was no error decoding
        CAN_INFO_STRUCT* param = (CAN_INFO_STRUCT*) PARAMETERS[id];
 80035c6:	8a7b      	ldrh	r3, [r7, #18]
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <service_can_rx_message_std+0x14c>)
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	60fb      	str	r3, [r7, #12]

        err = decode_parameter(param, message->data, i, param->ENC_SIZE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f103 0118 	add.w	r1, r3, #24
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	79db      	ldrb	r3, [r3, #7]
 80035da:	7eba      	ldrb	r2, [r7, #26]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fc7d 	bl	8002edc <decode_parameter>
 80035e2:	4603      	mov	r3, r0
 80035e4:	72fb      	strb	r3, [r7, #11]
        if (!err) param->last_rx = message->rx_time;
 80035e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <service_can_rx_message_std+0x11e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	615a      	str	r2, [r3, #20]
 80035f6:	e000      	b.n	80035fa <service_can_rx_message_std+0x11e>
        if (id == EMPTY_ID) continue;
 80035f8:	bf00      	nop
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 80035fa:	7ebb      	ldrb	r3, [r7, #26]
 80035fc:	3301      	adds	r3, #1
 80035fe:	76bb      	strb	r3, [r7, #26]
 8003600:	7ebb      	ldrb	r3, [r7, #26]
 8003602:	2b07      	cmp	r3, #7
 8003604:	d9cf      	bls.n	80035a6 <service_can_rx_message_std+0xca>
    }

    return CAN_SUCCESS;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20005a30 	.word	0x20005a30
 8003614:	200090d4 	.word	0x200090d4
 8003618:	0056854f 	.word	0x0056854f
 800361c:	0054ceb6 	.word	0x0054ceb6
 8003620:	2000500c 	.word	0x2000500c
 8003624:	200090d0 	.word	0x200090d0
 8003628:	2000502c 	.word	0x2000502c

0800362c <service_can_rx_message_ext>:

// service_can_rx_message_ext
// handle extended ID CAN messages (commands/errors)
static S8 service_can_rx_message_ext(CAN_MSG* message)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	get_message_id(&id, message);
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f931 	bl	80038a2 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 8003640:	7a7a      	ldrb	r2, [r7, #9]
 8003642:	4b25      	ldr	r3, [pc, #148]	@ (80036d8 <service_can_rx_message_ext+0xac>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d005      	beq.n	8003656 <service_can_rx_message_ext+0x2a>
 800364a:	7a7b      	ldrb	r3, [r7, #9]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <service_can_rx_message_ext+0x2a>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 8003650:	f06f 030c 	mvn.w	r3, #12
 8003654:	e03c      	b.n	80036d0 <service_can_rx_message_ext+0xa4>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <service_can_rx_message_ext+0x58>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = message->rx_time;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <service_can_rx_message_ext+0xb0>)
 8003662:	6013      	str	r3, [r2, #0]
		last_error.source_module = id.source_module;
 8003664:	7aba      	ldrb	r2, [r7, #10]
 8003666:	4b1d      	ldr	r3, [pc, #116]	@ (80036dc <service_can_rx_message_ext+0xb0>)
 8003668:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 800366a:	89ba      	ldrh	r2, [r7, #12]
 800366c:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <service_can_rx_message_ext+0xb0>)
 800366e:	80da      	strh	r2, [r3, #6]
		if (message->header.DLC > 0)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <service_can_rx_message_ext+0x54>
		{
			last_error.error_id = message->data[0];
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7e1a      	ldrb	r2, [r3, #24]
 800367c:	4b17      	ldr	r3, [pc, #92]	@ (80036dc <service_can_rx_message_ext+0xb0>)
 800367e:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 8003680:	2300      	movs	r3, #0
 8003682:	e025      	b.n	80036d0 <service_can_rx_message_ext+0xa4>
	}

	// error checking on the parameter requested
	if (id.parameter < EMPTY_ID || id.parameter >= NUM_OF_PARAMETERS)
 8003684:	89bb      	ldrh	r3, [r7, #12]
 8003686:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800368a:	d908      	bls.n	800369e <service_can_rx_message_ext+0x72>
	{
		send_error_message(&id, ID_NOT_FOUND);
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f93c 	bl	8003910 <send_error_message>

		return NOT_FOUND_ERR;
 8003698:	f06f 0309 	mvn.w	r3, #9
 800369c:	e018      	b.n	80036d0 <service_can_rx_message_ext+0xa4>
	}

    // run command: run the command specified by the CAN message on this module
	if (id.parameter == EMPTY_ID)
 800369e:	89bb      	ldrh	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <service_can_rx_message_ext+0x88>
	{
		return run_can_command(message, &id);
 80036a4:	f107 0308 	add.w	r3, r7, #8
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f84a 	bl	8003744 <run_can_command>
 80036b0:	4603      	mov	r3, r0
 80036b2:	e00d      	b.n	80036d0 <service_can_rx_message_ext+0xa4>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->header.RTR)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <service_can_rx_message_ext+0xa0>
	{
		return parameter_requested(message, &id);
 80036bc:	f107 0308 	add.w	r3, r7, #8
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f80c 	bl	80036e0 <parameter_requested>
 80036c8:	4603      	mov	r3, r0
 80036ca:	e001      	b.n	80036d0 <service_can_rx_message_ext+0xa4>
	}

	// EXT ID but not a command/request/error - unknown message
	return NOT_IMPLEMENTED;
 80036cc:	f06f 0362 	mvn.w	r3, #98	@ 0x62
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200090bc 	.word	0x200090bc
 80036dc:	200090c0 	.word	0x200090c0

080036e0 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	if (message->header.DLC != REQ_PARAM_SIZE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 80036f2:	2103      	movs	r1, #3
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	f000 f90b 	bl	8003910 <send_error_message>

		return SIZE_ERR;
 80036fa:	f06f 030b 	mvn.w	r3, #11
 80036fe:	e01a      	b.n	8003736 <parameter_requested+0x56>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= EMPTY_ID || id->parameter >= NUM_OF_PARAMETERS)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <parameter_requested+0x32>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	889b      	ldrh	r3, [r3, #4]
 800370c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8003710:	d906      	bls.n	8003720 <parameter_requested+0x40>
	{
		send_error_message(id, ID_NOT_FOUND);
 8003712:	2100      	movs	r1, #0
 8003714:	6838      	ldr	r0, [r7, #0]
 8003716:	f000 f8fb 	bl	8003910 <send_error_message>

		return NOT_FOUND_ERR;
 800371a:	f06f 0309 	mvn.w	r3, #9
 800371e:	e00a      	b.n	8003736 <parameter_requested+0x56>
	}

	// send the parameter data to the module that requested
	CAN_INFO_STRUCT* param = (CAN_INFO_STRUCT*) PARAMETERS[id->parameter];
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	889b      	ldrh	r3, [r3, #4]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <parameter_requested+0x60>)
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	60fb      	str	r3, [r7, #12]
	return send_parameter(param);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff f8e6 	bl	8002900 <send_parameter>
 8003734:	4603      	mov	r3, r0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000502c 	.word	0x2000502c

08003744 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 8003744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003746:	b087      	sub	sp, #28
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND_ID command_id;
	CUST_FUNC* this_function;
	U8 c;

	// DLC error checking
	if (message->header.DLC > COMMAND_SIZE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b05      	cmp	r3, #5
 8003754:	d906      	bls.n	8003764 <run_can_command+0x20>
	{
		// there is either no DLC (no function ID) or too many parameters sent
		send_error_message(id, SIZE_ERROR);
 8003756:	2103      	movs	r1, #3
 8003758:	6838      	ldr	r0, [r7, #0]
 800375a:	f000 f8d9 	bl	8003910 <send_error_message>
		return SIZE_ERR;
 800375e:	f06f 030b 	mvn.w	r3, #11
 8003762:	e042      	b.n	80037ea <run_can_command+0xa6>
	}

	// fill in the extra DLC of the message with zeros
	for (c = message->header.DLC; c < COMMAND_SIZE; c++)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e007      	b.n	800377c <run_can_command+0x38>
	{
		message->data[c] = 0;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	2200      	movs	r2, #0
 8003774:	761a      	strb	r2, [r3, #24]
	for (c = message->header.DLC; c < COMMAND_SIZE; c++)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	3301      	adds	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b04      	cmp	r3, #4
 8003780:	d9f4      	bls.n	800376c <run_can_command+0x28>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	7e1b      	ldrb	r3, [r3, #24]
 8003786:	73bb      	strb	r3, [r7, #14]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8003788:	7bbb      	ldrb	r3, [r7, #14]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d906      	bls.n	800379c <run_can_command+0x58>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 800378e:	2101      	movs	r1, #1
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f000 f8bd 	bl	8003910 <send_error_message>

		return NOT_FOUND_ERR;
 8003796:	f06f 0309 	mvn.w	r3, #9
 800379a:	e026      	b.n	80037ea <run_can_command+0xa6>
	}

	this_function = &(cust_funcs[command_id]);
 800379c:	7bba      	ldrb	r2, [r7, #14]
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <run_can_command+0xb0>)
 80037a8:	4413      	add	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	791b      	ldrb	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <run_can_command+0x7e>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 80037b4:	2105      	movs	r1, #5
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f000 f8aa 	bl	8003910 <send_error_message>

		return NOT_ENABLED_ERR;
 80037bc:	f06f 030a 	mvn.w	r3, #10
 80037c0:	e013      	b.n	80037ea <run_can_command+0xa6>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	681c      	ldr	r4, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	7898      	ldrb	r0, [r3, #2]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7e5d      	ldrb	r5, [r3, #25]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7e9e      	ldrb	r6, [r3, #26]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7edb      	ldrb	r3, [r3, #27]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	7f12      	ldrb	r2, [r2, #28]
 80037de:	9201      	str	r2, [sp, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	4633      	mov	r3, r6
 80037e4:	462a      	mov	r2, r5
 80037e6:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000908c 	.word	0x2000908c

080037f8 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static U32 build_message_id(CAN_ID* id)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	U32 temp;
	U32 msg_id = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

	// priority bit
	temp = !!id->priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	071b      	lsls	r3, r3, #28
 8003818:	60bb      	str	r3, [r7, #8]
	temp &= PRIORITY_MASK;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003820:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

	// destination bits
	temp = id->dest_module;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	059b      	lsls	r3, r3, #22
 8003834:	60bb      	str	r3, [r7, #8]
	temp &= DEST_MASK;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 637c 	and.w	r3, r3, #264241152	@ 0xfc00000
 800383c:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

    // source bits
	temp = id->source_module;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	789b      	ldrb	r3, [r3, #2]
 800384a:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	60bb      	str	r3, [r7, #8]
	temp &= SOURCE_MASK;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003858:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

	// error bit
	temp = id->error;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	78db      	ldrb	r3, [r3, #3]
 8003866:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	03db      	lsls	r3, r3, #15
 800386c:	60bb      	str	r3, [r7, #8]
	temp &= ERROR_MASK;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003874:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

	// parameter bits
	temp = id->parameter;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	889b      	ldrh	r3, [r3, #4]
 8003882:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800388a:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

	return msg_id;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->header.ExtId);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0f1b      	lsrs	r3, r3, #28
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->header.ExtId);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0d9b      	lsrs	r3, r3, #22
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->header.ExtId);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->header.ExtId);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0bdb      	lsrs	r3, r3, #15
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->header.ExtId);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	809a      	strh	r2, [r3, #4]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	@ 0x38
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	733b      	strb	r3, [r7, #12]
	tx_id.dest_module = rx_id->source_module;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	789b      	ldrb	r3, [r3, #2]
 8003926:	737b      	strb	r3, [r7, #13]
	tx_id.source_module = this_module_id;
 8003928:	4b10      	ldr	r3, [pc, #64]	@ (800396c <send_error_message+0x5c>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	73bb      	strb	r3, [r7, #14]
	tx_id.error = TRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
	tx_id.parameter = rx_id->parameter;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	889b      	ldrh	r3, [r3, #4]
 8003936:	823b      	strh	r3, [r7, #16]

	message.header.ExtId = build_message_id(&tx_id);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5b 	bl	80037f8 <build_message_id>
 8003942:	4603      	mov	r3, r0
 8003944:	61bb      	str	r3, [r7, #24]
	message.header.IDE = CAN_ID_EXT;
 8003946:	2304      	movs	r3, #4
 8003948:	61fb      	str	r3, [r7, #28]
	message.header.RTR = DATA_MESSAGE;
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
	message.header.DLC = sizeof(error_id);
 800394e:	2301      	movs	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
	message.data[0] = error_id;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// send the CAN message
	return tx_can_message(&message);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fd93 	bl	8003488 <tx_can_message>
 8003962:	4603      	mov	r3, r0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3738      	adds	r7, #56	@ 0x38
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200090bc 	.word	0x200090bc

08003970 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6039      	str	r1, [r7, #0]
 8003978:	4611      	mov	r1, r2
 800397a:	461a      	mov	r2, r3
 800397c:	4603      	mov	r3, r0
 800397e:	71fb      	strb	r3, [r7, #7]
 8003980:	460b      	mov	r3, r1
 8003982:	71bb      	strb	r3, [r7, #6]
 8003984:	4613      	mov	r3, r2
 8003986:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <GCAN_RxMsgPendingCallback>:


// custom CAN RX callback
__weak void GCAN_RxMsgPendingCallback(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
    service_can_rx_hardware(hcan, rx_mailbox);
 800399e:	6839      	ldr	r1, [r7, #0]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fce7 	bl	8003374 <service_can_rx_hardware>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0/FIFO1 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
    GCAN_RxMsgPendingCallback(hcan, CAN_RX_FIFO0);
 80039b6:	2100      	movs	r1, #0
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ffeb 	bl	8003994 <GCAN_RxMsgPendingCallback>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
    GCAN_RxMsgPendingCallback(hcan, CAN_RX_FIFO1);
 80039ce:	2101      	movs	r1, #1
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffdf 	bl	8003994 <GCAN_RxMsgPendingCallback>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fc52 	bl	8003290 <service_can_tx_hardware>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fc47 	bl	8003290 <service_can_tx_hardware>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fc3c 	bl	8003290 <service_can_tx_hardware>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fc31 	bl	8003290 <service_can_tx_hardware>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fc26 	bl	8003290 <service_can_tx_hardware>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fc1b 	bl	8003290 <service_can_tx_hardware>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <choose_tx_buffer_from_hcan>:
#endif


// get TX buffer associated with a CAN handle
// defaults to TX buffer 0
CAN_MSG_RING_BUFFER* choose_tx_buffer_from_hcan(CAN_HandleTypeDef* hcan) {
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    if (txbuff2.hcan == hcan) return &txbuff2;
#endif
#if NUM_OF_BUSSES > 1
    if (txbuff1.hcan == hcan) return &txbuff1;
#endif
    return &txbuff0;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <choose_tx_buffer_from_hcan+0x18>)
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000018 	.word	0x20000018

08003a80 <choose_hcan_from_tx_buffer>:

// get CAN handle associated with buffer
// defaults to TX buffer 0
CAN_HandleTypeDef* choose_hcan_from_tx_buffer(CAN_MSG_RING_BUFFER* buffer) {
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    if (&txbuff2 == buffer) return txbuff2.hcan;
#endif
#if NUM_OF_BUSSES > 1
    if (&txbuff1 == buffer) return txbuff1.hcan;
#endif
    return txbuff0.hcan;
 8003a88:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <choose_hcan_from_tx_buffer+0x18>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000018 	.word	0x20000018

08003a9c <choose_tx_buffer_from_dest_module>:

// get TX buffer on the CAN bus associated with a module ID
// defaults to TX buffer 0
CAN_MSG_RING_BUFFER* choose_tx_buffer_from_dest_module(MODULE_ID module) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
    if (txbuff2.BUS_ID == module_bus_number[module]) return &txbuff2;
#endif
#if NUM_OF_BUSSES > 1
    if (txbuff1.BUS_ID == module_bus_number[module]) return &txbuff1;
#endif
    return &txbuff0;
 8003aa6:	4b03      	ldr	r3, [pc, #12]	@ (8003ab4 <choose_tx_buffer_from_dest_module+0x18>)
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000018 	.word	0x20000018

08003ab8 <remove_from_front>:

//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
    if (IS_EMPTY(buffer)) return;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7b9b      	ldrb	r3, [r3, #14]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <remove_from_front+0x38>

    // move the head to the next element
    buffer->head = (buffer->head + 1) % buffer->size;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7b5b      	ldrb	r3, [r3, #13]
 8003acc:	3301      	adds	r3, #1
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	7b12      	ldrb	r2, [r2, #12]
 8003ad2:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ad6:	fb01 f202 	mul.w	r2, r1, r2
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	735a      	strb	r2, [r3, #13]

    // decrement the fill level
    buffer->fill_level--;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7b9b      	ldrb	r3, [r3, #14]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	739a      	strb	r2, [r3, #14]
 8003aee:	e000      	b.n	8003af2 <remove_from_front+0x3a>
    if (IS_EMPTY(buffer)) return;
 8003af0:	bf00      	nop
}
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message.
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
    // protect buffer from RTOS thread switching
    if (buffer->mutex != NULL) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <add_message_by_highest_prio+0x26>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2105      	movs	r1, #5
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 fb93 	bl	8008240 <osMutexWait>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f040 80c3 	bne.w	8003ca8 <add_message_by_highest_prio+0x1ac>
    }
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    // protect buffer from interrupts
    HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(buffer), CAN_IT_TX_MAILBOX_EMPTY);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffac 	bl	8003a80 <choose_hcan_from_tx_buffer>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 f857 	bl	8004be0 <HAL_CAN_DeactivateNotification>
#endif

    if (IS_FULL(buffer)) 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7b9a      	ldrb	r2, [r3, #14]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7b1b      	ldrb	r3, [r3, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d30a      	bcc.n	8003b54 <add_message_by_highest_prio+0x58>
    {
        if (buffer->mutex != NULL) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80b2 	beq.w	8003cac <add_message_by_highest_prio+0x1b0>
            osMutexRelease(buffer->mutex);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 fbc5 	bl	80082dc <osMutexRelease>
        }
        return;
 8003b52:	e0ab      	b.n	8003cac <add_message_by_highest_prio+0x1b0>
    }

    CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7b5b      	ldrb	r3, [r3, #13]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	7b12      	ldrb	r2, [r2, #12]
 8003b60:	fb93 f0f2 	sdiv	r0, r3, r2
 8003b64:	fb00 f202 	mul.w	r2, r0, r2
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	60fb      	str	r3, [r7, #12]

    // start from the back of the buffer, moving each message towards the back
    // by one and put the new message in the correct spot by ID. If the buffer
    // was empty when the message first went through here, it will put the new
    // message in position 0
    buffer->fill_level++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7b9b      	ldrb	r3, [r3, #14]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	739a      	strb	r2, [r3, #14]
    for (c = buffer->fill_level - 2; c >= 0; c--)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7b9b      	ldrb	r3, [r3, #14]
 8003b88:	3b02      	subs	r3, #2
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	817b      	strh	r3, [r7, #10]
 8003b8e:	e071      	b.n	8003c74 <add_message_by_highest_prio+0x178>
    {
        buffer_message = GET_FROM_BUFFER(buffer, c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7b5b      	ldrb	r3, [r3, #13]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	7b12      	ldrb	r2, [r2, #12]
 8003ba4:	fb93 f0f2 	sdiv	r0, r3, r2
 8003ba8:	fb00 f202 	mul.w	r2, r0, r2
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	60fb      	str	r3, [r7, #12]

        if (
            (message->header.IDE == CAN_ID_STD &&
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
        if (
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <add_message_by_highest_prio+0xd0>
            buffer_message->header.IDE == CAN_ID_EXT)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
            (message->header.IDE == CAN_ID_STD &&
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d01b      	beq.n	8003c04 <add_message_by_highest_prio+0x108>
            ||
            (message->header.IDE == CAN_ID_EXT &&
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
            ||
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d109      	bne.n	8003be8 <add_message_by_highest_prio+0xec>
            buffer_message->header.IDE == CAN_ID_EXT &&
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
            (message->header.IDE == CAN_ID_EXT &&
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d105      	bne.n	8003be8 <add_message_by_highest_prio+0xec>
            message->header.ExtId >= buffer_message->header.ExtId)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
            buffer_message->header.IDE == CAN_ID_EXT &&
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d20d      	bcs.n	8003c04 <add_message_by_highest_prio+0x108>
            ||
            (message->header.IDE == CAN_ID_STD &&
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
            ||
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d121      	bne.n	8003c34 <add_message_by_highest_prio+0x138>
            buffer_message->header.IDE == CAN_ID_STD &&
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
            (message->header.IDE == CAN_ID_STD &&
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11d      	bne.n	8003c34 <add_message_by_highest_prio+0x138>
            message->header.StdId >= buffer_message->header.StdId)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
            buffer_message->header.IDE == CAN_ID_STD &&
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d317      	bcc.n	8003c34 <add_message_by_highest_prio+0x138>
        ) {
            // new message is lower priority, insert behind this buffer message
            buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6899      	ldr	r1, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7b5b      	ldrb	r3, [r3, #13]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c12:	4413      	add	r3, r2
 8003c14:	3301      	adds	r3, #1
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	7b12      	ldrb	r2, [r2, #12]
 8003c1a:	fb93 f0f2 	sdiv	r0, r3, r2
 8003c1e:	fb00 f202 	mul.w	r2, r0, r2
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	60fb      	str	r3, [r7, #12]
            break;
 8003c32:	e023      	b.n	8003c7c <add_message_by_highest_prio+0x180>
        }

        // move this message back by 1 and try again
        copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6899      	ldr	r1, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7b5b      	ldrb	r3, [r3, #13]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c42:	4413      	add	r3, r2
 8003c44:	3301      	adds	r3, #1
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	7b12      	ldrb	r2, [r2, #12]
 8003c4a:	fb93 f0f2 	sdiv	r0, r3, r2
 8003c4e:	fb00 f202 	mul.w	r2, r0, r2
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	461a      	mov	r2, r3
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	4619      	mov	r1, r3
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f826 	bl	8003cb4 <copy_message>
    for (c = buffer->fill_level - 2; c >= 0; c--)
 8003c68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	817b      	strh	r3, [r7, #10]
 8003c74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	da89      	bge.n	8003b90 <add_message_by_highest_prio+0x94>
    }

    // put the message into the buffer at this position
    copy_message(message, buffer_message);
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f000 f818 	bl	8003cb4 <copy_message>

#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(buffer), CAN_IT_TX_MAILBOX_EMPTY);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fefb 	bl	8003a80 <choose_hcan_from_tx_buffer>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff80 	bl	8004b94 <HAL_CAN_ActivateNotification>
#endif
    if (buffer->mutex != NULL) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <add_message_by_highest_prio+0x1b2>
        osMutexRelease(buffer->mutex);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 fb1b 	bl	80082dc <osMutexRelease>
 8003ca6:	e002      	b.n	8003cae <add_message_by_highest_prio+0x1b2>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 8003ca8:	bf00      	nop
 8003caa:	e000      	b.n	8003cae <add_message_by_highest_prio+0x1b2>
        return;
 8003cac:	bf00      	nop
    }
}
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <copy_message>:

// copy_message
//  function to copy all of the data in source to dest by value, not by reference
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 8003cb4:	b4b0      	push	{r4, r5, r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
    U8 c;

    dest->header = source->header;
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4614      	mov	r4, r2
 8003cc4:	461d      	mov	r5, r3
 8003cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cce:	e884 0003 	stmia.w	r4, {r0, r1}

    for (c = 0; c < dest->header.DLC; c++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e00b      	b.n	8003cf0 <copy_message+0x3c>
    {
        dest->data[c] = source->data[c];
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	440a      	add	r2, r1
 8003ce0:	7e11      	ldrb	r1, [r2, #24]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	761a      	strb	r2, [r3, #24]
    for (c = 0; c < dest->header.DLC; c++)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	3301      	adds	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3ee      	bcc.n	8003cd8 <copy_message+0x24>
    }
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bcb0      	pop	{r4, r5, r7}
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <HAL_Init+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <HAL_Init+0x40>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d18:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d48 <HAL_Init+0x40>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d24:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a07      	ldr	r2, [pc, #28]	@ (8003d48 <HAL_Init+0x40>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f001 fa12 	bl	800515a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d36:	200f      	movs	r0, #15
 8003d38:	f7fe fb7a 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3c:	f7fe f958 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00

08003d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d50:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <HAL_IncTick+0x20>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_IncTick+0x24>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a04      	ldr	r2, [pc, #16]	@ (8003d70 <HAL_IncTick+0x24>)
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20006420 	.word	0x20006420
 8003d70:	200099f4 	.word	0x200099f4

08003d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return uwTick;
 8003d78:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <HAL_GetTick+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	200099f4 	.word	0x200099f4

08003d8c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <HAL_SetTickFreq+0x48>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	79fa      	ldrb	r2, [r7, #7]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d012      	beq.n	8003dca <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_SetTickFreq+0x48>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_SetTickFreq+0x48>)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8003db0:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <HAL_SetTickFreq+0x4c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fb3b 	bl	8002430 <HAL_InitTick>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8003dc4:	4a03      	ldr	r2, [pc, #12]	@ (8003dd4 <HAL_SetTickFreq+0x48>)
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20006420 	.word	0x20006420
 8003dd8:	2000641c 	.word	0x2000641c

08003ddc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e033      	b.n	8003e5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe f924 	bl	8002048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e22:	f023 0302 	bic.w	r3, r3, #2
 8003e26:	f043 0202 	orr.w	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f94a 	bl	80040c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e4a:	e001      	b.n	8003e50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e113      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x244>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	d925      	bls.n	8003edc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68d9      	ldr	r1, [r3, #12]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3b1e      	subs	r3, #30
 8003ea6:	2207      	movs	r2, #7
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43da      	mvns	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68d9      	ldr	r1, [r3, #12]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	4603      	mov	r3, r0
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4403      	add	r3, r0
 8003ece:	3b1e      	subs	r3, #30
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e022      	b.n	8003f22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6919      	ldr	r1, [r3, #16]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	400a      	ands	r2, r1
 8003efe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6919      	ldr	r1, [r3, #16]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4618      	mov	r0, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4403      	add	r3, r0
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d824      	bhi.n	8003f74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	3b05      	subs	r3, #5
 8003f3c:	221f      	movs	r2, #31
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	400a      	ands	r2, r1
 8003f4a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	3b05      	subs	r3, #5
 8003f66:	fa00 f203 	lsl.w	r2, r0, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f72:	e04c      	b.n	800400e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d824      	bhi.n	8003fc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3b23      	subs	r3, #35	@ 0x23
 8003f8e:	221f      	movs	r2, #31
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43da      	mvns	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3b23      	subs	r3, #35	@ 0x23
 8003fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fc4:	e023      	b.n	800400e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3b41      	subs	r3, #65	@ 0x41
 8003fd8:	221f      	movs	r2, #31
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	400a      	ands	r2, r1
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	3b41      	subs	r3, #65	@ 0x41
 8004002:	fa00 f203 	lsl.w	r2, r0, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800400e:	4b29      	ldr	r3, [pc, #164]	@ (80040b4 <HAL_ADC_ConfigChannel+0x250>)
 8004010:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a28      	ldr	r2, [pc, #160]	@ (80040b8 <HAL_ADC_ConfigChannel+0x254>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10f      	bne.n	800403c <HAL_ADC_ConfigChannel+0x1d8>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b12      	cmp	r3, #18
 8004022:	d10b      	bne.n	800403c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1d      	ldr	r2, [pc, #116]	@ (80040b8 <HAL_ADC_ConfigChannel+0x254>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12b      	bne.n	800409e <HAL_ADC_ConfigChannel+0x23a>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <HAL_ADC_ConfigChannel+0x258>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <HAL_ADC_ConfigChannel+0x1f4>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b11      	cmp	r3, #17
 8004056:	d122      	bne.n	800409e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a11      	ldr	r2, [pc, #68]	@ (80040bc <HAL_ADC_ConfigChannel+0x258>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d111      	bne.n	800409e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <HAL_ADC_ConfigChannel+0x25c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <HAL_ADC_ConfigChannel+0x260>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	0c9a      	lsrs	r2, r3, #18
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004090:	e002      	b.n	8004098 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	3b01      	subs	r3, #1
 8004096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f9      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40012300 	.word	0x40012300
 80040b8:	40012000 	.word	0x40012000
 80040bc:	10000012 	.word	0x10000012
 80040c0:	20000000 	.word	0x20000000
 80040c4:	431bde83 	.word	0x431bde83

080040c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040d0:	4b79      	ldr	r3, [pc, #484]	@ (80042b8 <ADC_Init+0x1f0>)
 80040d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	021a      	lsls	r2, r3, #8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6899      	ldr	r1, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	4a58      	ldr	r2, [pc, #352]	@ (80042bc <ADC_Init+0x1f4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800416e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	e00f      	b.n	80041c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0202 	bic.w	r2, r2, #2
 80041d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6899      	ldr	r1, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	7e1b      	ldrb	r3, [r3, #24]
 80041e0:	005a      	lsls	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01b      	beq.n	800422c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	3b01      	subs	r3, #1
 8004220:	035a      	lsls	r2, r3, #13
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	e007      	b.n	800423c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800423a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800424a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	3b01      	subs	r3, #1
 8004258:	051a      	lsls	r2, r3, #20
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6899      	ldr	r1, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800427e:	025a      	lsls	r2, r3, #9
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6899      	ldr	r1, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	029a      	lsls	r2, r3, #10
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40012300 	.word	0x40012300
 80042bc:	0f000001 	.word	0x0f000001

080042c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0ed      	b.n	80044ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd fef6 	bl	80020d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042f4:	f7ff fd3e 	bl	8003d74 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042fa:	e012      	b.n	8004322 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042fc:	f7ff fd3a 	bl	8003d74 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b0a      	cmp	r3, #10
 8004308:	d90b      	bls.n	8004322 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2205      	movs	r2, #5
 800431a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0c5      	b.n	80044ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0e5      	beq.n	80042fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0202 	bic.w	r2, r2, #2
 800433e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004340:	f7ff fd18 	bl	8003d74 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004346:	e012      	b.n	800436e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004348:	f7ff fd14 	bl	8003d74 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b0a      	cmp	r3, #10
 8004354:	d90b      	bls.n	800436e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2205      	movs	r2, #5
 8004366:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e09f      	b.n	80044ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	7e1b      	ldrb	r3, [r3, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e007      	b.n	80043a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	7e5b      	ldrb	r3, [r3, #25]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d108      	bne.n	80043c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e007      	b.n	80043d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7e9b      	ldrb	r3, [r3, #26]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d108      	bne.n	80043ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0220 	orr.w	r2, r2, #32
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e007      	b.n	80043fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0220 	bic.w	r2, r2, #32
 80043f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7edb      	ldrb	r3, [r3, #27]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0210 	bic.w	r2, r2, #16
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e007      	b.n	8004424 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0210 	orr.w	r2, r2, #16
 8004422:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7f1b      	ldrb	r3, [r3, #28]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d108      	bne.n	800443e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e007      	b.n	800444e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0208 	bic.w	r2, r2, #8
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7f5b      	ldrb	r3, [r3, #29]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d108      	bne.n	8004468 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0204 	orr.w	r2, r2, #4
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e007      	b.n	8004478 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d003      	beq.n	80044de <HAL_CAN_ConfigFilter+0x26>
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f040 80be 	bne.w	800465a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80044de:	4b65      	ldr	r3, [pc, #404]	@ (8004674 <HAL_CAN_ConfigFilter+0x1bc>)
 80044e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044e8:	f043 0201 	orr.w	r2, r3, #1
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	431a      	orrs	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2201      	movs	r2, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	43db      	mvns	r3, r3
 8004530:	401a      	ands	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d123      	bne.n	8004588 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	43db      	mvns	r3, r3
 800454a:	401a      	ands	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004562:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3248      	adds	r2, #72	@ 0x48
 8004568:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800457c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	3348      	adds	r3, #72	@ 0x48
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	440b      	add	r3, r1
 8004586:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d122      	bne.n	80045d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	431a      	orrs	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3248      	adds	r2, #72	@ 0x48
 80045b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	3348      	adds	r3, #72	@ 0x48
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	440b      	add	r3, r1
 80045d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	401a      	ands	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80045f0:	e007      	b.n	8004602 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	43db      	mvns	r3, r3
 8004614:	401a      	ands	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800461c:	e007      	b.n	800462e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	431a      	orrs	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d107      	bne.n	8004646 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	431a      	orrs	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800464c:	f023 0201 	bic.w	r2, r3, #1
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e006      	b.n	8004668 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40006400 	.word	0x40006400

08004678 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d12e      	bne.n	80046ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046a4:	f7ff fb66 	bl	8003d74 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046aa:	e012      	b.n	80046d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046ac:	f7ff fb62 	bl	8003d74 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b0a      	cmp	r3, #10
 80046b8:	d90b      	bls.n	80046d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2205      	movs	r2, #5
 80046ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e012      	b.n	80046f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e006      	b.n	80046f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004714:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d003      	beq.n	800472c <HAL_CAN_AddTxMessage+0x2c>
 8004724:	7ffb      	ldrb	r3, [r7, #31]
 8004726:	2b02      	cmp	r3, #2
 8004728:	f040 80b8 	bne.w	800489c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80a0 	beq.w	800488c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d907      	bls.n	800476c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e09e      	b.n	80048aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800476c:	2201      	movs	r2, #1
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	409a      	lsls	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004788:	68f9      	ldr	r1, [r7, #12]
 800478a:	6809      	ldr	r1, [r1, #0]
 800478c:	431a      	orrs	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3318      	adds	r3, #24
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	440b      	add	r3, r1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e00f      	b.n	80047ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80047ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3318      	adds	r3, #24
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	440b      	add	r3, r1
 80047b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6819      	ldr	r1, [r3, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	3318      	adds	r3, #24
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	440b      	add	r3, r1
 80047ca:	3304      	adds	r3, #4
 80047cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	7d1b      	ldrb	r3, [r3, #20]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d111      	bne.n	80047fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3318      	adds	r3, #24
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	4413      	add	r3, r2
 80047e2:	3304      	adds	r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6811      	ldr	r1, [r2, #0]
 80047ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	3318      	adds	r3, #24
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	440b      	add	r3, r1
 80047f6:	3304      	adds	r3, #4
 80047f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3307      	adds	r3, #7
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	061a      	lsls	r2, r3, #24
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3306      	adds	r3, #6
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3305      	adds	r3, #5
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	4313      	orrs	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	3204      	adds	r2, #4
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	4610      	mov	r0, r2
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	6811      	ldr	r1, [r2, #0]
 8004822:	ea43 0200 	orr.w	r2, r3, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	440b      	add	r3, r1
 800482c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004830:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3303      	adds	r3, #3
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	061a      	lsls	r2, r3, #24
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3302      	adds	r3, #2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	4313      	orrs	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	4610      	mov	r0, r2
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	6811      	ldr	r1, [r2, #0]
 8004858:	ea43 0200 	orr.w	r2, r3, r0
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	440b      	add	r3, r1
 8004862:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004866:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3318      	adds	r3, #24
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	4413      	add	r3, r2
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	6811      	ldr	r1, [r2, #0]
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	3318      	adds	r3, #24
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	440b      	add	r3, r1
 8004886:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e00e      	b.n	80048aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e006      	b.n	80048aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80048ca:	7afb      	ldrb	r3, [r7, #11]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80048d0:	7afb      	ldrb	r3, [r7, #11]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d11d      	bne.n	8004912 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004934:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d003      	beq.n	8004944 <HAL_CAN_GetRxMessage+0x24>
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b02      	cmp	r3, #2
 8004940:	f040 80f3 	bne.w	8004b2a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10e      	bne.n	8004968 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d116      	bne.n	8004986 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0e7      	b.n	8004b38 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0d8      	b.n	8004b38 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	331b      	adds	r3, #27
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	4413      	add	r3, r2
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0204 	and.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10c      	bne.n	80049be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	331b      	adds	r3, #27
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	0d5b      	lsrs	r3, r3, #21
 80049b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e00b      	b.n	80049d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	331b      	adds	r3, #27
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	331b      	adds	r3, #27
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	4413      	add	r3, r2
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0202 	and.w	r2, r3, #2
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	331b      	adds	r3, #27
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	331b      	adds	r3, #27
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	331b      	adds	r3, #27
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	0a1a      	lsrs	r2, r3, #8
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0c1a      	lsrs	r2, r3, #16
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	0e1a      	lsrs	r2, r3, #24
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	3303      	adds	r3, #3
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	0a1a      	lsrs	r2, r3, #8
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	3305      	adds	r3, #5
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0c1a      	lsrs	r2, r3, #16
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	3306      	adds	r3, #6
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	0e1a      	lsrs	r2, r3, #24
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	3307      	adds	r3, #7
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d108      	bne.n	8004b16 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0220 	orr.w	r2, r2, #32
 8004b12:	60da      	str	r2, [r3, #12]
 8004b14:	e007      	b.n	8004b26 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0220 	orr.w	r2, r2, #32
 8004b24:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e006      	b.n	8004b38 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b58:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d002      	beq.n	8004b66 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004b60:	7afb      	ldrb	r3, [r7, #11]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d10f      	bne.n	8004b86 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e005      	b.n	8004b86 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d002      	beq.n	8004bb2 <HAL_CAN_ActivateNotification+0x1e>
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d109      	bne.n	8004bc6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6959      	ldr	r1, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e006      	b.n	8004bd4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d002      	beq.n	8004bfe <HAL_CAN_DeactivateNotification+0x1e>
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d10a      	bne.n	8004c14 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6959      	ldr	r1, [r3, #20]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e006      	b.n	8004c22 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08a      	sub	sp, #40	@ 0x28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d07c      	beq.n	8004d6e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d023      	beq.n	8004cc6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fe fea4 	bl	80039de <HAL_CAN_TxMailbox0CompleteCallback>
 8004c96:	e016      	b.n	8004cc6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004caa:	e00c      	b.n	8004cc6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbe:	e002      	b.n	8004cc6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fe fead 	bl	8003a20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d024      	beq.n	8004d1a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fe fe85 	bl	80039f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8004cea:	e016      	b.n	8004d1a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	e00c      	b.n	8004d1a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d004      	beq.n	8004d14 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d12:	e002      	b.n	8004d1a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fe fe8e 	bl	8003a36 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d024      	beq.n	8004d6e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004d2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fe fe66 	bl	8003a0a <HAL_CAN_TxMailbox2CompleteCallback>
 8004d3e:	e016      	b.n	8004d6e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d52:	e00c      	b.n	8004d6e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d66:	e002      	b.n	8004d6e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fe fe6f 	bl	8003a4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2208      	movs	r2, #8
 8004dac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8f4 	bl	8004f9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7fe fdee 	bl	80039ae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2210      	movs	r2, #16
 8004df4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2208      	movs	r2, #8
 8004e10:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8cc 	bl	8004fb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fe fdc8 	bl	80039c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f8b6 	bl	8004fc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2208      	movs	r2, #8
 8004e72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8af 	bl	8004fd8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d07b      	beq.n	8004f7c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d072      	beq.n	8004f74 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d043      	beq.n	8004f74 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03e      	beq.n	8004f74 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004efc:	2b60      	cmp	r3, #96	@ 0x60
 8004efe:	d02b      	beq.n	8004f58 <HAL_CAN_IRQHandler+0x32a>
 8004f00:	2b60      	cmp	r3, #96	@ 0x60
 8004f02:	d82e      	bhi.n	8004f62 <HAL_CAN_IRQHandler+0x334>
 8004f04:	2b50      	cmp	r3, #80	@ 0x50
 8004f06:	d022      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x320>
 8004f08:	2b50      	cmp	r3, #80	@ 0x50
 8004f0a:	d82a      	bhi.n	8004f62 <HAL_CAN_IRQHandler+0x334>
 8004f0c:	2b40      	cmp	r3, #64	@ 0x40
 8004f0e:	d019      	beq.n	8004f44 <HAL_CAN_IRQHandler+0x316>
 8004f10:	2b40      	cmp	r3, #64	@ 0x40
 8004f12:	d826      	bhi.n	8004f62 <HAL_CAN_IRQHandler+0x334>
 8004f14:	2b30      	cmp	r3, #48	@ 0x30
 8004f16:	d010      	beq.n	8004f3a <HAL_CAN_IRQHandler+0x30c>
 8004f18:	2b30      	cmp	r3, #48	@ 0x30
 8004f1a:	d822      	bhi.n	8004f62 <HAL_CAN_IRQHandler+0x334>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d002      	beq.n	8004f26 <HAL_CAN_IRQHandler+0x2f8>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d005      	beq.n	8004f30 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004f24:	e01d      	b.n	8004f62 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	f043 0308 	orr.w	r3, r3, #8
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f2e:	e019      	b.n	8004f64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	f043 0310 	orr.w	r3, r3, #16
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f38:	e014      	b.n	8004f64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f043 0320 	orr.w	r3, r3, #32
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f42:	e00f      	b.n	8004f64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f4c:	e00a      	b.n	8004f64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f56:	e005      	b.n	8004f64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f60:	e000      	b.n	8004f64 <HAL_CAN_IRQHandler+0x336>
            break;
 8004f62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004f72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f82c 	bl	8004fec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f94:	bf00      	nop
 8004f96:	3728      	adds	r7, #40	@ 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800501c:	4013      	ands	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800502c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005032:	4a04      	ldr	r2, [pc, #16]	@ (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	60d3      	str	r3, [r2, #12]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800504c:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <__NVIC_GetPriorityGrouping+0x18>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 0307 	and.w	r3, r3, #7
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	db0b      	blt.n	800508e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4907      	ldr	r1, [pc, #28]	@ (800509c <__NVIC_EnableIRQ+0x38>)
 800507e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2001      	movs	r0, #1
 8005086:	fa00 f202 	lsl.w	r2, r0, r2
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e100 	.word	0xe000e100

080050a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db0a      	blt.n	80050ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	490c      	ldr	r1, [pc, #48]	@ (80050ec <__NVIC_SetPriority+0x4c>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	0112      	lsls	r2, r2, #4
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	440b      	add	r3, r1
 80050c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c8:	e00a      	b.n	80050e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	4908      	ldr	r1, [pc, #32]	@ (80050f0 <__NVIC_SetPriority+0x50>)
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	3b04      	subs	r3, #4
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	440b      	add	r3, r1
 80050de:	761a      	strb	r2, [r3, #24]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000e100 	.word	0xe000e100
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	@ 0x24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf28      	it	cs
 8005112:	2304      	movcs	r3, #4
 8005114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3304      	adds	r3, #4
 800511a:	2b06      	cmp	r3, #6
 800511c:	d902      	bls.n	8005124 <NVIC_EncodePriority+0x30>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3b03      	subs	r3, #3
 8005122:	e000      	b.n	8005126 <NVIC_EncodePriority+0x32>
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	401a      	ands	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800513c:	f04f 31ff 	mov.w	r1, #4294967295
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	43d9      	mvns	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	4313      	orrs	r3, r2
         );
}
 800514e:	4618      	mov	r0, r3
 8005150:	3724      	adds	r7, #36	@ 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff ff4c 	bl	8005000 <__NVIC_SetPriorityGrouping>
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005182:	f7ff ff61 	bl	8005048 <__NVIC_GetPriorityGrouping>
 8005186:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f7ff ffb1 	bl	80050f4 <NVIC_EncodePriority>
 8005192:	4602      	mov	r2, r0
 8005194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff80 	bl	80050a0 <__NVIC_SetPriority>
}
 80051a0:	bf00      	nop
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ff54 	bl	8005064 <__NVIC_EnableIRQ>
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7fe fdd0 	bl	8003d74 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e099      	b.n	8005314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005200:	e00f      	b.n	8005222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005202:	f7fe fdb7 	bl	8003d74 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b05      	cmp	r3, #5
 800520e:	d908      	bls.n	8005222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2203      	movs	r2, #3
 800521a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e078      	b.n	8005314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e8      	bne.n	8005202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4b38      	ldr	r3, [pc, #224]	@ (800531c <HAL_DMA_Init+0x158>)
 800523c:	4013      	ands	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800524e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	2b04      	cmp	r3, #4
 800527a:	d107      	bne.n	800528c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	4313      	orrs	r3, r2
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d117      	bne.n	80052e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa6f 	bl	80057ac <DMA_CheckFifoParam>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2240      	movs	r2, #64	@ 0x40
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80052e2:	2301      	movs	r3, #1
 80052e4:	e016      	b.n	8005314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa26 	bl	8005740 <DMA_CalcBaseAndBitshift>
 80052f4:	4603      	mov	r3, r0
 80052f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fc:	223f      	movs	r2, #63	@ 0x3f
 80052fe:	409a      	lsls	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	f010803f 	.word	0xf010803f

08005320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_DMA_Start_IT+0x26>
 8005342:	2302      	movs	r3, #2
 8005344:	e040      	b.n	80053c8 <HAL_DMA_Start_IT+0xa8>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d12f      	bne.n	80053ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f9b8 	bl	80056e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	223f      	movs	r2, #63	@ 0x3f
 800537a:	409a      	lsls	r2, r3
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0216 	orr.w	r2, r2, #22
 800538e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e005      	b.n	80053c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005618 <HAL_DMA_IRQHandler+0x248>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a8e      	ldr	r2, [pc, #568]	@ (800561c <HAL_DMA_IRQHandler+0x24c>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	2208      	movs	r2, #8
 80053fc:	409a      	lsls	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01a      	beq.n	800543c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d013      	beq.n	800543c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0204 	bic.w	r2, r2, #4
 8005422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005428:	2208      	movs	r2, #8
 800542a:	409a      	lsls	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	2201      	movs	r2, #1
 8005460:	409a      	lsls	r2, r3
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005476:	2204      	movs	r2, #4
 8005478:	409a      	lsls	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d012      	beq.n	80054a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00b      	beq.n	80054a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005494:	2204      	movs	r2, #4
 8005496:	409a      	lsls	r2, r3
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a0:	f043 0204 	orr.w	r2, r3, #4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ac:	2210      	movs	r2, #16
 80054ae:	409a      	lsls	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d043      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03c      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	2210      	movs	r2, #16
 80054cc:	409a      	lsls	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d018      	beq.n	8005512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d024      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
 80054fe:	e01f      	b.n	8005540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
 8005510:	e016      	b.n	8005540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d107      	bne.n	8005530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0208 	bic.w	r2, r2, #8
 800552e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005544:	2220      	movs	r2, #32
 8005546:	409a      	lsls	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 808f 	beq.w	8005670 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8087 	beq.w	8005670 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	2220      	movs	r2, #32
 8005568:	409a      	lsls	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b05      	cmp	r3, #5
 8005578:	d136      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0216 	bic.w	r2, r2, #22
 8005588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_DMA_IRQHandler+0x1da>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0208 	bic.w	r2, r2, #8
 80055b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	223f      	movs	r2, #63	@ 0x3f
 80055c0:	409a      	lsls	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d07e      	beq.n	80056dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
        }
        return;
 80055e6:	e079      	b.n	80056dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01d      	beq.n	8005632 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	2b00      	cmp	r3, #0
 800560a:	d031      	beq.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	e02c      	b.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
 8005616:	bf00      	nop
 8005618:	20000000 	.word	0x20000000
 800561c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d023      	beq.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
 8005630:	e01e      	b.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0210 	bic.w	r2, r2, #16
 800564e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005674:	2b00      	cmp	r3, #0
 8005676:	d032      	beq.n	80056de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d022      	beq.n	80056ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2205      	movs	r2, #5
 8005688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3301      	adds	r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d307      	bcc.n	80056b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f2      	bne.n	800569c <HAL_DMA_IRQHandler+0x2cc>
 80056b6:	e000      	b.n	80056ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
 80056da:	e000      	b.n	80056de <HAL_DMA_IRQHandler+0x30e>
        return;
 80056dc:	bf00      	nop
    }
  }
}
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	d108      	bne.n	8005724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005722:	e007      	b.n	8005734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	3b10      	subs	r3, #16
 8005750:	4a14      	ldr	r2, [pc, #80]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x64>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800575a:	4a13      	ldr	r2, [pc, #76]	@ (80057a8 <DMA_CalcBaseAndBitshift+0x68>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d909      	bls.n	8005782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005780:	e007      	b.n	8005792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	aaaaaaab 	.word	0xaaaaaaab
 80057a8:	0800ae18 	.word	0x0800ae18

080057ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d11f      	bne.n	8005806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d856      	bhi.n	800587a <DMA_CheckFifoParam+0xce>
 80057cc:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <DMA_CheckFifoParam+0x28>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	080057f7 	.word	0x080057f7
 80057dc:	080057e5 	.word	0x080057e5
 80057e0:	0800587b 	.word	0x0800587b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d046      	beq.n	800587e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f4:	e043      	b.n	800587e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057fe:	d140      	bne.n	8005882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005804:	e03d      	b.n	8005882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800580e:	d121      	bne.n	8005854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d837      	bhi.n	8005886 <DMA_CheckFifoParam+0xda>
 8005816:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <DMA_CheckFifoParam+0x70>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	0800582d 	.word	0x0800582d
 8005820:	08005833 	.word	0x08005833
 8005824:	0800582d 	.word	0x0800582d
 8005828:	08005845 	.word	0x08005845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e030      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d025      	beq.n	800588a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005842:	e022      	b.n	800588a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005848:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800584c:	d11f      	bne.n	800588e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005852:	e01c      	b.n	800588e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d903      	bls.n	8005862 <DMA_CheckFifoParam+0xb6>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d003      	beq.n	8005868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005860:	e018      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
      break;
 8005866:	e015      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
      break;
 8005878:	e00b      	b.n	8005892 <DMA_CheckFifoParam+0xe6>
      break;
 800587a:	bf00      	nop
 800587c:	e00a      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 800587e:	bf00      	nop
 8005880:	e008      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e006      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 8005886:	bf00      	nop
 8005888:	e004      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;   
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 8005892:	bf00      	nop
    }
  } 
  
  return status; 
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	@ 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	e165      	b.n	8005b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058c0:	2201      	movs	r2, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	429a      	cmp	r2, r3
 80058da:	f040 8154 	bne.w	8005b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d005      	beq.n	80058f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d130      	bne.n	8005958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	2203      	movs	r2, #3
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800592c:	2201      	movs	r2, #1
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	43db      	mvns	r3, r3
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4013      	ands	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 0201 	and.w	r2, r3, #1
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b03      	cmp	r3, #3
 8005962:	d017      	beq.n	8005994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2203      	movs	r2, #3
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d123      	bne.n	80059e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	08da      	lsrs	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3208      	adds	r2, #8
 80059a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	220f      	movs	r2, #15
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	08da      	lsrs	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3208      	adds	r2, #8
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	2203      	movs	r2, #3
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80ae 	beq.w	8005b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba4 <HAL_GPIO_Init+0x300>)
 8005a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a32:	4a5c      	ldr	r2, [pc, #368]	@ (8005ba4 <HAL_GPIO_Init+0x300>)
 8005a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba4 <HAL_GPIO_Init+0x300>)
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a46:	4a58      	ldr	r2, [pc, #352]	@ (8005ba8 <HAL_GPIO_Init+0x304>)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	220f      	movs	r2, #15
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8005bac <HAL_GPIO_Init+0x308>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d025      	beq.n	8005abe <HAL_GPIO_Init+0x21a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a4e      	ldr	r2, [pc, #312]	@ (8005bb0 <HAL_GPIO_Init+0x30c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01f      	beq.n	8005aba <HAL_GPIO_Init+0x216>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005bb4 <HAL_GPIO_Init+0x310>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d019      	beq.n	8005ab6 <HAL_GPIO_Init+0x212>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a4c      	ldr	r2, [pc, #304]	@ (8005bb8 <HAL_GPIO_Init+0x314>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_GPIO_Init+0x20e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8005bbc <HAL_GPIO_Init+0x318>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00d      	beq.n	8005aae <HAL_GPIO_Init+0x20a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc0 <HAL_GPIO_Init+0x31c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <HAL_GPIO_Init+0x206>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a49      	ldr	r2, [pc, #292]	@ (8005bc4 <HAL_GPIO_Init+0x320>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_GPIO_Init+0x202>
 8005aa2:	2306      	movs	r3, #6
 8005aa4:	e00c      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	e00a      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aaa:	2305      	movs	r3, #5
 8005aac:	e008      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aae:	2304      	movs	r3, #4
 8005ab0:	e006      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e004      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e002      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	f002 0203 	and.w	r2, r2, #3
 8005ac6:	0092      	lsls	r2, r2, #2
 8005ac8:	4093      	lsls	r3, r2
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ad0:	4935      	ldr	r1, [pc, #212]	@ (8005ba8 <HAL_GPIO_Init+0x304>)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ade:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b02:	4a31      	ldr	r2, [pc, #196]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b08:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b2c:	4a26      	ldr	r2, [pc, #152]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b32:	4b25      	ldr	r3, [pc, #148]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b56:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b80:	4a11      	ldr	r2, [pc, #68]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	f67f ae96 	bls.w	80058c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3724      	adds	r7, #36	@ 0x24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	40013800 	.word	0x40013800
 8005bac:	40020000 	.word	0x40020000
 8005bb0:	40020400 	.word	0x40020400
 8005bb4:	40020800 	.word	0x40020800
 8005bb8:	40020c00 	.word	0x40020c00
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40021400 	.word	0x40021400
 8005bc4:	40021800 	.word	0x40021800
 8005bc8:	40013c00 	.word	0x40013c00

08005bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bdc:	787b      	ldrb	r3, [r7, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005be8:	e003      	b.n	8005bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	619a      	str	r2, [r3, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0cc      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c14:	4b68      	ldr	r3, [pc, #416]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d90c      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c22:	4b65      	ldr	r3, [pc, #404]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b63      	ldr	r3, [pc, #396]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0b8      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c54:	4b59      	ldr	r3, [pc, #356]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4a58      	ldr	r2, [pc, #352]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c6c:	4b53      	ldr	r3, [pc, #332]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a52      	ldr	r2, [pc, #328]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b50      	ldr	r3, [pc, #320]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	494d      	ldr	r1, [pc, #308]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d044      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4b47      	ldr	r3, [pc, #284]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d119      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d107      	bne.n	8005cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e06f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cce:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e067      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cde:	4b37      	ldr	r3, [pc, #220]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f023 0203 	bic.w	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4934      	ldr	r1, [pc, #208]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf0:	f7fe f840 	bl	8003d74 <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf8:	f7fe f83c 	bl	8003d74 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e04f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 020c 	and.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d1eb      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d20:	4b25      	ldr	r3, [pc, #148]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d20c      	bcs.n	8005d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b22      	ldr	r3, [pc, #136]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d36:	4b20      	ldr	r3, [pc, #128]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e032      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d54:	4b19      	ldr	r3, [pc, #100]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4916      	ldr	r1, [pc, #88]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d72:	4b12      	ldr	r3, [pc, #72]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	490e      	ldr	r1, [pc, #56]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d86:	f000 f887 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	490a      	ldr	r1, [pc, #40]	@ (8005dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	5ccb      	ldrb	r3, [r1, r3]
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	4a09      	ldr	r2, [pc, #36]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005da2:	4b09      	ldr	r3, [pc, #36]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc fb42 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40023c00 	.word	0x40023c00
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	0800ae00 	.word	0x0800ae00
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	2000641c 	.word	0x2000641c

08005dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000000 	.word	0x20000000

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005de8:	f7ff fff0 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0a9b      	lsrs	r3, r3, #10
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4903      	ldr	r1, [pc, #12]	@ (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800ae10 	.word	0x0800ae10

08005e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e10:	f7ff ffdc 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005e14:	4602      	mov	r2, r0
 8005e16:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	0b5b      	lsrs	r3, r3, #13
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4903      	ldr	r1, [pc, #12]	@ (8005e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e22:	5ccb      	ldrb	r3, [r1, r3]
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	0800ae10 	.word	0x0800ae10

08005e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	220f      	movs	r2, #15
 8005e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e44:	4b12      	ldr	r3, [pc, #72]	@ (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0203 	and.w	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e50:	4b0f      	ldr	r3, [pc, #60]	@ (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <HAL_RCC_GetClockConfig+0x5c>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e76:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <HAL_RCC_GetClockConfig+0x60>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40023c00 	.word	0x40023c00

08005e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e9c:	b0a6      	sub	sp, #152	@ 0x98
 8005e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ebe:	4bc8      	ldr	r3, [pc, #800]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b0c      	cmp	r3, #12
 8005ec8:	f200 817e 	bhi.w	80061c8 <HAL_RCC_GetSysClockFreq+0x330>
 8005ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f09 	.word	0x08005f09
 8005ed8:	080061c9 	.word	0x080061c9
 8005edc:	080061c9 	.word	0x080061c9
 8005ee0:	080061c9 	.word	0x080061c9
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	080061c9 	.word	0x080061c9
 8005eec:	080061c9 	.word	0x080061c9
 8005ef0:	080061c9 	.word	0x080061c9
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	080061c9 	.word	0x080061c9
 8005efc:	080061c9 	.word	0x080061c9
 8005f00:	080061c9 	.word	0x080061c9
 8005f04:	08006083 	.word	0x08006083
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f08:	4bb6      	ldr	r3, [pc, #728]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8005f0e:	e15f      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f10:	4bb5      	ldr	r3, [pc, #724]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005f16:	e15b      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f18:	4bb1      	ldr	r3, [pc, #708]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f24:	4bae      	ldr	r3, [pc, #696]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d031      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f30:	4bab      	ldr	r3, [pc, #684]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	2200      	movs	r2, #0
 8005f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f44:	2300      	movs	r3, #0
 8005f46:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f48:	4ba7      	ldr	r3, [pc, #668]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f4a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005f4e:	462a      	mov	r2, r5
 8005f50:	fb03 f202 	mul.w	r2, r3, r2
 8005f54:	2300      	movs	r3, #0
 8005f56:	4621      	mov	r1, r4
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4aa2      	ldr	r2, [pc, #648]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f60:	4621      	mov	r1, r4
 8005f62:	fba1 1202 	umull	r1, r2, r1, r2
 8005f66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f68:	460a      	mov	r2, r1
 8005f6a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005f6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f6e:	4413      	add	r3, r2
 8005f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f76:	2200      	movs	r2, #0
 8005f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f7a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005f7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005f84:	f7fa ff0e 	bl	8000da4 <__aeabi_uldivmod>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f92:	e064      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f94:	4b92      	ldr	r3, [pc, #584]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	099b      	lsrs	r3, r3, #6
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f9e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa8:	2300      	movs	r3, #0
 8005faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	0159      	lsls	r1, r3, #5
 8005fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fc2:	0150      	lsls	r0, r2, #5
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4621      	mov	r1, r4
 8005fca:	1a51      	subs	r1, r2, r1
 8005fcc:	6139      	str	r1, [r7, #16]
 8005fce:	4629      	mov	r1, r5
 8005fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	018b      	lsls	r3, r1, #6
 8005fe6:	4651      	mov	r1, sl
 8005fe8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fec:	4651      	mov	r1, sl
 8005fee:	018a      	lsls	r2, r1, #6
 8005ff0:	4651      	mov	r1, sl
 8005ff2:	ebb2 0801 	subs.w	r8, r2, r1
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	eb63 0901 	sbc.w	r9, r3, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006008:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800600c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006010:	4690      	mov	r8, r2
 8006012:	4699      	mov	r9, r3
 8006014:	4623      	mov	r3, r4
 8006016:	eb18 0303 	adds.w	r3, r8, r3
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	462b      	mov	r3, r5
 800601e:	eb49 0303 	adc.w	r3, r9, r3
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006030:	4629      	mov	r1, r5
 8006032:	028b      	lsls	r3, r1, #10
 8006034:	4621      	mov	r1, r4
 8006036:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800603a:	4621      	mov	r1, r4
 800603c:	028a      	lsls	r2, r1, #10
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006046:	2200      	movs	r2, #0
 8006048:	643b      	str	r3, [r7, #64]	@ 0x40
 800604a:	647a      	str	r2, [r7, #68]	@ 0x44
 800604c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006050:	f7fa fea8 	bl	8000da4 <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4613      	mov	r3, r2
 800605a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800605e:	4b60      	ldr	r3, [pc, #384]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	0c1b      	lsrs	r3, r3, #16
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	3301      	adds	r3, #1
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8006070:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006074:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006080:	e0a6      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006082:	4b57      	ldr	r3, [pc, #348]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800608a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800608e:	4b54      	ldr	r3, [pc, #336]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d02a      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800609a:	4b51      	ldr	r3, [pc, #324]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	099b      	lsrs	r3, r3, #6
 80060a0:	2200      	movs	r2, #0
 80060a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060ac:	2100      	movs	r1, #0
 80060ae:	4b4e      	ldr	r3, [pc, #312]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80060b0:	fb03 f201 	mul.w	r2, r3, r1
 80060b4:	2300      	movs	r3, #0
 80060b6:	fb00 f303 	mul.w	r3, r0, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	4a4a      	ldr	r2, [pc, #296]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80060be:	fba0 1202 	umull	r1, r2, r0, r2
 80060c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80060c4:	460a      	mov	r2, r1
 80060c6:	673a      	str	r2, [r7, #112]	@ 0x70
 80060c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060ca:	4413      	add	r3, r2
 80060cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80060ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d2:	2200      	movs	r2, #0
 80060d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80060d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80060dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80060e0:	f7fa fe60 	bl	8000da4 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060ee:	e05b      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f0:	4b3b      	ldr	r3, [pc, #236]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	099b      	lsrs	r3, r3, #6
 80060f6:	2200      	movs	r2, #0
 80060f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
 8006108:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	f04f 0000 	mov.w	r0, #0
 8006114:	f04f 0100 	mov.w	r1, #0
 8006118:	0159      	lsls	r1, r3, #5
 800611a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800611e:	0150      	lsls	r0, r2, #5
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4641      	mov	r1, r8
 8006126:	ebb2 0a01 	subs.w	sl, r2, r1
 800612a:	4649      	mov	r1, r9
 800612c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800613c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006140:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006144:	ebb2 040a 	subs.w	r4, r2, sl
 8006148:	eb63 050b 	sbc.w	r5, r3, fp
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	00eb      	lsls	r3, r5, #3
 8006156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615a:	00e2      	lsls	r2, r4, #3
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	4643      	mov	r3, r8
 8006162:	18e3      	adds	r3, r4, r3
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	464b      	mov	r3, r9
 8006168:	eb45 0303 	adc.w	r3, r5, r3
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800617a:	4629      	mov	r1, r5
 800617c:	028b      	lsls	r3, r1, #10
 800617e:	4621      	mov	r1, r4
 8006180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006184:	4621      	mov	r1, r4
 8006186:	028a      	lsls	r2, r1, #10
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006190:	2200      	movs	r2, #0
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800619a:	f7fa fe03 	bl	8000da4 <__aeabi_uldivmod>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4613      	mov	r3, r2
 80061a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80061a8:	4b0d      	ldr	r3, [pc, #52]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	0f1b      	lsrs	r3, r3, #28
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80061ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3798      	adds	r7, #152	@ 0x98
 80061d8:	46bd      	mov	sp, r7
 80061da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061de:	bf00      	nop
 80061e0:	40023800 	.word	0x40023800
 80061e4:	00f42400 	.word	0x00f42400
 80061e8:	016e3600 	.word	0x016e3600

080061ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e28d      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8083 	beq.w	8006312 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800620c:	4b94      	ldr	r3, [pc, #592]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 030c 	and.w	r3, r3, #12
 8006214:	2b04      	cmp	r3, #4
 8006216:	d019      	beq.n	800624c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006218:	4b91      	ldr	r3, [pc, #580]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006220:	2b08      	cmp	r3, #8
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006224:	4b8e      	ldr	r3, [pc, #568]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800622c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006230:	d00c      	beq.n	800624c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006232:	4b8b      	ldr	r3, [pc, #556]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d112      	bne.n	8006264 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623e:	4b88      	ldr	r3, [pc, #544]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800624a:	d10b      	bne.n	8006264 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	4b84      	ldr	r3, [pc, #528]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d05b      	beq.n	8006310 <HAL_RCC_OscConfig+0x124>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d157      	bne.n	8006310 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e25a      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x90>
 800626e:	4b7c      	ldr	r3, [pc, #496]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a7b      	ldr	r2, [pc, #492]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e01d      	b.n	80062b8 <HAL_RCC_OscConfig+0xcc>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCC_OscConfig+0xb4>
 8006286:	4b76      	ldr	r3, [pc, #472]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a75      	ldr	r2, [pc, #468]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	4b73      	ldr	r3, [pc, #460]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a72      	ldr	r2, [pc, #456]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0xcc>
 80062a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a6e      	ldr	r2, [pc, #440]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a6b      	ldr	r2, [pc, #428]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80062b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fd fd58 	bl	8003d74 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fd fd54 	bl	8003d74 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e21f      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	4b61      	ldr	r3, [pc, #388]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0xdc>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e8:	f7fd fd44 	bl	8003d74 <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fd fd40 	bl	8003d74 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	@ 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e20b      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	4b57      	ldr	r3, [pc, #348]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0x104>
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d06f      	beq.n	80063fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800631e:	4b50      	ldr	r3, [pc, #320]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b00      	cmp	r3, #0
 8006328:	d017      	beq.n	800635a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800632a:	4b4d      	ldr	r3, [pc, #308]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006332:	2b08      	cmp	r3, #8
 8006334:	d105      	bne.n	8006342 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006336:	4b4a      	ldr	r3, [pc, #296]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006342:	4b47      	ldr	r3, [pc, #284]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800634a:	2b0c      	cmp	r3, #12
 800634c:	d11c      	bne.n	8006388 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800634e:	4b44      	ldr	r3, [pc, #272]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d116      	bne.n	8006388 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635a:	4b41      	ldr	r3, [pc, #260]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_RCC_OscConfig+0x186>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d001      	beq.n	8006372 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e1d3      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006372:	4b3b      	ldr	r3, [pc, #236]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4937      	ldr	r1, [pc, #220]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006382:	4313      	orrs	r3, r2
 8006384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006386:	e03a      	b.n	80063fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d020      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006390:	4b34      	ldr	r3, [pc, #208]	@ (8006464 <HAL_RCC_OscConfig+0x278>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006396:	f7fd fced 	bl	8003d74 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800639e:	f7fd fce9 	bl	8003d74 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e1b4      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063bc:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4925      	ldr	r1, [pc, #148]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	600b      	str	r3, [r1, #0]
 80063d0:	e015      	b.n	80063fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063d2:	4b24      	ldr	r3, [pc, #144]	@ (8006464 <HAL_RCC_OscConfig+0x278>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fd fccc 	bl	8003d74 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e0:	f7fd fcc8 	bl	8003d74 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e193      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d036      	beq.n	8006478 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <HAL_RCC_OscConfig+0x27c>)
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006418:	f7fd fcac 	bl	8003d74 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006420:	f7fd fca8 	bl	8003d74 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e173      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006432:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <HAL_RCC_OscConfig+0x274>)
 8006434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0f0      	beq.n	8006420 <HAL_RCC_OscConfig+0x234>
 800643e:	e01b      	b.n	8006478 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006440:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <HAL_RCC_OscConfig+0x27c>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006446:	f7fd fc95 	bl	8003d74 <HAL_GetTick>
 800644a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	e00e      	b.n	800646c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800644e:	f7fd fc91 	bl	8003d74 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d907      	bls.n	800646c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e15c      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
 8006460:	40023800 	.word	0x40023800
 8006464:	42470000 	.word	0x42470000
 8006468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800646c:	4b8a      	ldr	r3, [pc, #552]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800646e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1ea      	bne.n	800644e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8097 	beq.w	80065b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006486:	2300      	movs	r3, #0
 8006488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800648a:	4b83      	ldr	r3, [pc, #524]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800648c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10f      	bne.n	80064b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	4b7f      	ldr	r3, [pc, #508]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	4a7e      	ldr	r2, [pc, #504]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80064a6:	4b7c      	ldr	r3, [pc, #496]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ae:	60bb      	str	r3, [r7, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b6:	4b79      	ldr	r3, [pc, #484]	@ (800669c <HAL_RCC_OscConfig+0x4b0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d118      	bne.n	80064f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c2:	4b76      	ldr	r3, [pc, #472]	@ (800669c <HAL_RCC_OscConfig+0x4b0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a75      	ldr	r2, [pc, #468]	@ (800669c <HAL_RCC_OscConfig+0x4b0>)
 80064c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ce:	f7fd fc51 	bl	8003d74 <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d6:	f7fd fc4d 	bl	8003d74 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e118      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e8:	4b6c      	ldr	r3, [pc, #432]	@ (800669c <HAL_RCC_OscConfig+0x4b0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d106      	bne.n	800650a <HAL_RCC_OscConfig+0x31e>
 80064fc:	4b66      	ldr	r3, [pc, #408]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	4a65      	ldr	r2, [pc, #404]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	6713      	str	r3, [r2, #112]	@ 0x70
 8006508:	e01c      	b.n	8006544 <HAL_RCC_OscConfig+0x358>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b05      	cmp	r3, #5
 8006510:	d10c      	bne.n	800652c <HAL_RCC_OscConfig+0x340>
 8006512:	4b61      	ldr	r3, [pc, #388]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006516:	4a60      	ldr	r2, [pc, #384]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006518:	f043 0304 	orr.w	r3, r3, #4
 800651c:	6713      	str	r3, [r2, #112]	@ 0x70
 800651e:	4b5e      	ldr	r3, [pc, #376]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a5d      	ldr	r2, [pc, #372]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
 800652a:	e00b      	b.n	8006544 <HAL_RCC_OscConfig+0x358>
 800652c:	4b5a      	ldr	r3, [pc, #360]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006530:	4a59      	ldr	r2, [pc, #356]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	6713      	str	r3, [r2, #112]	@ 0x70
 8006538:	4b57      	ldr	r3, [pc, #348]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800653a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653c:	4a56      	ldr	r2, [pc, #344]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800653e:	f023 0304 	bic.w	r3, r3, #4
 8006542:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654c:	f7fd fc12 	bl	8003d74 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006552:	e00a      	b.n	800656a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006554:	f7fd fc0e 	bl	8003d74 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e0d7      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656a:	4b4b      	ldr	r3, [pc, #300]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ee      	beq.n	8006554 <HAL_RCC_OscConfig+0x368>
 8006576:	e014      	b.n	80065a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006578:	f7fd fbfc 	bl	8003d74 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657e:	e00a      	b.n	8006596 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006580:	f7fd fbf8 	bl	8003d74 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e0c1      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006596:	4b40      	ldr	r3, [pc, #256]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1ee      	bne.n	8006580 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d105      	bne.n	80065b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80065aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ac:	4a3a      	ldr	r2, [pc, #232]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80065ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80ad 	beq.w	8006718 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065be:	4b36      	ldr	r3, [pc, #216]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d060      	beq.n	800668c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d145      	bne.n	800665e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d2:	4b33      	ldr	r3, [pc, #204]	@ (80066a0 <HAL_RCC_OscConfig+0x4b4>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fd fbcc 	bl	8003d74 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fd fbc8 	bl	8003d74 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e093      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f2:	4b29      	ldr	r3, [pc, #164]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	019b      	lsls	r3, r3, #6
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	3b01      	subs	r3, #1
 8006618:	041b      	lsls	r3, r3, #16
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	071b      	lsls	r3, r3, #28
 800662a:	491b      	ldr	r1, [pc, #108]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006630:	4b1b      	ldr	r3, [pc, #108]	@ (80066a0 <HAL_RCC_OscConfig+0x4b4>)
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fd fb9d 	bl	8003d74 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663e:	f7fd fb99 	bl	8003d74 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e064      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006650:	4b11      	ldr	r3, [pc, #68]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x452>
 800665c:	e05c      	b.n	8006718 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665e:	4b10      	ldr	r3, [pc, #64]	@ (80066a0 <HAL_RCC_OscConfig+0x4b4>)
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fd fb86 	bl	8003d74 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800666c:	f7fd fb82 	bl	8003d74 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e04d      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667e:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <HAL_RCC_OscConfig+0x4ac>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x480>
 800668a:	e045      	b.n	8006718 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e040      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
 8006698:	40023800 	.word	0x40023800
 800669c:	40007000 	.word	0x40007000
 80066a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006724 <HAL_RCC_OscConfig+0x538>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d030      	beq.n	8006714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d129      	bne.n	8006714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d122      	bne.n	8006714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066d4:	4013      	ands	r3, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066dc:	4293      	cmp	r3, r2
 80066de:	d119      	bne.n	8006714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	3b01      	subs	r3, #1
 80066ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d10f      	bne.n	8006714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d107      	bne.n	8006714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800

08006728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e041      	b.n	80067be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fb fd1e 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fe5e 	bl	8007428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e04e      	b.n	800687e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a23      	ldr	r2, [pc, #140]	@ (800688c <HAL_TIM_Base_Start_IT+0xc4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680a:	d01d      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1f      	ldr	r2, [pc, #124]	@ (8006890 <HAL_TIM_Base_Start_IT+0xc8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1e      	ldr	r2, [pc, #120]	@ (8006894 <HAL_TIM_Base_Start_IT+0xcc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1c      	ldr	r2, [pc, #112]	@ (8006898 <HAL_TIM_Base_Start_IT+0xd0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1b      	ldr	r2, [pc, #108]	@ (800689c <HAL_TIM_Base_Start_IT+0xd4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a19      	ldr	r2, [pc, #100]	@ (80068a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x80>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a18      	ldr	r2, [pc, #96]	@ (80068a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d111      	bne.n	800686c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b06      	cmp	r3, #6
 8006858:	d010      	beq.n	800687c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686a:	e007      	b.n	800687c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0201 	orr.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40010400 	.word	0x40010400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40001800 	.word	0x40001800

080068a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e041      	b.n	800693e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f839 	bl	8006946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f000 fd9e 	bl	8007428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e022      	b.n	80069ce <HAL_TIM_PWM_Start_DMA+0x72>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b04      	cmp	r3, #4
 800698c:	d109      	bne.n	80069a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	bf0c      	ite	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	2300      	movne	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	e015      	b.n	80069ce <HAL_TIM_PWM_Start_DMA+0x72>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d109      	bne.n	80069bc <HAL_TIM_PWM_Start_DMA+0x60>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	e008      	b.n	80069ce <HAL_TIM_PWM_Start_DMA+0x72>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	e171      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	e022      	b.n	8006a36 <HAL_TIM_PWM_Start_DMA+0xda>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d109      	bne.n	8006a0a <HAL_TIM_PWM_Start_DMA+0xae>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e015      	b.n	8006a36 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d109      	bne.n	8006a24 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	e008      	b.n	8006a36 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d024      	beq.n	8006a84 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Start_DMA+0xee>
 8006a40:	887b      	ldrh	r3, [r7, #2]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e137      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_PWM_Start_DMA+0xfe>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a58:	e016      	b.n	8006a88 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIM_PWM_Start_DMA+0x10e>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a68:	e00e      	b.n	8006a88 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a78:	e006      	b.n	8006a88 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a82:	e001      	b.n	8006a88 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e118      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b0c      	cmp	r3, #12
 8006a8c:	f200 80ae 	bhi.w	8006bec <HAL_TIM_PWM_Start_DMA+0x290>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006bed 	.word	0x08006bed
 8006aa0:	08006bed 	.word	0x08006bed
 8006aa4:	08006bed 	.word	0x08006bed
 8006aa8:	08006b15 	.word	0x08006b15
 8006aac:	08006bed 	.word	0x08006bed
 8006ab0:	08006bed 	.word	0x08006bed
 8006ab4:	08006bed 	.word	0x08006bed
 8006ab8:	08006b5d 	.word	0x08006b5d
 8006abc:	08006bed 	.word	0x08006bed
 8006ac0:	08006bed 	.word	0x08006bed
 8006ac4:	08006bed 	.word	0x08006bed
 8006ac8:	08006ba5 	.word	0x08006ba5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	4a7c      	ldr	r2, [pc, #496]	@ (8006cc4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8006cc8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006ada:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	4a7a      	ldr	r2, [pc, #488]	@ (8006ccc <HAL_TIM_PWM_Start_DMA+0x370>)
 8006ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3334      	adds	r3, #52	@ 0x34
 8006af0:	461a      	mov	r2, r3
 8006af2:	887b      	ldrh	r3, [r7, #2]
 8006af4:	f7fe fc14 	bl	8005320 <HAL_DMA_Start_IT>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e0db      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b10:	60da      	str	r2, [r3, #12]
      break;
 8006b12:	e06e      	b.n	8006bf2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	4a6a      	ldr	r2, [pc, #424]	@ (8006cc4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	4a69      	ldr	r2, [pc, #420]	@ (8006cc8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006b22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	4a68      	ldr	r2, [pc, #416]	@ (8006ccc <HAL_TIM_PWM_Start_DMA+0x370>)
 8006b2a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3338      	adds	r3, #56	@ 0x38
 8006b38:	461a      	mov	r2, r3
 8006b3a:	887b      	ldrh	r3, [r7, #2]
 8006b3c:	f7fe fbf0 	bl	8005320 <HAL_DMA_Start_IT>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0b7      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b58:	60da      	str	r2, [r3, #12]
      break;
 8006b5a:	e04a      	b.n	8006bf2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	4a58      	ldr	r2, [pc, #352]	@ (8006cc4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006b62:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	4a57      	ldr	r2, [pc, #348]	@ (8006cc8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b70:	4a56      	ldr	r2, [pc, #344]	@ (8006ccc <HAL_TIM_PWM_Start_DMA+0x370>)
 8006b72:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	333c      	adds	r3, #60	@ 0x3c
 8006b80:	461a      	mov	r2, r3
 8006b82:	887b      	ldrh	r3, [r7, #2]
 8006b84:	f7fe fbcc 	bl	8005320 <HAL_DMA_Start_IT>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e093      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ba0:	60da      	str	r2, [r3, #12]
      break;
 8006ba2:	e026      	b.n	8006bf2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	4a46      	ldr	r2, [pc, #280]	@ (8006cc4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006baa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb0:	4a45      	ldr	r2, [pc, #276]	@ (8006cc8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb8:	4a44      	ldr	r2, [pc, #272]	@ (8006ccc <HAL_TIM_PWM_Start_DMA+0x370>)
 8006bba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3340      	adds	r3, #64	@ 0x40
 8006bc8:	461a      	mov	r2, r3
 8006bca:	887b      	ldrh	r3, [r7, #2]
 8006bcc:	f7fe fba8 	bl	8005320 <HAL_DMA_Start_IT>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e06f      	b.n	8006cba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006be8:	60da      	str	r2, [r3, #12]
      break;
 8006bea:	e002      	b.n	8006bf2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d15f      	bne.n	8006cb8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fefb 	bl	80079fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a31      	ldr	r2, [pc, #196]	@ (8006cd0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_PWM_Start_DMA+0x2be>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2f      	ldr	r2, [pc, #188]	@ (8006cd4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_PWM_Start_DMA+0x2c2>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c32:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a25      	ldr	r2, [pc, #148]	@ (8006cd0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d022      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c46:	d01d      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a22      	ldr	r2, [pc, #136]	@ (8006cd8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d018      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a21      	ldr	r2, [pc, #132]	@ (8006cdc <HAL_TIM_PWM_Start_DMA+0x380>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00e      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d111      	bne.n	8006ca8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b06      	cmp	r3, #6
 8006c94:	d010      	beq.n	8006cb8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0201 	orr.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca6:	e007      	b.n	8006cb8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	08007319 	.word	0x08007319
 8006cc8:	080073c1 	.word	0x080073c1
 8006ccc:	08007287 	.word	0x08007287
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40010400 	.word	0x40010400
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40000800 	.word	0x40000800
 8006ce0:	40000c00 	.word	0x40000c00
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40001800 	.word	0x40001800

08006cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0202 	mvn.w	r2, #2
 8006d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa77 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa69 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fa7a 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d122      	bne.n	8006d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d11b      	bne.n	8006d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0204 	mvn.w	r2, #4
 8006d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa4d 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006d88:	e005      	b.n	8006d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa3f 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa50 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d122      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d11b      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0208 	mvn.w	r2, #8
 8006dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa23 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006ddc:	e005      	b.n	8006dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa15 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa26 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d122      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d11b      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0210 	mvn.w	r2, #16
 8006e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f9f9 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006e30:	e005      	b.n	8006e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9eb 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f9fc 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d10e      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d107      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0201 	mvn.w	r2, #1
 8006e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fb f8a8 	bl	8001fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7a:	2b80      	cmp	r3, #128	@ 0x80
 8006e7c:	d10e      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b80      	cmp	r3, #128	@ 0x80
 8006e8a:	d107      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fe5c 	bl	8007b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d10e      	bne.n	8006ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb4:	2b40      	cmp	r3, #64	@ 0x40
 8006eb6:	d107      	bne.n	8006ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9cb 	bl	800725e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d10e      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d107      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0220 	mvn.w	r2, #32
 8006eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fe26 	bl	8007b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0ae      	b.n	8007078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	f200 809f 	bhi.w	8007068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f65 	.word	0x08006f65
 8006f34:	08007069 	.word	0x08007069
 8006f38:	08007069 	.word	0x08007069
 8006f3c:	08007069 	.word	0x08007069
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	08007069 	.word	0x08007069
 8006f48:	08007069 	.word	0x08007069
 8006f4c:	08007069 	.word	0x08007069
 8006f50:	08006fe7 	.word	0x08006fe7
 8006f54:	08007069 	.word	0x08007069
 8006f58:	08007069 	.word	0x08007069
 8006f5c:	08007069 	.word	0x08007069
 8006f60:	08007027 	.word	0x08007027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fafc 	bl	8007568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0208 	orr.w	r2, r2, #8
 8006f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0204 	bic.w	r2, r2, #4
 8006f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6999      	ldr	r1, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	619a      	str	r2, [r3, #24]
      break;
 8006fa2:	e064      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fb4c 	bl	8007648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6999      	ldr	r1, [r3, #24]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	021a      	lsls	r2, r3, #8
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	619a      	str	r2, [r3, #24]
      break;
 8006fe4:	e043      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fba1 	bl	8007734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0208 	orr.w	r2, r2, #8
 8007000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0204 	bic.w	r2, r2, #4
 8007010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69d9      	ldr	r1, [r3, #28]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	61da      	str	r2, [r3, #28]
      break;
 8007024:	e023      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fbf5 	bl	800781c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	021a      	lsls	r2, r3, #8
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	61da      	str	r2, [r3, #28]
      break;
 8007066:	e002      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
      break;
 800706c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIM_ConfigClockSource+0x1c>
 8007098:	2302      	movs	r3, #2
 800709a:	e0b4      	b.n	8007206 <HAL_TIM_ConfigClockSource+0x186>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d4:	d03e      	beq.n	8007154 <HAL_TIM_ConfigClockSource+0xd4>
 80070d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070da:	f200 8087 	bhi.w	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e2:	f000 8086 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x172>
 80070e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ea:	d87f      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070ec:	2b70      	cmp	r3, #112	@ 0x70
 80070ee:	d01a      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0xa6>
 80070f0:	2b70      	cmp	r3, #112	@ 0x70
 80070f2:	d87b      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070f4:	2b60      	cmp	r3, #96	@ 0x60
 80070f6:	d050      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x11a>
 80070f8:	2b60      	cmp	r3, #96	@ 0x60
 80070fa:	d877      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b50      	cmp	r3, #80	@ 0x50
 80070fe:	d03c      	beq.n	800717a <HAL_TIM_ConfigClockSource+0xfa>
 8007100:	2b50      	cmp	r3, #80	@ 0x50
 8007102:	d873      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b40      	cmp	r3, #64	@ 0x40
 8007106:	d058      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x13a>
 8007108:	2b40      	cmp	r3, #64	@ 0x40
 800710a:	d86f      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 800710c:	2b30      	cmp	r3, #48	@ 0x30
 800710e:	d064      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007110:	2b30      	cmp	r3, #48	@ 0x30
 8007112:	d86b      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 8007114:	2b20      	cmp	r3, #32
 8007116:	d060      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007118:	2b20      	cmp	r3, #32
 800711a:	d867      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05c      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007120:	2b10      	cmp	r3, #16
 8007122:	d05a      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007124:	e062      	b.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6899      	ldr	r1, [r3, #8]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f000 fc41 	bl	80079bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	609a      	str	r2, [r3, #8]
      break;
 8007152:	e04f      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f000 fc2a 	bl	80079bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007176:	609a      	str	r2, [r3, #8]
      break;
 8007178:	e03c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6859      	ldr	r1, [r3, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	461a      	mov	r2, r3
 8007188:	f000 fb9e 	bl	80078c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2150      	movs	r1, #80	@ 0x50
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fbf7 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 8007198:	e02c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6859      	ldr	r1, [r3, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f000 fbbd 	bl	8007926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2160      	movs	r1, #96	@ 0x60
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fbe7 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 80071b8:	e01c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6859      	ldr	r1, [r3, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f000 fb7e 	bl	80078c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2140      	movs	r1, #64	@ 0x40
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fbd7 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 80071d8:	e00c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4619      	mov	r1, r3
 80071e4:	4610      	mov	r0, r2
 80071e6:	f000 fbce 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 80071ea:	e003      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e000      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007292:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	429a      	cmp	r2, r3
 800729c:	d107      	bne.n	80072ae <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072ac:	e02a      	b.n	8007304 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d107      	bne.n	80072c8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2202      	movs	r2, #2
 80072bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072c6:	e01d      	b.n	8007304 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d107      	bne.n	80072e2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2204      	movs	r2, #4
 80072d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072e0:	e010      	b.n	8007304 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d107      	bne.n	80072fc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2208      	movs	r2, #8
 80072f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072fa:	e003      	b.n	8007304 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff ffb4 	bl	8007272 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d10b      	bne.n	8007348 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d136      	bne.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007346:	e031      	b.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	429a      	cmp	r2, r3
 8007350:	d10b      	bne.n	800736a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2202      	movs	r2, #2
 8007356:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d125      	bne.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007368:	e020      	b.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d10b      	bne.n	800738c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2204      	movs	r2, #4
 8007378:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d114      	bne.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800738a:	e00f      	b.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d10a      	bne.n	80073ac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2208      	movs	r2, #8
 800739a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d103      	bne.n	80073ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff ff42 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d103      	bne.n	80073e0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	771a      	strb	r2, [r3, #28]
 80073de:	e019      	b.n	8007414 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d103      	bne.n	80073f2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2202      	movs	r2, #2
 80073ee:	771a      	strb	r2, [r3, #28]
 80073f0:	e010      	b.n	8007414 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d103      	bne.n	8007404 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2204      	movs	r2, #4
 8007400:	771a      	strb	r2, [r3, #28]
 8007402:	e007      	b.n	8007414 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	429a      	cmp	r2, r3
 800740c:	d102      	bne.n	8007414 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2208      	movs	r2, #8
 8007412:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff ff18 	bl	800724a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
}
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a40      	ldr	r2, [pc, #256]	@ (800753c <TIM_Base_SetConfig+0x114>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d013      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007446:	d00f      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3d      	ldr	r2, [pc, #244]	@ (8007540 <TIM_Base_SetConfig+0x118>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00b      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3c      	ldr	r2, [pc, #240]	@ (8007544 <TIM_Base_SetConfig+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d007      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a3b      	ldr	r2, [pc, #236]	@ (8007548 <TIM_Base_SetConfig+0x120>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3a      	ldr	r2, [pc, #232]	@ (800754c <TIM_Base_SetConfig+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d108      	bne.n	800747a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800746e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2f      	ldr	r2, [pc, #188]	@ (800753c <TIM_Base_SetConfig+0x114>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007488:	d027      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2c      	ldr	r2, [pc, #176]	@ (8007540 <TIM_Base_SetConfig+0x118>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d023      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2b      	ldr	r2, [pc, #172]	@ (8007544 <TIM_Base_SetConfig+0x11c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01f      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2a      	ldr	r2, [pc, #168]	@ (8007548 <TIM_Base_SetConfig+0x120>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a29      	ldr	r2, [pc, #164]	@ (800754c <TIM_Base_SetConfig+0x124>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d017      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a28      	ldr	r2, [pc, #160]	@ (8007550 <TIM_Base_SetConfig+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a27      	ldr	r2, [pc, #156]	@ (8007554 <TIM_Base_SetConfig+0x12c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a26      	ldr	r2, [pc, #152]	@ (8007558 <TIM_Base_SetConfig+0x130>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a25      	ldr	r2, [pc, #148]	@ (800755c <TIM_Base_SetConfig+0x134>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a24      	ldr	r2, [pc, #144]	@ (8007560 <TIM_Base_SetConfig+0x138>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a23      	ldr	r2, [pc, #140]	@ (8007564 <TIM_Base_SetConfig+0x13c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a0a      	ldr	r2, [pc, #40]	@ (800753c <TIM_Base_SetConfig+0x114>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0xf8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a0c      	ldr	r2, [pc, #48]	@ (800754c <TIM_Base_SetConfig+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d103      	bne.n	8007528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	615a      	str	r2, [r3, #20]
}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	40001800 	.word	0x40001800
 8007560:	40001c00 	.word	0x40001c00
 8007564:	40002000 	.word	0x40002000

08007568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0302 	bic.w	r3, r3, #2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a20      	ldr	r2, [pc, #128]	@ (8007640 <TIM_OC1_SetConfig+0xd8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC1_SetConfig+0x64>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007644 <TIM_OC1_SetConfig+0xdc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d10c      	bne.n	80075e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0308 	bic.w	r3, r3, #8
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <TIM_OC1_SetConfig+0xd8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC1_SetConfig+0x8e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a14      	ldr	r2, [pc, #80]	@ (8007644 <TIM_OC1_SetConfig+0xdc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d111      	bne.n	800761a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	621a      	str	r2, [r3, #32]
}
 8007634:	bf00      	nop
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40010000 	.word	0x40010000
 8007644:	40010400 	.word	0x40010400

08007648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0210 	bic.w	r2, r3, #16
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a22      	ldr	r2, [pc, #136]	@ (800772c <TIM_OC2_SetConfig+0xe4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC2_SetConfig+0x68>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a21      	ldr	r2, [pc, #132]	@ (8007730 <TIM_OC2_SetConfig+0xe8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10d      	bne.n	80076cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	@ (800772c <TIM_OC2_SetConfig+0xe4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_OC2_SetConfig+0x94>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a16      	ldr	r2, [pc, #88]	@ (8007730 <TIM_OC2_SetConfig+0xe8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d113      	bne.n	8007704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40010400 	.word	0x40010400

08007734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800777c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a21      	ldr	r2, [pc, #132]	@ (8007814 <TIM_OC3_SetConfig+0xe0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_OC3_SetConfig+0x66>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a20      	ldr	r2, [pc, #128]	@ (8007818 <TIM_OC3_SetConfig+0xe4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d10d      	bne.n	80077b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a16      	ldr	r2, [pc, #88]	@ (8007814 <TIM_OC3_SetConfig+0xe0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d003      	beq.n	80077c6 <TIM_OC3_SetConfig+0x92>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a15      	ldr	r2, [pc, #84]	@ (8007818 <TIM_OC3_SetConfig+0xe4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d113      	bne.n	80077ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	621a      	str	r2, [r3, #32]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400

0800781c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800784a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a12      	ldr	r2, [pc, #72]	@ (80078c0 <TIM_OC4_SetConfig+0xa4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC4_SetConfig+0x68>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <TIM_OC4_SetConfig+0xa8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d109      	bne.n	8007898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800788a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	019b      	lsls	r3, r3, #6
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 030a 	bic.w	r3, r3, #10
 8007904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0210 	bic.w	r2, r3, #16
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	031b      	lsls	r3, r3, #12
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	621a      	str	r2, [r3, #32]
}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f043 0307 	orr.w	r3, r3, #7
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	431a      	orrs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	609a      	str	r2, [r3, #8]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	2201      	movs	r2, #1
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	401a      	ands	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1a      	ldr	r2, [r3, #32]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	fa01 f303 	lsl.w	r3, r1, r3
 8007a34:	431a      	orrs	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e05a      	b.n	8007b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a21      	ldr	r2, [pc, #132]	@ (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d022      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aac:	d01d      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d018      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00e      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a18      	ldr	r2, [pc, #96]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d009      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a17      	ldr	r2, [pc, #92]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d004      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d10c      	bne.n	8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40010400 	.word	0x40010400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40001800 	.word	0x40001800

08007b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e03f      	b.n	8007bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fa fc06 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2224      	movs	r2, #36	@ 0x24
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f829 	bl	8007c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691a      	ldr	r2, [r3, #16]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695a      	ldr	r2, [r3, #20]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c08:	b0c0      	sub	sp, #256	@ 0x100
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c20:	68d9      	ldr	r1, [r3, #12]
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	ea40 0301 	orr.w	r3, r0, r1
 8007c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c5c:	f021 010c 	bic.w	r1, r1, #12
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7e:	6999      	ldr	r1, [r3, #24]
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	ea40 0301 	orr.w	r3, r0, r1
 8007c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b8f      	ldr	r3, [pc, #572]	@ (8007ed0 <UART_SetConfig+0x2cc>)
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d005      	beq.n	8007ca4 <UART_SetConfig+0xa0>
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8007ed4 <UART_SetConfig+0x2d0>)
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d104      	bne.n	8007cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ca4:	f7fe f8b2 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 8007ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cac:	e003      	b.n	8007cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cae:	f7fe f899 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8007cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cc0:	f040 810c 	bne.w	8007edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	462b      	mov	r3, r5
 8007cda:	1891      	adds	r1, r2, r2
 8007cdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cde:	415b      	adcs	r3, r3
 8007ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	eb12 0801 	adds.w	r8, r2, r1
 8007cec:	4629      	mov	r1, r5
 8007cee:	eb43 0901 	adc.w	r9, r3, r1
 8007cf2:	f04f 0200 	mov.w	r2, #0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d06:	4690      	mov	r8, r2
 8007d08:	4699      	mov	r9, r3
 8007d0a:	4623      	mov	r3, r4
 8007d0c:	eb18 0303 	adds.w	r3, r8, r3
 8007d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d14:	462b      	mov	r3, r5
 8007d16:	eb49 0303 	adc.w	r3, r9, r3
 8007d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d32:	460b      	mov	r3, r1
 8007d34:	18db      	adds	r3, r3, r3
 8007d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d38:	4613      	mov	r3, r2
 8007d3a:	eb42 0303 	adc.w	r3, r2, r3
 8007d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d48:	f7f9 f82c 	bl	8000da4 <__aeabi_uldivmod>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4b61      	ldr	r3, [pc, #388]	@ (8007ed8 <UART_SetConfig+0x2d4>)
 8007d52:	fba3 2302 	umull	r2, r3, r3, r2
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	011c      	lsls	r4, r3, #4
 8007d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	1891      	adds	r1, r2, r2
 8007d72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d74:	415b      	adcs	r3, r3
 8007d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d82:	4649      	mov	r1, r9
 8007d84:	eb43 0b01 	adc.w	fp, r3, r1
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d9c:	4692      	mov	sl, r2
 8007d9e:	469b      	mov	fp, r3
 8007da0:	4643      	mov	r3, r8
 8007da2:	eb1a 0303 	adds.w	r3, sl, r3
 8007da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007daa:	464b      	mov	r3, r9
 8007dac:	eb4b 0303 	adc.w	r3, fp, r3
 8007db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	18db      	adds	r3, r3, r3
 8007dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dce:	4613      	mov	r3, r2
 8007dd0:	eb42 0303 	adc.w	r3, r2, r3
 8007dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dde:	f7f8 ffe1 	bl	8000da4 <__aeabi_uldivmod>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4611      	mov	r1, r2
 8007de8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ed8 <UART_SetConfig+0x2d4>)
 8007dea:	fba3 2301 	umull	r2, r3, r3, r1
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	2264      	movs	r2, #100	@ 0x64
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	1acb      	subs	r3, r1, r3
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007dfe:	4b36      	ldr	r3, [pc, #216]	@ (8007ed8 <UART_SetConfig+0x2d4>)
 8007e00:	fba3 2302 	umull	r2, r3, r3, r2
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e0c:	441c      	add	r4, r3
 8007e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e20:	4642      	mov	r2, r8
 8007e22:	464b      	mov	r3, r9
 8007e24:	1891      	adds	r1, r2, r2
 8007e26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e28:	415b      	adcs	r3, r3
 8007e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e30:	4641      	mov	r1, r8
 8007e32:	1851      	adds	r1, r2, r1
 8007e34:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e36:	4649      	mov	r1, r9
 8007e38:	414b      	adcs	r3, r1
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e48:	4659      	mov	r1, fp
 8007e4a:	00cb      	lsls	r3, r1, #3
 8007e4c:	4651      	mov	r1, sl
 8007e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e52:	4651      	mov	r1, sl
 8007e54:	00ca      	lsls	r2, r1, #3
 8007e56:	4610      	mov	r0, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e64:	464b      	mov	r3, r9
 8007e66:	460a      	mov	r2, r1
 8007e68:	eb42 0303 	adc.w	r3, r2, r3
 8007e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e84:	460b      	mov	r3, r1
 8007e86:	18db      	adds	r3, r3, r3
 8007e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	eb42 0303 	adc.w	r3, r2, r3
 8007e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e9a:	f7f8 ff83 	bl	8000da4 <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <UART_SetConfig+0x2d4>)
 8007ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	2164      	movs	r1, #100	@ 0x64
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	3332      	adds	r3, #50	@ 0x32
 8007eb6:	4a08      	ldr	r2, [pc, #32]	@ (8007ed8 <UART_SetConfig+0x2d4>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	f003 0207 	and.w	r2, r3, #7
 8007ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4422      	add	r2, r4
 8007eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ecc:	e106      	b.n	80080dc <UART_SetConfig+0x4d8>
 8007ece:	bf00      	nop
 8007ed0:	40011000 	.word	0x40011000
 8007ed4:	40011400 	.word	0x40011400
 8007ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007eee:	4642      	mov	r2, r8
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	1891      	adds	r1, r2, r2
 8007ef4:	6239      	str	r1, [r7, #32]
 8007ef6:	415b      	adcs	r3, r3
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007efe:	4641      	mov	r1, r8
 8007f00:	1854      	adds	r4, r2, r1
 8007f02:	4649      	mov	r1, r9
 8007f04:	eb43 0501 	adc.w	r5, r3, r1
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	00eb      	lsls	r3, r5, #3
 8007f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f16:	00e2      	lsls	r2, r4, #3
 8007f18:	4614      	mov	r4, r2
 8007f1a:	461d      	mov	r5, r3
 8007f1c:	4643      	mov	r3, r8
 8007f1e:	18e3      	adds	r3, r4, r3
 8007f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f24:	464b      	mov	r3, r9
 8007f26:	eb45 0303 	adc.w	r3, r5, r3
 8007f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	f04f 0300 	mov.w	r3, #0
 8007f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	008b      	lsls	r3, r1, #2
 8007f4e:	4621      	mov	r1, r4
 8007f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f54:	4621      	mov	r1, r4
 8007f56:	008a      	lsls	r2, r1, #2
 8007f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f5c:	f7f8 ff22 	bl	8000da4 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4b60      	ldr	r3, [pc, #384]	@ (80080e8 <UART_SetConfig+0x4e4>)
 8007f66:	fba3 2302 	umull	r2, r3, r3, r2
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	011c      	lsls	r4, r3, #4
 8007f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f80:	4642      	mov	r2, r8
 8007f82:	464b      	mov	r3, r9
 8007f84:	1891      	adds	r1, r2, r2
 8007f86:	61b9      	str	r1, [r7, #24]
 8007f88:	415b      	adcs	r3, r3
 8007f8a:	61fb      	str	r3, [r7, #28]
 8007f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f90:	4641      	mov	r1, r8
 8007f92:	1851      	adds	r1, r2, r1
 8007f94:	6139      	str	r1, [r7, #16]
 8007f96:	4649      	mov	r1, r9
 8007f98:	414b      	adcs	r3, r1
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fa8:	4659      	mov	r1, fp
 8007faa:	00cb      	lsls	r3, r1, #3
 8007fac:	4651      	mov	r1, sl
 8007fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fb2:	4651      	mov	r1, sl
 8007fb4:	00ca      	lsls	r2, r1, #3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	189b      	adds	r3, r3, r2
 8007fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	460a      	mov	r2, r1
 8007fc8:	eb42 0303 	adc.w	r3, r2, r3
 8007fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007fe8:	4649      	mov	r1, r9
 8007fea:	008b      	lsls	r3, r1, #2
 8007fec:	4641      	mov	r1, r8
 8007fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	008a      	lsls	r2, r1, #2
 8007ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ffa:	f7f8 fed3 	bl	8000da4 <__aeabi_uldivmod>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4611      	mov	r1, r2
 8008004:	4b38      	ldr	r3, [pc, #224]	@ (80080e8 <UART_SetConfig+0x4e4>)
 8008006:	fba3 2301 	umull	r2, r3, r3, r1
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	2264      	movs	r2, #100	@ 0x64
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	1acb      	subs	r3, r1, r3
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	3332      	adds	r3, #50	@ 0x32
 8008018:	4a33      	ldr	r2, [pc, #204]	@ (80080e8 <UART_SetConfig+0x4e4>)
 800801a:	fba2 2303 	umull	r2, r3, r2, r3
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008024:	441c      	add	r4, r3
 8008026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800802a:	2200      	movs	r2, #0
 800802c:	673b      	str	r3, [r7, #112]	@ 0x70
 800802e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008034:	4642      	mov	r2, r8
 8008036:	464b      	mov	r3, r9
 8008038:	1891      	adds	r1, r2, r2
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	415b      	adcs	r3, r3
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008044:	4641      	mov	r1, r8
 8008046:	1851      	adds	r1, r2, r1
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	4649      	mov	r1, r9
 800804c:	414b      	adcs	r3, r1
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800805c:	4659      	mov	r1, fp
 800805e:	00cb      	lsls	r3, r1, #3
 8008060:	4651      	mov	r1, sl
 8008062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008066:	4651      	mov	r1, sl
 8008068:	00ca      	lsls	r2, r1, #3
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	4603      	mov	r3, r0
 8008070:	4642      	mov	r2, r8
 8008072:	189b      	adds	r3, r3, r2
 8008074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008076:	464b      	mov	r3, r9
 8008078:	460a      	mov	r2, r1
 800807a:	eb42 0303 	adc.w	r3, r2, r3
 800807e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	663b      	str	r3, [r7, #96]	@ 0x60
 800808a:	667a      	str	r2, [r7, #100]	@ 0x64
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008098:	4649      	mov	r1, r9
 800809a:	008b      	lsls	r3, r1, #2
 800809c:	4641      	mov	r1, r8
 800809e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080a2:	4641      	mov	r1, r8
 80080a4:	008a      	lsls	r2, r1, #2
 80080a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080aa:	f7f8 fe7b 	bl	8000da4 <__aeabi_uldivmod>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4b0d      	ldr	r3, [pc, #52]	@ (80080e8 <UART_SetConfig+0x4e4>)
 80080b4:	fba3 1302 	umull	r1, r3, r3, r2
 80080b8:	095b      	lsrs	r3, r3, #5
 80080ba:	2164      	movs	r1, #100	@ 0x64
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	3332      	adds	r3, #50	@ 0x32
 80080c6:	4a08      	ldr	r2, [pc, #32]	@ (80080e8 <UART_SetConfig+0x4e4>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f003 020f 	and.w	r2, r3, #15
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4422      	add	r2, r4
 80080da:	609a      	str	r2, [r3, #8]
}
 80080dc:	bf00      	nop
 80080de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080e2:	46bd      	mov	sp, r7
 80080e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e8:	51eb851f 	.word	0x51eb851f

080080ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080fe:	2b84      	cmp	r3, #132	@ 0x84
 8008100:	d005      	beq.n	800810e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008102:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4413      	add	r3, r2
 800810a:	3303      	adds	r3, #3
 800810c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008122:	f3ef 8305 	mrs	r3, IPSR
 8008126:	607b      	str	r3, [r7, #4]
  return(result);
 8008128:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800812a:	2b00      	cmp	r3, #0
 800812c:	bf14      	ite	ne
 800812e:	2301      	movne	r3, #1
 8008130:	2300      	moveq	r3, #0
 8008132:	b2db      	uxtb	r3, r3
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008144:	f001 f974 	bl	8009430 <vTaskStartScheduler>
  
  return osOK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	bd80      	pop	{r7, pc}

0800814e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800814e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008150:	b089      	sub	sp, #36	@ 0x24
 8008152:	af04      	add	r7, sp, #16
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <osThreadCreate+0x54>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01c      	beq.n	80081a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685c      	ldr	r4, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691e      	ldr	r6, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff ffb6 	bl	80080ec <makeFreeRtosPriority>
 8008180:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	9100      	str	r1, [sp, #0]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	4632      	mov	r2, r6
 8008194:	4629      	mov	r1, r5
 8008196:	4620      	mov	r0, r4
 8008198:	f000 ff64 	bl	8009064 <xTaskCreateStatic>
 800819c:	4603      	mov	r3, r0
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e01c      	b.n	80081dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685c      	ldr	r4, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff ff98 	bl	80080ec <makeFreeRtosPriority>
 80081bc:	4602      	mov	r2, r0
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	9200      	str	r2, [sp, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	4632      	mov	r2, r6
 80081ca:	4629      	mov	r1, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 ffa9 	bl	8009124 <xTaskCreate>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d001      	beq.n	80081dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	e000      	b.n	80081de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081dc:	68fb      	ldr	r3, [r7, #12]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <osDelay+0x16>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	e000      	b.n	80081fe <osDelay+0x18>
 80081fc:	2301      	movs	r3, #1
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 f8e0 	bl	80093c4 <vTaskDelay>
  
  return osOK;
 8008204:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	4619      	mov	r1, r3
 8008224:	2001      	movs	r0, #1
 8008226:	f000 fab6 	bl	8008796 <xQueueCreateMutexStatic>
 800822a:	4603      	mov	r3, r0
 800822c:	e003      	b.n	8008236 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800822e:	2001      	movs	r0, #1
 8008230:	f000 fa99 	bl	8008766 <xQueueCreateMutex>
 8008234:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <osMutexWait+0x18>
    return osErrorParameter;
 8008254:	2380      	movs	r3, #128	@ 0x80
 8008256:	e03a      	b.n	80082ce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d103      	bne.n	800826c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008264:	f04f 33ff 	mov.w	r3, #4294967295
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	e009      	b.n	8008280 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d006      	beq.n	8008280 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <osMutexWait+0x40>
      ticks = 1;
 800827c:	2301      	movs	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008280:	f7ff ff4c 	bl	800811c <inHandlerMode>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d017      	beq.n	80082ba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	461a      	mov	r2, r3
 8008290:	2100      	movs	r1, #0
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fd3c 	bl	8008d10 <xQueueReceiveFromISR>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d001      	beq.n	80082a2 <osMutexWait+0x62>
      return osErrorOS;
 800829e:	23ff      	movs	r3, #255	@ 0xff
 80082a0:	e015      	b.n	80082ce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d011      	beq.n	80082cc <osMutexWait+0x8c>
 80082a8:	4b0b      	ldr	r3, [pc, #44]	@ (80082d8 <osMutexWait+0x98>)
 80082aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	e008      	b.n	80082cc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc17 	bl	8008af0 <xQueueSemaphoreTake>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d001      	beq.n	80082cc <osMutexWait+0x8c>
    return osErrorOS;
 80082c8:	23ff      	movs	r3, #255	@ 0xff
 80082ca:	e000      	b.n	80082ce <osMutexWait+0x8e>
  }
  
  return osOK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80082ec:	f7ff ff16 	bl	800811c <inHandlerMode>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d016      	beq.n	8008324 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80082f6:	f107 0308 	add.w	r3, r7, #8
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fb67 	bl	80089d0 <xQueueGiveFromISR>
 8008302:	4603      	mov	r3, r0
 8008304:	2b01      	cmp	r3, #1
 8008306:	d001      	beq.n	800830c <osMutexRelease+0x30>
      return osErrorOS;
 8008308:	23ff      	movs	r3, #255	@ 0xff
 800830a:	e017      	b.n	800833c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d013      	beq.n	800833a <osMutexRelease+0x5e>
 8008312:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <osMutexRelease+0x68>)
 8008314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	e00a      	b.n	800833a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008324:	2300      	movs	r3, #0
 8008326:	2200      	movs	r2, #0
 8008328:	2100      	movs	r1, #0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa4e 	bl	80087cc <xQueueGenericSend>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d001      	beq.n	800833a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008336:	23ff      	movs	r3, #255	@ 0xff
 8008338:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800833a:	68fb      	ldr	r3, [r7, #12]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f103 0208 	add.w	r2, r3, #8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f04f 32ff 	mov.w	r2, #4294967295
 8008360:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f103 0208 	add.w	r2, r3, #8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f103 0208 	add.w	r2, r3, #8
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d103      	bne.n	800840a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e00c      	b.n	8008424 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3308      	adds	r3, #8
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e002      	b.n	8008418 <vListInsert+0x2e>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	d2f6      	bcs.n	8008412 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	601a      	str	r2, [r3, #0]
}
 8008450:	bf00      	nop
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6892      	ldr	r2, [r2, #8]
 8008472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6852      	ldr	r2, [r2, #4]
 800847c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	d103      	bne.n	8008490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	1e5a      	subs	r2, r3, #1
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	e7fd      	b.n	80084d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084dc:	f001 ff1c 	bl	800a318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e8:	68f9      	ldr	r1, [r7, #12]
 80084ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	441a      	add	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850c:	3b01      	subs	r3, #1
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008512:	fb01 f303 	mul.w	r3, r1, r3
 8008516:	441a      	add	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	22ff      	movs	r2, #255	@ 0xff
 8008520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	22ff      	movs	r2, #255	@ 0xff
 8008528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d114      	bne.n	800855c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01a      	beq.n	8008570 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3310      	adds	r3, #16
 800853e:	4618      	mov	r0, r3
 8008540:	f001 f9d0 	bl	80098e4 <xTaskRemoveFromEventList>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d012      	beq.n	8008570 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800854a:	4b0d      	ldr	r3, [pc, #52]	@ (8008580 <xQueueGenericReset+0xd0>)
 800854c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	e009      	b.n	8008570 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3310      	adds	r3, #16
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff fef1 	bl	8008348 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3324      	adds	r3, #36	@ 0x24
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff feec 	bl	8008348 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008570:	f001 ff04 	bl	800a37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008574:	2301      	movs	r3, #1
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08e      	sub	sp, #56	@ 0x38
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10b      	bne.n	80085b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	e7fd      	b.n	80085ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <xQueueGenericCreateStatic+0x56>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <xQueueGenericCreateStatic+0x5a>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <xQueueGenericCreateStatic+0x5c>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	623b      	str	r3, [r7, #32]
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <xQueueGenericCreateStatic+0x84>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <xQueueGenericCreateStatic+0x88>
 8008608:	2301      	movs	r3, #1
 800860a:	e000      	b.n	800860e <xQueueGenericCreateStatic+0x8a>
 800860c:	2300      	movs	r3, #0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10b      	bne.n	800862a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	61fb      	str	r3, [r7, #28]
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	e7fd      	b.n	8008626 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800862a:	2348      	movs	r3, #72	@ 0x48
 800862c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b48      	cmp	r3, #72	@ 0x48
 8008632:	d00b      	beq.n	800864c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	61bb      	str	r3, [r7, #24]
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800864c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00d      	beq.n	8008674 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008660:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4613      	mov	r3, r2
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f840 	bl	80086f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008676:	4618      	mov	r0, r3
 8008678:	3730      	adds	r7, #48	@ 0x30
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800867e:	b580      	push	{r7, lr}
 8008680:	b08a      	sub	sp, #40	@ 0x28
 8008682:	af02      	add	r7, sp, #8
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	4613      	mov	r3, r2
 800868a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	613b      	str	r3, [r7, #16]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	fb02 f303 	mul.w	r3, r2, r3
 80086b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	3348      	adds	r3, #72	@ 0x48
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 ff4f 	bl	800a55c <pvPortMalloc>
 80086be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d011      	beq.n	80086ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	3348      	adds	r3, #72	@ 0x48
 80086ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086d8:	79fa      	ldrb	r2, [r7, #7]
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	4613      	mov	r3, r2
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f805 	bl	80086f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ea:	69bb      	ldr	r3, [r7, #24]
	}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d103      	bne.n	8008710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e002      	b.n	8008716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008722:	2101      	movs	r1, #1
 8008724:	69b8      	ldr	r0, [r7, #24]
 8008726:	f7ff fec3 	bl	80084b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008752:	2300      	movs	r3, #0
 8008754:	2200      	movs	r2, #0
 8008756:	2100      	movs	r1, #0
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f837 	bl	80087cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	4603      	mov	r3, r0
 800876e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008770:	2301      	movs	r3, #1
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	461a      	mov	r2, r3
 800877c:	6939      	ldr	r1, [r7, #16]
 800877e:	6978      	ldr	r0, [r7, #20]
 8008780:	f7ff ff7d 	bl	800867e <xQueueGenericCreate>
 8008784:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7ff ffd3 	bl	8008732 <prvInitialiseMutex>

		return xNewQueue;
 800878c:	68fb      	ldr	r3, [r7, #12]
	}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af02      	add	r7, sp, #8
 800879c:	4603      	mov	r3, r0
 800879e:	6039      	str	r1, [r7, #0]
 80087a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	2300      	movs	r3, #0
 80087a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2200      	movs	r2, #0
 80087b2:	6939      	ldr	r1, [r7, #16]
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	f7ff fee5 	bl	8008584 <xQueueGenericCreateStatic>
 80087ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff ffb8 	bl	8008732 <prvInitialiseMutex>

		return xNewQueue;
 80087c2:	68fb      	ldr	r3, [r7, #12]
	}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08e      	sub	sp, #56	@ 0x38
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10b      	bne.n	8008800 <xQueueGenericSend+0x34>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	e7fd      	b.n	80087fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <xQueueGenericSend+0x42>
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <xQueueGenericSend+0x46>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <xQueueGenericSend+0x48>
 8008812:	2300      	movs	r3, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10b      	bne.n	8008830 <xQueueGenericSend+0x64>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	e7fd      	b.n	800882c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b02      	cmp	r3, #2
 8008834:	d103      	bne.n	800883e <xQueueGenericSend+0x72>
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <xQueueGenericSend+0x76>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <xQueueGenericSend+0x78>
 8008842:	2300      	movs	r3, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <xQueueGenericSend+0x94>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	623b      	str	r3, [r7, #32]
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008860:	f001 fa06 	bl	8009c70 <xTaskGetSchedulerState>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d102      	bne.n	8008870 <xQueueGenericSend+0xa4>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueGenericSend+0xa8>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueGenericSend+0xaa>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <xQueueGenericSend+0xc6>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008892:	f001 fd41 	bl	800a318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889e:	429a      	cmp	r2, r3
 80088a0:	d302      	bcc.n	80088a8 <xQueueGenericSend+0xdc>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d129      	bne.n	80088fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ae:	f000 fac9 	bl	8008e44 <prvCopyDataToQueue>
 80088b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	3324      	adds	r3, #36	@ 0x24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f80f 	bl	80098e4 <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d013      	beq.n	80088f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088cc:	4b3f      	ldr	r3, [pc, #252]	@ (80089cc <xQueueGenericSend+0x200>)
 80088ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	e00a      	b.n	80088f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088e4:	4b39      	ldr	r3, [pc, #228]	@ (80089cc <xQueueGenericSend+0x200>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088f4:	f001 fd42 	bl	800a37c <vPortExitCritical>
				return pdPASS;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e063      	b.n	80089c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008902:	f001 fd3b 	bl	800a37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008906:	2300      	movs	r3, #0
 8008908:	e05c      	b.n	80089c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800890a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890c:	2b00      	cmp	r3, #0
 800890e:	d106      	bne.n	800891e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f849 	bl	80099ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800891a:	2301      	movs	r3, #1
 800891c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800891e:	f001 fd2d 	bl	800a37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008922:	f000 fdef 	bl	8009504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008926:	f001 fcf7 	bl	800a318 <vPortEnterCritical>
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008930:	b25b      	sxtb	r3, r3
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d103      	bne.n	8008940 <xQueueGenericSend+0x174>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d103      	bne.n	8008956 <xQueueGenericSend+0x18a>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008956:	f001 fd11 	bl	800a37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800895a:	1d3a      	adds	r2, r7, #4
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f838 	bl	80099d8 <xTaskCheckForTimeOut>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d124      	bne.n	80089b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800896e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008970:	f000 fb60 	bl	8009034 <prvIsQueueFull>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	3310      	adds	r3, #16
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f000 ff88 	bl	8009898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800898a:	f000 faeb 	bl	8008f64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800898e:	f000 fdc7 	bl	8009520 <xTaskResumeAll>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	f47f af7c 	bne.w	8008892 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800899a:	4b0c      	ldr	r3, [pc, #48]	@ (80089cc <xQueueGenericSend+0x200>)
 800899c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	e772      	b.n	8008892 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089ae:	f000 fad9 	bl	8008f64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089b2:	f000 fdb5 	bl	8009520 <xTaskResumeAll>
 80089b6:	e76c      	b.n	8008892 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089ba:	f000 fad3 	bl	8008f64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089be:	f000 fdaf 	bl	8009520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3738      	adds	r7, #56	@ 0x38
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08e      	sub	sp, #56	@ 0x38
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10b      	bne.n	80089fc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	61fb      	str	r3, [r7, #28]
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	e7fd      	b.n	8008a18 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d103      	bne.n	8008a2c <xQueueGiveFromISR+0x5c>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <xQueueGiveFromISR+0x60>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <xQueueGiveFromISR+0x62>
 8008a30:	2300      	movs	r3, #0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10b      	bne.n	8008a4e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	61bb      	str	r3, [r7, #24]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a4e:	f001 fd43 	bl	800a4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a52:	f3ef 8211 	mrs	r2, BASEPRI
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	617a      	str	r2, [r7, #20]
 8008a68:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d22b      	bcs.n	8008ad6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d112      	bne.n	8008ac0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d016      	beq.n	8008ad0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	3324      	adds	r3, #36	@ 0x24
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 ff1c 	bl	80098e4 <xTaskRemoveFromEventList>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00e      	beq.n	8008ad0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2201      	movs	r2, #1
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	e007      	b.n	8008ad0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	b25a      	sxtb	r2, r3
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad4:	e001      	b.n	8008ada <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ae4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3738      	adds	r7, #56	@ 0x38
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08e      	sub	sp, #56	@ 0x38
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	623b      	str	r3, [r7, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	61fb      	str	r3, [r7, #28]
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b44:	f001 f894 	bl	8009c70 <xTaskGetSchedulerState>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <xQueueSemaphoreTake+0x64>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <xQueueSemaphoreTake+0x68>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <xQueueSemaphoreTake+0x6a>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10b      	bne.n	8008b76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	61bb      	str	r3, [r7, #24]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b76:	f001 fbcf 	bl	800a318 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d024      	beq.n	8008bd0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	1e5a      	subs	r2, r3, #1
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b96:	f001 fa17 	bl	8009fc8 <pvTaskIncrementMutexHeldCount>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	3310      	adds	r3, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fe99 	bl	80098e4 <xTaskRemoveFromEventList>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bb8:	4b54      	ldr	r3, [pc, #336]	@ (8008d0c <xQueueSemaphoreTake+0x21c>)
 8008bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bc8:	f001 fbd8 	bl	800a37c <vPortExitCritical>
				return pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e098      	b.n	8008d02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d112      	bne.n	8008bfc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	617b      	str	r3, [r7, #20]
}
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
 8008bf2:	e7fd      	b.n	8008bf0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008bf4:	f001 fbc2 	bl	800a37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e082      	b.n	8008d02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c02:	f107 030c 	add.w	r3, r7, #12
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fed0 	bl	80099ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c10:	f001 fbb4 	bl	800a37c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c14:	f000 fc76 	bl	8009504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c18:	f001 fb7e 	bl	800a318 <vPortEnterCritical>
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d103      	bne.n	8008c32 <xQueueSemaphoreTake+0x142>
 8008c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c38:	b25b      	sxtb	r3, r3
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d103      	bne.n	8008c48 <xQueueSemaphoreTake+0x158>
 8008c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c48:	f001 fb98 	bl	800a37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c4c:	463a      	mov	r2, r7
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 febf 	bl	80099d8 <xTaskCheckForTimeOut>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d132      	bne.n	8008cc6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c62:	f000 f9d1 	bl	8009008 <prvIsQueueEmpty>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d026      	beq.n	8008cba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d109      	bne.n	8008c88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008c74:	f001 fb50 	bl	800a318 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 f815 	bl	8009cac <xTaskPriorityInherit>
 8008c82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008c84:	f001 fb7a 	bl	800a37c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	3324      	adds	r3, #36	@ 0x24
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fe01 	bl	8009898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c98:	f000 f964 	bl	8008f64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c9c:	f000 fc40 	bl	8009520 <xTaskResumeAll>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f47f af67 	bne.w	8008b76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008ca8:	4b18      	ldr	r3, [pc, #96]	@ (8008d0c <xQueueSemaphoreTake+0x21c>)
 8008caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	e75d      	b.n	8008b76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cbc:	f000 f952 	bl	8008f64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cc0:	f000 fc2e 	bl	8009520 <xTaskResumeAll>
 8008cc4:	e757      	b.n	8008b76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008cc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cc8:	f000 f94c 	bl	8008f64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ccc:	f000 fc28 	bl	8009520 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cd2:	f000 f999 	bl	8009008 <prvIsQueueEmpty>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f43f af4c 	beq.w	8008b76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00d      	beq.n	8008d00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008ce4:	f001 fb18 	bl	800a318 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008ce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cea:	f000 f893 	bl	8008e14 <prvGetDisinheritPriorityAfterTimeout>
 8008cee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 f8d6 	bl	8009ea8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008cfc:	f001 fb3e 	bl	800a37c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3738      	adds	r7, #56	@ 0x38
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	e000ed04 	.word	0xe000ed04

08008d10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08e      	sub	sp, #56	@ 0x38
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	623b      	str	r3, [r7, #32]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <xQueueReceiveFromISR+0x3c>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <xQueueReceiveFromISR+0x40>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <xQueueReceiveFromISR+0x42>
 8008d50:	2300      	movs	r3, #0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	61fb      	str	r3, [r7, #28]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d6e:	f001 fbb3 	bl	800a4d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008d72:	f3ef 8211 	mrs	r2, BASEPRI
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	61ba      	str	r2, [r7, #24]
 8008d88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d02f      	beq.n	8008dfa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008da8:	f000 f8b6 	bl	8008f18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	1e5a      	subs	r2, r3, #1
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008db4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d112      	bne.n	8008de4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d016      	beq.n	8008df4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	3310      	adds	r3, #16
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fd8a 	bl	80098e4 <xTaskRemoveFromEventList>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00e      	beq.n	8008df4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e007      	b.n	8008df4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de8:	3301      	adds	r3, #1
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	b25a      	sxtb	r2, r3
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008df4:	2301      	movs	r3, #1
 8008df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df8:	e001      	b.n	8008dfe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f383 8811 	msr	BASEPRI, r3
}
 8008e08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3738      	adds	r7, #56	@ 0x38
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1c3 0307 	rsb	r3, r3, #7
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	e001      	b.n	8008e36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e36:	68fb      	ldr	r3, [r7, #12]
	}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10d      	bne.n	8008e7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d14d      	bne.n	8008f06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 ff92 	bl	8009d98 <xTaskPriorityDisinherit>
 8008e74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	609a      	str	r2, [r3, #8]
 8008e7c:	e043      	b.n	8008f06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d119      	bne.n	8008eb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6858      	ldr	r0, [r3, #4]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	f001 fddc 	bl	800aa4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	441a      	add	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d32b      	bcc.n	8008f06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	e026      	b.n	8008f06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	68d8      	ldr	r0, [r3, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	f001 fdc2 	bl	800aa4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed0:	425b      	negs	r3, r3
 8008ed2:	441a      	add	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d207      	bcs.n	8008ef4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eec:	425b      	negs	r3, r3
 8008eee:	441a      	add	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d105      	bne.n	8008f06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f0e:	697b      	ldr	r3, [r7, #20]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d018      	beq.n	8008f5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	441a      	add	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d303      	bcc.n	8008f4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68d9      	ldr	r1, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	461a      	mov	r2, r3
 8008f56:	6838      	ldr	r0, [r7, #0]
 8008f58:	f001 fd78 	bl	800aa4c <memcpy>
	}
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f6c:	f001 f9d4 	bl	800a318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f78:	e011      	b.n	8008f9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d012      	beq.n	8008fa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3324      	adds	r3, #36	@ 0x24
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fcac 	bl	80098e4 <xTaskRemoveFromEventList>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f92:	f000 fd85 	bl	8009aa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dce9      	bgt.n	8008f7a <prvUnlockQueue+0x16>
 8008fa6:	e000      	b.n	8008faa <prvUnlockQueue+0x46>
					break;
 8008fa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	22ff      	movs	r2, #255	@ 0xff
 8008fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fb2:	f001 f9e3 	bl	800a37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fb6:	f001 f9af 	bl	800a318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fc2:	e011      	b.n	8008fe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d012      	beq.n	8008ff2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3310      	adds	r3, #16
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fc87 	bl	80098e4 <xTaskRemoveFromEventList>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fdc:	f000 fd60 	bl	8009aa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dce9      	bgt.n	8008fc4 <prvUnlockQueue+0x60>
 8008ff0:	e000      	b.n	8008ff4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ff2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	22ff      	movs	r2, #255	@ 0xff
 8008ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008ffc:	f001 f9be 	bl	800a37c <vPortExitCritical>
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009010:	f001 f982 	bl	800a318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e001      	b.n	8009026 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f001 f9a9 	bl	800a37c <vPortExitCritical>

	return xReturn;
 800902a:	68fb      	ldr	r3, [r7, #12]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800903c:	f001 f96c 	bl	800a318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009048:	429a      	cmp	r2, r3
 800904a:	d102      	bne.n	8009052 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	e001      	b.n	8009056 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009056:	f001 f991 	bl	800a37c <vPortExitCritical>

	return xReturn;
 800905a:	68fb      	ldr	r3, [r7, #12]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08e      	sub	sp, #56	@ 0x38
 8009068:	af04      	add	r7, sp, #16
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10b      	bne.n	8009090 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	623b      	str	r3, [r7, #32]
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	e7fd      	b.n	800908c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10b      	bne.n	80090ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	61fb      	str	r3, [r7, #28]
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090ae:	23a0      	movs	r3, #160	@ 0xa0
 80090b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80090b6:	d00b      	beq.n	80090d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	61bb      	str	r3, [r7, #24]
}
 80090ca:	bf00      	nop
 80090cc:	bf00      	nop
 80090ce:	e7fd      	b.n	80090cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01e      	beq.n	8009116 <xTaskCreateStatic+0xb2>
 80090d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01b      	beq.n	8009116 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090f0:	2300      	movs	r3, #0
 80090f2:	9303      	str	r3, [sp, #12]
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	f107 0314 	add.w	r3, r7, #20
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f851 	bl	80091b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800910e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009110:	f000 f8ee 	bl	80092f0 <prvAddNewTaskToReadyList>
 8009114:	e001      	b.n	800911a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800911a:	697b      	ldr	r3, [r7, #20]
	}
 800911c:	4618      	mov	r0, r3
 800911e:	3728      	adds	r7, #40	@ 0x28
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08c      	sub	sp, #48	@ 0x30
 8009128:	af04      	add	r7, sp, #16
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	4613      	mov	r3, r2
 8009132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4618      	mov	r0, r3
 800913a:	f001 fa0f 	bl	800a55c <pvPortMalloc>
 800913e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00e      	beq.n	8009164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009146:	20a0      	movs	r0, #160	@ 0xa0
 8009148:	f001 fa08 	bl	800a55c <pvPortMalloc>
 800914c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	631a      	str	r2, [r3, #48]	@ 0x30
 800915a:	e005      	b.n	8009168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800915c:	6978      	ldr	r0, [r7, #20]
 800915e:	f001 facb 	bl	800a6f8 <vPortFree>
 8009162:	e001      	b.n	8009168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009164:	2300      	movs	r3, #0
 8009166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d017      	beq.n	800919e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009176:	88fa      	ldrh	r2, [r7, #6]
 8009178:	2300      	movs	r3, #0
 800917a:	9303      	str	r3, [sp, #12]
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f80f 	bl	80091b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009192:	69f8      	ldr	r0, [r7, #28]
 8009194:	f000 f8ac 	bl	80092f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009198:	2301      	movs	r3, #1
 800919a:	61bb      	str	r3, [r7, #24]
 800919c:	e002      	b.n	80091a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091a4:	69bb      	ldr	r3, [r7, #24]
	}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3720      	adds	r7, #32
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
 80091bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80091c8:	3b01      	subs	r3, #1
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f023 0307 	bic.w	r3, r3, #7
 80091d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <prvInitialiseNewTask+0x4a>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	617b      	str	r3, [r7, #20]
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	e7fd      	b.n	80091f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01f      	beq.n	8009240 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009200:	2300      	movs	r3, #0
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	e012      	b.n	800922c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	4413      	add	r3, r2
 800920c:	7819      	ldrb	r1, [r3, #0]
 800920e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	3334      	adds	r3, #52	@ 0x34
 8009216:	460a      	mov	r2, r1
 8009218:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	3301      	adds	r3, #1
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b0f      	cmp	r3, #15
 8009230:	d9e9      	bls.n	8009206 <prvInitialiseNewTask+0x56>
 8009232:	e000      	b.n	8009236 <prvInitialiseNewTask+0x86>
			{
				break;
 8009234:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800923e:	e003      	b.n	8009248 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924a:	2b06      	cmp	r3, #6
 800924c:	d901      	bls.n	8009252 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800924e:	2306      	movs	r3, #6
 8009250:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009256:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800925c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	2200      	movs	r2, #0
 8009262:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	3304      	adds	r3, #4
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff f88d 	bl	8008388 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	3318      	adds	r3, #24
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff f888 	bl	8008388 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	f1c3 0207 	rsb	r2, r3, #7
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	2200      	movs	r2, #0
 800929a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	334c      	adds	r3, #76	@ 0x4c
 80092a2:	224c      	movs	r2, #76	@ 0x4c
 80092a4:	2100      	movs	r1, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fb46 	bl	800a938 <memset>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	4a0d      	ldr	r2, [pc, #52]	@ (80092e4 <prvInitialiseNewTask+0x134>)
 80092b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	4a0c      	ldr	r2, [pc, #48]	@ (80092e8 <prvInitialiseNewTask+0x138>)
 80092b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	4a0c      	ldr	r2, [pc, #48]	@ (80092ec <prvInitialiseNewTask+0x13c>)
 80092bc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	68f9      	ldr	r1, [r7, #12]
 80092c2:	69b8      	ldr	r0, [r7, #24]
 80092c4:	f000 fefa 	bl	800a0bc <pxPortInitialiseStack>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092da:	bf00      	nop
 80092dc:	3720      	adds	r7, #32
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	2000d74c 	.word	0x2000d74c
 80092e8:	2000d7b4 	.word	0x2000d7b4
 80092ec:	2000d81c 	.word	0x2000d81c

080092f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092f8:	f001 f80e 	bl	800a318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092fc:	4b2a      	ldr	r3, [pc, #168]	@ (80093a8 <prvAddNewTaskToReadyList+0xb8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3301      	adds	r3, #1
 8009302:	4a29      	ldr	r2, [pc, #164]	@ (80093a8 <prvAddNewTaskToReadyList+0xb8>)
 8009304:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009306:	4b29      	ldr	r3, [pc, #164]	@ (80093ac <prvAddNewTaskToReadyList+0xbc>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800930e:	4a27      	ldr	r2, [pc, #156]	@ (80093ac <prvAddNewTaskToReadyList+0xbc>)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009314:	4b24      	ldr	r3, [pc, #144]	@ (80093a8 <prvAddNewTaskToReadyList+0xb8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d110      	bne.n	800933e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800931c:	f000 fbe4 	bl	8009ae8 <prvInitialiseTaskLists>
 8009320:	e00d      	b.n	800933e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009322:	4b23      	ldr	r3, [pc, #140]	@ (80093b0 <prvAddNewTaskToReadyList+0xc0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800932a:	4b20      	ldr	r3, [pc, #128]	@ (80093ac <prvAddNewTaskToReadyList+0xbc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d802      	bhi.n	800933e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009338:	4a1c      	ldr	r2, [pc, #112]	@ (80093ac <prvAddNewTaskToReadyList+0xbc>)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800933e:	4b1d      	ldr	r3, [pc, #116]	@ (80093b4 <prvAddNewTaskToReadyList+0xc4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	4a1b      	ldr	r2, [pc, #108]	@ (80093b4 <prvAddNewTaskToReadyList+0xc4>)
 8009346:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	2201      	movs	r2, #1
 800934e:	409a      	lsls	r2, r3
 8009350:	4b19      	ldr	r3, [pc, #100]	@ (80093b8 <prvAddNewTaskToReadyList+0xc8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4313      	orrs	r3, r2
 8009356:	4a18      	ldr	r2, [pc, #96]	@ (80093b8 <prvAddNewTaskToReadyList+0xc8>)
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a15      	ldr	r2, [pc, #84]	@ (80093bc <prvAddNewTaskToReadyList+0xcc>)
 8009368:	441a      	add	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3304      	adds	r3, #4
 800936e:	4619      	mov	r1, r3
 8009370:	4610      	mov	r0, r2
 8009372:	f7ff f816 	bl	80083a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009376:	f001 f801 	bl	800a37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800937a:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <prvAddNewTaskToReadyList+0xc0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00e      	beq.n	80093a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009382:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <prvAddNewTaskToReadyList+0xbc>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938c:	429a      	cmp	r2, r3
 800938e:	d207      	bcs.n	80093a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009390:	4b0b      	ldr	r3, [pc, #44]	@ (80093c0 <prvAddNewTaskToReadyList+0xd0>)
 8009392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20009af8 	.word	0x20009af8
 80093ac:	200099f8 	.word	0x200099f8
 80093b0:	20009b04 	.word	0x20009b04
 80093b4:	20009b14 	.word	0x20009b14
 80093b8:	20009b00 	.word	0x20009b00
 80093bc:	200099fc 	.word	0x200099fc
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d018      	beq.n	8009408 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093d6:	4b14      	ldr	r3, [pc, #80]	@ (8009428 <vTaskDelay+0x64>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00b      	beq.n	80093f6 <vTaskDelay+0x32>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60bb      	str	r3, [r7, #8]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093f6:	f000 f885 	bl	8009504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093fa:	2100      	movs	r1, #0
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fdf7 	bl	8009ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009402:	f000 f88d 	bl	8009520 <xTaskResumeAll>
 8009406:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d107      	bne.n	800941e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800940e:	4b07      	ldr	r3, [pc, #28]	@ (800942c <vTaskDelay+0x68>)
 8009410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20009b20 	.word	0x20009b20
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08a      	sub	sp, #40	@ 0x28
 8009434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800943a:	2300      	movs	r3, #0
 800943c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800943e:	463a      	mov	r2, r7
 8009440:	1d39      	adds	r1, r7, #4
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	4618      	mov	r0, r3
 8009448:	f7f8 f802 	bl	8001450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	9202      	str	r2, [sp, #8]
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	2300      	movs	r3, #0
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	2300      	movs	r3, #0
 800945c:	460a      	mov	r2, r1
 800945e:	4921      	ldr	r1, [pc, #132]	@ (80094e4 <vTaskStartScheduler+0xb4>)
 8009460:	4821      	ldr	r0, [pc, #132]	@ (80094e8 <vTaskStartScheduler+0xb8>)
 8009462:	f7ff fdff 	bl	8009064 <xTaskCreateStatic>
 8009466:	4603      	mov	r3, r0
 8009468:	4a20      	ldr	r2, [pc, #128]	@ (80094ec <vTaskStartScheduler+0xbc>)
 800946a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800946c:	4b1f      	ldr	r3, [pc, #124]	@ (80094ec <vTaskStartScheduler+0xbc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009474:	2301      	movs	r3, #1
 8009476:	617b      	str	r3, [r7, #20]
 8009478:	e001      	b.n	800947e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d11b      	bne.n	80094bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	613b      	str	r3, [r7, #16]
}
 8009496:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009498:	4b15      	ldr	r3, [pc, #84]	@ (80094f0 <vTaskStartScheduler+0xc0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	334c      	adds	r3, #76	@ 0x4c
 800949e:	4a15      	ldr	r2, [pc, #84]	@ (80094f4 <vTaskStartScheduler+0xc4>)
 80094a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094a2:	4b15      	ldr	r3, [pc, #84]	@ (80094f8 <vTaskStartScheduler+0xc8>)
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094aa:	4b14      	ldr	r3, [pc, #80]	@ (80094fc <vTaskStartScheduler+0xcc>)
 80094ac:	2201      	movs	r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094b0:	4b13      	ldr	r3, [pc, #76]	@ (8009500 <vTaskStartScheduler+0xd0>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094b6:	f000 fe8b 	bl	800a1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094ba:	e00f      	b.n	80094dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	d10b      	bne.n	80094dc <vTaskStartScheduler+0xac>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	60fb      	str	r3, [r7, #12]
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	e7fd      	b.n	80094d8 <vTaskStartScheduler+0xa8>
}
 80094dc:	bf00      	nop
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	0800adf8 	.word	0x0800adf8
 80094e8:	08009ab9 	.word	0x08009ab9
 80094ec:	20009b1c 	.word	0x20009b1c
 80094f0:	200099f8 	.word	0x200099f8
 80094f4:	20006428 	.word	0x20006428
 80094f8:	20009b18 	.word	0x20009b18
 80094fc:	20009b04 	.word	0x20009b04
 8009500:	20009afc 	.word	0x20009afc

08009504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009508:	4b04      	ldr	r3, [pc, #16]	@ (800951c <vTaskSuspendAll+0x18>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	4a03      	ldr	r2, [pc, #12]	@ (800951c <vTaskSuspendAll+0x18>)
 8009510:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009512:	bf00      	nop
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20009b20 	.word	0x20009b20

08009520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800952e:	4b42      	ldr	r3, [pc, #264]	@ (8009638 <xTaskResumeAll+0x118>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10b      	bne.n	800954e <xTaskResumeAll+0x2e>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	603b      	str	r3, [r7, #0]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800954e:	f000 fee3 	bl	800a318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009552:	4b39      	ldr	r3, [pc, #228]	@ (8009638 <xTaskResumeAll+0x118>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3b01      	subs	r3, #1
 8009558:	4a37      	ldr	r2, [pc, #220]	@ (8009638 <xTaskResumeAll+0x118>)
 800955a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800955c:	4b36      	ldr	r3, [pc, #216]	@ (8009638 <xTaskResumeAll+0x118>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d161      	bne.n	8009628 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009564:	4b35      	ldr	r3, [pc, #212]	@ (800963c <xTaskResumeAll+0x11c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d05d      	beq.n	8009628 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800956c:	e02e      	b.n	80095cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956e:	4b34      	ldr	r3, [pc, #208]	@ (8009640 <xTaskResumeAll+0x120>)
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3318      	adds	r3, #24
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe ff6e 	bl	800845c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3304      	adds	r3, #4
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe ff69 	bl	800845c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958e:	2201      	movs	r2, #1
 8009590:	409a      	lsls	r2, r3
 8009592:	4b2c      	ldr	r3, [pc, #176]	@ (8009644 <xTaskResumeAll+0x124>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4313      	orrs	r3, r2
 8009598:	4a2a      	ldr	r2, [pc, #168]	@ (8009644 <xTaskResumeAll+0x124>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4a27      	ldr	r2, [pc, #156]	@ (8009648 <xTaskResumeAll+0x128>)
 80095aa:	441a      	add	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7fe fef5 	bl	80083a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095bc:	4b23      	ldr	r3, [pc, #140]	@ (800964c <xTaskResumeAll+0x12c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d302      	bcc.n	80095cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80095c6:	4b22      	ldr	r3, [pc, #136]	@ (8009650 <xTaskResumeAll+0x130>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009640 <xTaskResumeAll+0x120>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1cc      	bne.n	800956e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095da:	f000 fb29 	bl	8009c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095de:	4b1d      	ldr	r3, [pc, #116]	@ (8009654 <xTaskResumeAll+0x134>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d010      	beq.n	800960c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095ea:	f000 f837 	bl	800965c <xTaskIncrementTick>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095f4:	4b16      	ldr	r3, [pc, #88]	@ (8009650 <xTaskResumeAll+0x130>)
 80095f6:	2201      	movs	r2, #1
 80095f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f1      	bne.n	80095ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009606:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <xTaskResumeAll+0x134>)
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800960c:	4b10      	ldr	r3, [pc, #64]	@ (8009650 <xTaskResumeAll+0x130>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009618:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <xTaskResumeAll+0x138>)
 800961a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009628:	f000 fea8 	bl	800a37c <vPortExitCritical>

	return xAlreadyYielded;
 800962c:	68bb      	ldr	r3, [r7, #8]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20009b20 	.word	0x20009b20
 800963c:	20009af8 	.word	0x20009af8
 8009640:	20009ab8 	.word	0x20009ab8
 8009644:	20009b00 	.word	0x20009b00
 8009648:	200099fc 	.word	0x200099fc
 800964c:	200099f8 	.word	0x200099f8
 8009650:	20009b0c 	.word	0x20009b0c
 8009654:	20009b08 	.word	0x20009b08
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009662:	2300      	movs	r3, #0
 8009664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009666:	4b4f      	ldr	r3, [pc, #316]	@ (80097a4 <xTaskIncrementTick+0x148>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	f040 808f 	bne.w	800978e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009670:	4b4d      	ldr	r3, [pc, #308]	@ (80097a8 <xTaskIncrementTick+0x14c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3301      	adds	r3, #1
 8009676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009678:	4a4b      	ldr	r2, [pc, #300]	@ (80097a8 <xTaskIncrementTick+0x14c>)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d121      	bne.n	80096c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009684:	4b49      	ldr	r3, [pc, #292]	@ (80097ac <xTaskIncrementTick+0x150>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	603b      	str	r3, [r7, #0]
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	e7fd      	b.n	80096a2 <xTaskIncrementTick+0x46>
 80096a6:	4b41      	ldr	r3, [pc, #260]	@ (80097ac <xTaskIncrementTick+0x150>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	4b40      	ldr	r3, [pc, #256]	@ (80097b0 <xTaskIncrementTick+0x154>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a3e      	ldr	r2, [pc, #248]	@ (80097ac <xTaskIncrementTick+0x150>)
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	4a3e      	ldr	r2, [pc, #248]	@ (80097b0 <xTaskIncrementTick+0x154>)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	4b3e      	ldr	r3, [pc, #248]	@ (80097b4 <xTaskIncrementTick+0x158>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3301      	adds	r3, #1
 80096c0:	4a3c      	ldr	r2, [pc, #240]	@ (80097b4 <xTaskIncrementTick+0x158>)
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	f000 fab4 	bl	8009c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096c8:	4b3b      	ldr	r3, [pc, #236]	@ (80097b8 <xTaskIncrementTick+0x15c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d348      	bcc.n	8009764 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096d2:	4b36      	ldr	r3, [pc, #216]	@ (80097ac <xTaskIncrementTick+0x150>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096dc:	4b36      	ldr	r3, [pc, #216]	@ (80097b8 <xTaskIncrementTick+0x15c>)
 80096de:	f04f 32ff 	mov.w	r2, #4294967295
 80096e2:	601a      	str	r2, [r3, #0]
					break;
 80096e4:	e03e      	b.n	8009764 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e6:	4b31      	ldr	r3, [pc, #196]	@ (80097ac <xTaskIncrementTick+0x150>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d203      	bcs.n	8009706 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096fe:	4a2e      	ldr	r2, [pc, #184]	@ (80097b8 <xTaskIncrementTick+0x15c>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009704:	e02e      	b.n	8009764 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fea6 	bl	800845c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3318      	adds	r3, #24
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fe9d 	bl	800845c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	2201      	movs	r2, #1
 8009728:	409a      	lsls	r2, r3
 800972a:	4b24      	ldr	r3, [pc, #144]	@ (80097bc <xTaskIncrementTick+0x160>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4313      	orrs	r3, r2
 8009730:	4a22      	ldr	r2, [pc, #136]	@ (80097bc <xTaskIncrementTick+0x160>)
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4a1f      	ldr	r2, [pc, #124]	@ (80097c0 <xTaskIncrementTick+0x164>)
 8009742:	441a      	add	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fe fe29 	bl	80083a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009754:	4b1b      	ldr	r3, [pc, #108]	@ (80097c4 <xTaskIncrementTick+0x168>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975a:	429a      	cmp	r2, r3
 800975c:	d3b9      	bcc.n	80096d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800975e:	2301      	movs	r3, #1
 8009760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009762:	e7b6      	b.n	80096d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009764:	4b17      	ldr	r3, [pc, #92]	@ (80097c4 <xTaskIncrementTick+0x168>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800976a:	4915      	ldr	r1, [pc, #84]	@ (80097c0 <xTaskIncrementTick+0x164>)
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d901      	bls.n	8009780 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800977c:	2301      	movs	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009780:	4b11      	ldr	r3, [pc, #68]	@ (80097c8 <xTaskIncrementTick+0x16c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e004      	b.n	8009798 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800978e:	4b0f      	ldr	r3, [pc, #60]	@ (80097cc <xTaskIncrementTick+0x170>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	4a0d      	ldr	r2, [pc, #52]	@ (80097cc <xTaskIncrementTick+0x170>)
 8009796:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009798:	697b      	ldr	r3, [r7, #20]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20009b20 	.word	0x20009b20
 80097a8:	20009afc 	.word	0x20009afc
 80097ac:	20009ab0 	.word	0x20009ab0
 80097b0:	20009ab4 	.word	0x20009ab4
 80097b4:	20009b10 	.word	0x20009b10
 80097b8:	20009b18 	.word	0x20009b18
 80097bc:	20009b00 	.word	0x20009b00
 80097c0:	200099fc 	.word	0x200099fc
 80097c4:	200099f8 	.word	0x200099f8
 80097c8:	20009b0c 	.word	0x20009b0c
 80097cc:	20009b08 	.word	0x20009b08

080097d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009880 <vTaskSwitchContext+0xb0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097de:	4b29      	ldr	r3, [pc, #164]	@ (8009884 <vTaskSwitchContext+0xb4>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097e4:	e045      	b.n	8009872 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80097e6:	4b27      	ldr	r3, [pc, #156]	@ (8009884 <vTaskSwitchContext+0xb4>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ec:	4b26      	ldr	r3, [pc, #152]	@ (8009888 <vTaskSwitchContext+0xb8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	fab3 f383 	clz	r3, r3
 80097f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80097fa:	7afb      	ldrb	r3, [r7, #11]
 80097fc:	f1c3 031f 	rsb	r3, r3, #31
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	4922      	ldr	r1, [pc, #136]	@ (800988c <vTaskSwitchContext+0xbc>)
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <vTaskSwitchContext+0x5e>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	607b      	str	r3, [r7, #4]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <vTaskSwitchContext+0x5a>
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4a14      	ldr	r2, [pc, #80]	@ (800988c <vTaskSwitchContext+0xbc>)
 800983a:	4413      	add	r3, r2
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3308      	adds	r3, #8
 8009850:	429a      	cmp	r2, r3
 8009852:	d104      	bne.n	800985e <vTaskSwitchContext+0x8e>
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	4a0a      	ldr	r2, [pc, #40]	@ (8009890 <vTaskSwitchContext+0xc0>)
 8009866:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009868:	4b09      	ldr	r3, [pc, #36]	@ (8009890 <vTaskSwitchContext+0xc0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	334c      	adds	r3, #76	@ 0x4c
 800986e:	4a09      	ldr	r2, [pc, #36]	@ (8009894 <vTaskSwitchContext+0xc4>)
 8009870:	6013      	str	r3, [r2, #0]
}
 8009872:	bf00      	nop
 8009874:	371c      	adds	r7, #28
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20009b20 	.word	0x20009b20
 8009884:	20009b0c 	.word	0x20009b0c
 8009888:	20009b00 	.word	0x20009b00
 800988c:	200099fc 	.word	0x200099fc
 8009890:	200099f8 	.word	0x200099f8
 8009894:	20006428 	.word	0x20006428

08009898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10b      	bne.n	80098c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	60fb      	str	r3, [r7, #12]
}
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
 80098be:	e7fd      	b.n	80098bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098c0:	4b07      	ldr	r3, [pc, #28]	@ (80098e0 <vTaskPlaceOnEventList+0x48>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3318      	adds	r3, #24
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fe fd8e 	bl	80083ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098ce:	2101      	movs	r1, #1
 80098d0:	6838      	ldr	r0, [r7, #0]
 80098d2:	f000 fb8d 	bl	8009ff0 <prvAddCurrentTaskToDelayedList>
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	200099f8 	.word	0x200099f8

080098e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	60fb      	str	r3, [r7, #12]
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	e7fd      	b.n	800990e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3318      	adds	r3, #24
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fda0 	bl	800845c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800991c:	4b1d      	ldr	r3, [pc, #116]	@ (8009994 <xTaskRemoveFromEventList+0xb0>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d11c      	bne.n	800995e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3304      	adds	r3, #4
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fd97 	bl	800845c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009932:	2201      	movs	r2, #1
 8009934:	409a      	lsls	r2, r3
 8009936:	4b18      	ldr	r3, [pc, #96]	@ (8009998 <xTaskRemoveFromEventList+0xb4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4313      	orrs	r3, r2
 800993c:	4a16      	ldr	r2, [pc, #88]	@ (8009998 <xTaskRemoveFromEventList+0xb4>)
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4a13      	ldr	r2, [pc, #76]	@ (800999c <xTaskRemoveFromEventList+0xb8>)
 800994e:	441a      	add	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	3304      	adds	r3, #4
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f7fe fd23 	bl	80083a2 <vListInsertEnd>
 800995c:	e005      	b.n	800996a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	3318      	adds	r3, #24
 8009962:	4619      	mov	r1, r3
 8009964:	480e      	ldr	r0, [pc, #56]	@ (80099a0 <xTaskRemoveFromEventList+0xbc>)
 8009966:	f7fe fd1c 	bl	80083a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996e:	4b0d      	ldr	r3, [pc, #52]	@ (80099a4 <xTaskRemoveFromEventList+0xc0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009974:	429a      	cmp	r2, r3
 8009976:	d905      	bls.n	8009984 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009978:	2301      	movs	r3, #1
 800997a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800997c:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <xTaskRemoveFromEventList+0xc4>)
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	e001      	b.n	8009988 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009984:	2300      	movs	r3, #0
 8009986:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009988:	697b      	ldr	r3, [r7, #20]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20009b20 	.word	0x20009b20
 8009998:	20009b00 	.word	0x20009b00
 800999c:	200099fc 	.word	0x200099fc
 80099a0:	20009ab8 	.word	0x20009ab8
 80099a4:	200099f8 	.word	0x200099f8
 80099a8:	20009b0c 	.word	0x20009b0c

080099ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099b4:	4b06      	ldr	r3, [pc, #24]	@ (80099d0 <vTaskInternalSetTimeOutState+0x24>)
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099bc:	4b05      	ldr	r3, [pc, #20]	@ (80099d4 <vTaskInternalSetTimeOutState+0x28>)
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	605a      	str	r2, [r3, #4]
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20009b10 	.word	0x20009b10
 80099d4:	20009afc 	.word	0x20009afc

080099d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10b      	bne.n	8009a00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	613b      	str	r3, [r7, #16]
}
 80099fa:	bf00      	nop
 80099fc:	bf00      	nop
 80099fe:	e7fd      	b.n	80099fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10b      	bne.n	8009a1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	60fb      	str	r3, [r7, #12]
}
 8009a18:	bf00      	nop
 8009a1a:	bf00      	nop
 8009a1c:	e7fd      	b.n	8009a1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a1e:	f000 fc7b 	bl	800a318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a22:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <xTaskCheckForTimeOut+0xc0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3a:	d102      	bne.n	8009a42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
 8009a40:	e023      	b.n	8009a8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4b15      	ldr	r3, [pc, #84]	@ (8009a9c <xTaskCheckForTimeOut+0xc4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d007      	beq.n	8009a5e <xTaskCheckForTimeOut+0x86>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	69ba      	ldr	r2, [r7, #24]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d302      	bcc.n	8009a5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e015      	b.n	8009a8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d20b      	bcs.n	8009a80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff ff99 	bl	80099ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	e004      	b.n	8009a8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a86:	2301      	movs	r3, #1
 8009a88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a8a:	f000 fc77 	bl	800a37c <vPortExitCritical>

	return xReturn;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20009afc 	.word	0x20009afc
 8009a9c:	20009b10 	.word	0x20009b10

08009aa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009aa4:	4b03      	ldr	r3, [pc, #12]	@ (8009ab4 <vTaskMissedYield+0x14>)
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
}
 8009aaa:	bf00      	nop
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	20009b0c 	.word	0x20009b0c

08009ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ac0:	f000 f852 	bl	8009b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ac4:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <prvIdleTask+0x28>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d9f9      	bls.n	8009ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009acc:	4b05      	ldr	r3, [pc, #20]	@ (8009ae4 <prvIdleTask+0x2c>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009adc:	e7f0      	b.n	8009ac0 <prvIdleTask+0x8>
 8009ade:	bf00      	nop
 8009ae0:	200099fc 	.word	0x200099fc
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aee:	2300      	movs	r3, #0
 8009af0:	607b      	str	r3, [r7, #4]
 8009af2:	e00c      	b.n	8009b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4a12      	ldr	r2, [pc, #72]	@ (8009b48 <prvInitialiseTaskLists+0x60>)
 8009b00:	4413      	add	r3, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fc20 	bl	8008348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b06      	cmp	r3, #6
 8009b12:	d9ef      	bls.n	8009af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b14:	480d      	ldr	r0, [pc, #52]	@ (8009b4c <prvInitialiseTaskLists+0x64>)
 8009b16:	f7fe fc17 	bl	8008348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b1a:	480d      	ldr	r0, [pc, #52]	@ (8009b50 <prvInitialiseTaskLists+0x68>)
 8009b1c:	f7fe fc14 	bl	8008348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b20:	480c      	ldr	r0, [pc, #48]	@ (8009b54 <prvInitialiseTaskLists+0x6c>)
 8009b22:	f7fe fc11 	bl	8008348 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b26:	480c      	ldr	r0, [pc, #48]	@ (8009b58 <prvInitialiseTaskLists+0x70>)
 8009b28:	f7fe fc0e 	bl	8008348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b2c:	480b      	ldr	r0, [pc, #44]	@ (8009b5c <prvInitialiseTaskLists+0x74>)
 8009b2e:	f7fe fc0b 	bl	8008348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b32:	4b0b      	ldr	r3, [pc, #44]	@ (8009b60 <prvInitialiseTaskLists+0x78>)
 8009b34:	4a05      	ldr	r2, [pc, #20]	@ (8009b4c <prvInitialiseTaskLists+0x64>)
 8009b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b38:	4b0a      	ldr	r3, [pc, #40]	@ (8009b64 <prvInitialiseTaskLists+0x7c>)
 8009b3a:	4a05      	ldr	r2, [pc, #20]	@ (8009b50 <prvInitialiseTaskLists+0x68>)
 8009b3c:	601a      	str	r2, [r3, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200099fc 	.word	0x200099fc
 8009b4c:	20009a88 	.word	0x20009a88
 8009b50:	20009a9c 	.word	0x20009a9c
 8009b54:	20009ab8 	.word	0x20009ab8
 8009b58:	20009acc 	.word	0x20009acc
 8009b5c:	20009ae4 	.word	0x20009ae4
 8009b60:	20009ab0 	.word	0x20009ab0
 8009b64:	20009ab4 	.word	0x20009ab4

08009b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b6e:	e019      	b.n	8009ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b70:	f000 fbd2 	bl	800a318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b74:	4b10      	ldr	r3, [pc, #64]	@ (8009bb8 <prvCheckTasksWaitingTermination+0x50>)
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fc6b 	bl	800845c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <prvCheckTasksWaitingTermination+0x54>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8009bbc <prvCheckTasksWaitingTermination+0x54>)
 8009b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b90:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc0 <prvCheckTasksWaitingTermination+0x58>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	4a0a      	ldr	r2, [pc, #40]	@ (8009bc0 <prvCheckTasksWaitingTermination+0x58>)
 8009b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b9a:	f000 fbef 	bl	800a37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f810 	bl	8009bc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ba4:	4b06      	ldr	r3, [pc, #24]	@ (8009bc0 <prvCheckTasksWaitingTermination+0x58>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e1      	bne.n	8009b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20009acc 	.word	0x20009acc
 8009bbc:	20009af8 	.word	0x20009af8
 8009bc0:	20009ae0 	.word	0x20009ae0

08009bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	334c      	adds	r3, #76	@ 0x4c
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 feb9 	bl	800a948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d108      	bne.n	8009bf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fd87 	bl	800a6f8 <vPortFree>
				vPortFree( pxTCB );
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fd84 	bl	800a6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bf0:	e019      	b.n	8009c26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d103      	bne.n	8009c04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fd7b 	bl	800a6f8 <vPortFree>
	}
 8009c02:	e010      	b.n	8009c26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d00b      	beq.n	8009c26 <prvDeleteTCB+0x62>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60fb      	str	r3, [r7, #12]
}
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	e7fd      	b.n	8009c22 <prvDeleteTCB+0x5e>
	}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c36:	4b0c      	ldr	r3, [pc, #48]	@ (8009c68 <prvResetNextTaskUnblockTime+0x38>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c40:	4b0a      	ldr	r3, [pc, #40]	@ (8009c6c <prvResetNextTaskUnblockTime+0x3c>)
 8009c42:	f04f 32ff 	mov.w	r2, #4294967295
 8009c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c48:	e008      	b.n	8009c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c4a:	4b07      	ldr	r3, [pc, #28]	@ (8009c68 <prvResetNextTaskUnblockTime+0x38>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	4a04      	ldr	r2, [pc, #16]	@ (8009c6c <prvResetNextTaskUnblockTime+0x3c>)
 8009c5a:	6013      	str	r3, [r2, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20009ab0 	.word	0x20009ab0
 8009c6c:	20009b18 	.word	0x20009b18

08009c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <xTaskGetSchedulerState+0x34>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	607b      	str	r3, [r7, #4]
 8009c82:	e008      	b.n	8009c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c84:	4b08      	ldr	r3, [pc, #32]	@ (8009ca8 <xTaskGetSchedulerState+0x38>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d102      	bne.n	8009c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	e001      	b.n	8009c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c92:	2300      	movs	r3, #0
 8009c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c96:	687b      	ldr	r3, [r7, #4]
	}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20009b04 	.word	0x20009b04
 8009ca8:	20009b20 	.word	0x20009b20

08009cac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d05e      	beq.n	8009d80 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc6:	4b31      	ldr	r3, [pc, #196]	@ (8009d8c <xTaskPriorityInherit+0xe0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d24e      	bcs.n	8009d6e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	db06      	blt.n	8009ce6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8009d8c <xTaskPriorityInherit+0xe0>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cde:	f1c3 0207 	rsb	r2, r3, #7
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	6959      	ldr	r1, [r3, #20]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4a26      	ldr	r2, [pc, #152]	@ (8009d90 <xTaskPriorityInherit+0xe4>)
 8009cf8:	4413      	add	r3, r2
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	d12f      	bne.n	8009d5e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fbaa 	bl	800845c <uxListRemove>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d12:	2201      	movs	r2, #1
 8009d14:	fa02 f303 	lsl.w	r3, r2, r3
 8009d18:	43da      	mvns	r2, r3
 8009d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009d94 <xTaskPriorityInherit+0xe8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4013      	ands	r3, r2
 8009d20:	4a1c      	ldr	r2, [pc, #112]	@ (8009d94 <xTaskPriorityInherit+0xe8>)
 8009d22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d24:	4b19      	ldr	r3, [pc, #100]	@ (8009d8c <xTaskPriorityInherit+0xe0>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	2201      	movs	r2, #1
 8009d34:	409a      	lsls	r2, r3
 8009d36:	4b17      	ldr	r3, [pc, #92]	@ (8009d94 <xTaskPriorityInherit+0xe8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	4a15      	ldr	r2, [pc, #84]	@ (8009d94 <xTaskPriorityInherit+0xe8>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4a10      	ldr	r2, [pc, #64]	@ (8009d90 <xTaskPriorityInherit+0xe4>)
 8009d4e:	441a      	add	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3304      	adds	r3, #4
 8009d54:	4619      	mov	r1, r3
 8009d56:	4610      	mov	r0, r2
 8009d58:	f7fe fb23 	bl	80083a2 <vListInsertEnd>
 8009d5c:	e004      	b.n	8009d68 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d8c <xTaskPriorityInherit+0xe0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	e008      	b.n	8009d80 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d72:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <xTaskPriorityInherit+0xe0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d201      	bcs.n	8009d80 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d80:	68fb      	ldr	r3, [r7, #12]
	}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	200099f8 	.word	0x200099f8
 8009d90:	200099fc 	.word	0x200099fc
 8009d94:	20009b00 	.word	0x20009b00

08009d98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d070      	beq.n	8009e90 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dae:	4b3b      	ldr	r3, [pc, #236]	@ (8009e9c <xTaskPriorityDisinherit+0x104>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d00b      	beq.n	8009dd0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10b      	bne.n	8009df0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60bb      	str	r3, [r7, #8]
}
 8009dea:	bf00      	nop
 8009dec:	bf00      	nop
 8009dee:	e7fd      	b.n	8009dec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df4:	1e5a      	subs	r2, r3, #1
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d044      	beq.n	8009e90 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d140      	bne.n	8009e90 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	3304      	adds	r3, #4
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe fb22 	bl	800845c <uxListRemove>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d115      	bne.n	8009e4a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e22:	491f      	ldr	r1, [pc, #124]	@ (8009ea0 <xTaskPriorityDisinherit+0x108>)
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	440b      	add	r3, r1
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <xTaskPriorityDisinherit+0xb2>
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	2201      	movs	r2, #1
 8009e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3e:	43da      	mvns	r2, r3
 8009e40:	4b18      	ldr	r3, [pc, #96]	@ (8009ea4 <xTaskPriorityDisinherit+0x10c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4013      	ands	r3, r2
 8009e46:	4a17      	ldr	r2, [pc, #92]	@ (8009ea4 <xTaskPriorityDisinherit+0x10c>)
 8009e48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	f1c3 0207 	rsb	r2, r3, #7
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	2201      	movs	r2, #1
 8009e64:	409a      	lsls	r2, r3
 8009e66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea4 <xTaskPriorityDisinherit+0x10c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ea4 <xTaskPriorityDisinherit+0x10c>)
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4a08      	ldr	r2, [pc, #32]	@ (8009ea0 <xTaskPriorityDisinherit+0x108>)
 8009e7e:	441a      	add	r2, r3
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f7fe fa8b 	bl	80083a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e90:	697b      	ldr	r3, [r7, #20]
	}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200099f8 	.word	0x200099f8
 8009ea0:	200099fc 	.word	0x200099fc
 8009ea4:	20009b00 	.word	0x20009b00

08009ea8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d079      	beq.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10b      	bne.n	8009ee0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	e7fd      	b.n	8009edc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d902      	bls.n	8009ef0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	61fb      	str	r3, [r7, #28]
 8009eee:	e002      	b.n	8009ef6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d059      	beq.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d154      	bne.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fbc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d10b      	bne.n	8009f2c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	60bb      	str	r3, [r7, #8]
}
 8009f26:	bf00      	nop
 8009f28:	bf00      	nop
 8009f2a:	e7fd      	b.n	8009f28 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	db04      	blt.n	8009f4a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f1c3 0207 	rsb	r2, r3, #7
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	6959      	ldr	r1, [r3, #20]
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4a19      	ldr	r2, [pc, #100]	@ (8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009f5a:	4413      	add	r3, r2
 8009f5c:	4299      	cmp	r1, r3
 8009f5e:	d129      	bne.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fa79 	bl	800845c <uxListRemove>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	2201      	movs	r2, #1
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	43da      	mvns	r2, r3
 8009f7c:	4b11      	ldr	r3, [pc, #68]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4013      	ands	r3, r2
 8009f82:	4a10      	ldr	r2, [pc, #64]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	409a      	lsls	r2, r3
 8009f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	4a0b      	ldr	r2, [pc, #44]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4a06      	ldr	r2, [pc, #24]	@ (8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fa6:	441a      	add	r2, r3
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f7fe f9f7 	bl	80083a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fb4:	bf00      	nop
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	200099f8 	.word	0x200099f8
 8009fc0:	200099fc 	.word	0x200099fc
 8009fc4:	20009b00 	.word	0x20009b00

08009fc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fcc:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <pvTaskIncrementMutexHeldCount+0x24>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <pvTaskIncrementMutexHeldCount+0x24>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fda:	3201      	adds	r2, #1
 8009fdc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009fde:	4b03      	ldr	r3, [pc, #12]	@ (8009fec <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
	}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	200099f8 	.word	0x200099f8

08009ff0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ffa:	4b29      	ldr	r3, [pc, #164]	@ (800a0a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a000:	4b28      	ldr	r3, [pc, #160]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3304      	adds	r3, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fa28 	bl	800845c <uxListRemove>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a012:	4b24      	ldr	r3, [pc, #144]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a018:	2201      	movs	r2, #1
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43da      	mvns	r2, r3
 800a020:	4b21      	ldr	r3, [pc, #132]	@ (800a0a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4013      	ands	r3, r2
 800a026:	4a20      	ldr	r2, [pc, #128]	@ (800a0a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a028:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a030:	d10a      	bne.n	800a048 <prvAddCurrentTaskToDelayedList+0x58>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d007      	beq.n	800a048 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a038:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	481a      	ldr	r0, [pc, #104]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800a042:	f7fe f9ae 	bl	80083a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a046:	e026      	b.n	800a096 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a050:	4b14      	ldr	r3, [pc, #80]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d209      	bcs.n	800a074 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a060:	4b13      	ldr	r3, [pc, #76]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3304      	adds	r3, #4
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7fe f9bc 	bl	80083ea <vListInsert>
}
 800a072:	e010      	b.n	800a096 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a074:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fe f9b2 	bl	80083ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a086:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d202      	bcs.n	800a096 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a090:	4a09      	ldr	r2, [pc, #36]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6013      	str	r3, [r2, #0]
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20009afc 	.word	0x20009afc
 800a0a4:	200099f8 	.word	0x200099f8
 800a0a8:	20009b00 	.word	0x20009b00
 800a0ac:	20009ae4 	.word	0x20009ae4
 800a0b0:	20009ab4 	.word	0x20009ab4
 800a0b4:	20009ab0 	.word	0x20009ab0
 800a0b8:	20009b18 	.word	0x20009b18

0800a0bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3b04      	subs	r3, #4
 800a0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f023 0201 	bic.w	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800a120 <pxPortInitialiseStack+0x64>)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b14      	subs	r3, #20
 800a0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b04      	subs	r3, #4
 800a102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f06f 0202 	mvn.w	r2, #2
 800a10a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3b20      	subs	r3, #32
 800a110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a112:	68fb      	ldr	r3, [r7, #12]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	0800a125 	.word	0x0800a125

0800a124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a12e:	4b13      	ldr	r3, [pc, #76]	@ (800a17c <prvTaskExitError+0x58>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d00b      	beq.n	800a150 <prvTaskExitError+0x2c>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	60fb      	str	r3, [r7, #12]
}
 800a14a:	bf00      	nop
 800a14c:	bf00      	nop
 800a14e:	e7fd      	b.n	800a14c <prvTaskExitError+0x28>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60bb      	str	r3, [r7, #8]
}
 800a162:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a164:	bf00      	nop
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d0fc      	beq.n	800a166 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a16c:	bf00      	nop
 800a16e:	bf00      	nop
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20006424 	.word	0x20006424

0800a180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	4770      	bx	lr
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	200099f8 	.word	0x200099f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1a8:	4808      	ldr	r0, [pc, #32]	@ (800a1cc <prvPortStartFirstTask+0x24>)
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	f380 8808 	msr	MSP, r0
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8814 	msr	CONTROL, r0
 800a1ba:	b662      	cpsie	i
 800a1bc:	b661      	cpsie	f
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	df00      	svc	0
 800a1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed08 	.word	0xe000ed08

0800a1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1d6:	4b47      	ldr	r3, [pc, #284]	@ (800a2f4 <xPortStartScheduler+0x124>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a47      	ldr	r2, [pc, #284]	@ (800a2f8 <xPortStartScheduler+0x128>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d10b      	bne.n	800a1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	613b      	str	r3, [r7, #16]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2f4 <xPortStartScheduler+0x124>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a2fc <xPortStartScheduler+0x12c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d10b      	bne.n	800a21a <xPortStartScheduler+0x4a>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	60fb      	str	r3, [r7, #12]
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	e7fd      	b.n	800a216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a21a:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <xPortStartScheduler+0x130>)
 800a21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	22ff      	movs	r2, #255	@ 0xff
 800a22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	4b31      	ldr	r3, [pc, #196]	@ (800a304 <xPortStartScheduler+0x134>)
 800a240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a242:	4b31      	ldr	r3, [pc, #196]	@ (800a308 <xPortStartScheduler+0x138>)
 800a244:	2207      	movs	r2, #7
 800a246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a248:	e009      	b.n	800a25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a24a:	4b2f      	ldr	r3, [pc, #188]	@ (800a308 <xPortStartScheduler+0x138>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3b01      	subs	r3, #1
 800a250:	4a2d      	ldr	r2, [pc, #180]	@ (800a308 <xPortStartScheduler+0x138>)
 800a252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a266:	2b80      	cmp	r3, #128	@ 0x80
 800a268:	d0ef      	beq.n	800a24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a26a:	4b27      	ldr	r3, [pc, #156]	@ (800a308 <xPortStartScheduler+0x138>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f1c3 0307 	rsb	r3, r3, #7
 800a272:	2b04      	cmp	r3, #4
 800a274:	d00b      	beq.n	800a28e <xPortStartScheduler+0xbe>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60bb      	str	r3, [r7, #8]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a28e:	4b1e      	ldr	r3, [pc, #120]	@ (800a308 <xPortStartScheduler+0x138>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	4a1c      	ldr	r2, [pc, #112]	@ (800a308 <xPortStartScheduler+0x138>)
 800a296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a298:	4b1b      	ldr	r3, [pc, #108]	@ (800a308 <xPortStartScheduler+0x138>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2a0:	4a19      	ldr	r2, [pc, #100]	@ (800a308 <xPortStartScheduler+0x138>)
 800a2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2ac:	4b17      	ldr	r3, [pc, #92]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a16      	ldr	r2, [pc, #88]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2b8:	4b14      	ldr	r3, [pc, #80]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a13      	ldr	r2, [pc, #76]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2c4:	f000 f8da 	bl	800a47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2c8:	4b11      	ldr	r3, [pc, #68]	@ (800a310 <xPortStartScheduler+0x140>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2ce:	f000 f8f9 	bl	800a4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2d2:	4b10      	ldr	r3, [pc, #64]	@ (800a314 <xPortStartScheduler+0x144>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a314 <xPortStartScheduler+0x144>)
 800a2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2de:	f7ff ff63 	bl	800a1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2e2:	f7ff fa75 	bl	80097d0 <vTaskSwitchContext>
	prvTaskExitError();
 800a2e6:	f7ff ff1d 	bl	800a124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	e000ed00 	.word	0xe000ed00
 800a2f8:	410fc271 	.word	0x410fc271
 800a2fc:	410fc270 	.word	0x410fc270
 800a300:	e000e400 	.word	0xe000e400
 800a304:	20009b24 	.word	0x20009b24
 800a308:	20009b28 	.word	0x20009b28
 800a30c:	e000ed20 	.word	0xe000ed20
 800a310:	20006424 	.word	0x20006424
 800a314:	e000ef34 	.word	0xe000ef34

0800a318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	607b      	str	r3, [r7, #4]
}
 800a330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a332:	4b10      	ldr	r3, [pc, #64]	@ (800a374 <vPortEnterCritical+0x5c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	4a0e      	ldr	r2, [pc, #56]	@ (800a374 <vPortEnterCritical+0x5c>)
 800a33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a33c:	4b0d      	ldr	r3, [pc, #52]	@ (800a374 <vPortEnterCritical+0x5c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d110      	bne.n	800a366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a344:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <vPortEnterCritical+0x60>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00b      	beq.n	800a366 <vPortEnterCritical+0x4e>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	603b      	str	r3, [r7, #0]
}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	e7fd      	b.n	800a362 <vPortEnterCritical+0x4a>
	}
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20006424 	.word	0x20006424
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a382:	4b12      	ldr	r3, [pc, #72]	@ (800a3cc <vPortExitCritical+0x50>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <vPortExitCritical+0x26>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	607b      	str	r3, [r7, #4]
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	e7fd      	b.n	800a39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <vPortExitCritical+0x50>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	4a08      	ldr	r2, [pc, #32]	@ (800a3cc <vPortExitCritical+0x50>)
 800a3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3ac:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <vPortExitCritical+0x50>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d105      	bne.n	800a3c0 <vPortExitCritical+0x44>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	20006424 	.word	0x20006424

0800a3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3d0:	f3ef 8009 	mrs	r0, PSP
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4b15      	ldr	r3, [pc, #84]	@ (800a430 <pxCurrentTCBConst>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	f01e 0f10 	tst.w	lr, #16
 800a3e0:	bf08      	it	eq
 800a3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3f4:	f380 8811 	msr	BASEPRI, r0
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f7ff f9e6 	bl	80097d0 <vTaskSwitchContext>
 800a404:	f04f 0000 	mov.w	r0, #0
 800a408:	f380 8811 	msr	BASEPRI, r0
 800a40c:	bc09      	pop	{r0, r3}
 800a40e:	6819      	ldr	r1, [r3, #0]
 800a410:	6808      	ldr	r0, [r1, #0]
 800a412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a416:	f01e 0f10 	tst.w	lr, #16
 800a41a:	bf08      	it	eq
 800a41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a420:	f380 8809 	msr	PSP, r0
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	f3af 8000 	nop.w

0800a430 <pxCurrentTCBConst>:
 800a430:	200099f8 	.word	0x200099f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop

0800a438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	607b      	str	r3, [r7, #4]
}
 800a450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a452:	f7ff f903 	bl	800965c <xTaskIncrementTick>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a45c:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <SysTick_Handler+0x40>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	2300      	movs	r3, #0
 800a466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f383 8811 	msr	BASEPRI, r3
}
 800a46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a480:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b0 <vPortSetupTimerInterrupt+0x34>)
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a486:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <vPortSetupTimerInterrupt+0x38>)
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <vPortSetupTimerInterrupt+0x3c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <vPortSetupTimerInterrupt+0x40>)
 800a492:	fba2 2303 	umull	r2, r3, r2, r3
 800a496:	099b      	lsrs	r3, r3, #6
 800a498:	4a09      	ldr	r2, [pc, #36]	@ (800a4c0 <vPortSetupTimerInterrupt+0x44>)
 800a49a:	3b01      	subs	r3, #1
 800a49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a49e:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <vPortSetupTimerInterrupt+0x34>)
 800a4a0:	2207      	movs	r2, #7
 800a4a2:	601a      	str	r2, [r3, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	e000e010 	.word	0xe000e010
 800a4b4:	e000e018 	.word	0xe000e018
 800a4b8:	20000000 	.word	0x20000000
 800a4bc:	10624dd3 	.word	0x10624dd3
 800a4c0:	e000e014 	.word	0xe000e014

0800a4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4d4 <vPortEnableVFP+0x10>
 800a4c8:	6801      	ldr	r1, [r0, #0]
 800a4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4ce:	6001      	str	r1, [r0, #0]
 800a4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4d2:	bf00      	nop
 800a4d4:	e000ed88 	.word	0xe000ed88

0800a4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4de:	f3ef 8305 	mrs	r3, IPSR
 800a4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b0f      	cmp	r3, #15
 800a4e8:	d915      	bls.n	800a516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ea:	4a18      	ldr	r2, [pc, #96]	@ (800a54c <vPortValidateInterruptPriority+0x74>)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4f4:	4b16      	ldr	r3, [pc, #88]	@ (800a550 <vPortValidateInterruptPriority+0x78>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	7afa      	ldrb	r2, [r7, #11]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20b      	bcs.n	800a516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	607b      	str	r3, [r7, #4]
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	e7fd      	b.n	800a512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a516:	4b0f      	ldr	r3, [pc, #60]	@ (800a554 <vPortValidateInterruptPriority+0x7c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a51e:	4b0e      	ldr	r3, [pc, #56]	@ (800a558 <vPortValidateInterruptPriority+0x80>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	429a      	cmp	r2, r3
 800a524:	d90b      	bls.n	800a53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	603b      	str	r3, [r7, #0]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vPortValidateInterruptPriority+0x62>
	}
 800a53e:	bf00      	nop
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	e000e3f0 	.word	0xe000e3f0
 800a550:	20009b24 	.word	0x20009b24
 800a554:	e000ed0c 	.word	0xe000ed0c
 800a558:	20009b28 	.word	0x20009b28

0800a55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08a      	sub	sp, #40	@ 0x28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a564:	2300      	movs	r3, #0
 800a566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a568:	f7fe ffcc 	bl	8009504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a56c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6e0 <pvPortMalloc+0x184>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a574:	f000 f924 	bl	800a7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a578:	4b5a      	ldr	r3, [pc, #360]	@ (800a6e4 <pvPortMalloc+0x188>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 8095 	bne.w	800a6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d01e      	beq.n	800a5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a58c:	2208      	movs	r2, #8
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d015      	beq.n	800a5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f023 0307 	bic.w	r3, r3, #7
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <pvPortMalloc+0x6e>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	617b      	str	r3, [r7, #20]
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d06f      	beq.n	800a6b0 <pvPortMalloc+0x154>
 800a5d0:	4b45      	ldr	r3, [pc, #276]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d86a      	bhi.n	800a6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5da:	4b44      	ldr	r3, [pc, #272]	@ (800a6ec <pvPortMalloc+0x190>)
 800a5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5de:	4b43      	ldr	r3, [pc, #268]	@ (800a6ec <pvPortMalloc+0x190>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5e4:	e004      	b.n	800a5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d903      	bls.n	800a602 <pvPortMalloc+0xa6>
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f1      	bne.n	800a5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a602:	4b37      	ldr	r3, [pc, #220]	@ (800a6e0 <pvPortMalloc+0x184>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a608:	429a      	cmp	r2, r3
 800a60a:	d051      	beq.n	800a6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a60c:	6a3b      	ldr	r3, [r7, #32]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2208      	movs	r2, #8
 800a612:	4413      	add	r3, r2
 800a614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	1ad2      	subs	r2, r2, r3
 800a626:	2308      	movs	r3, #8
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d920      	bls.n	800a670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4413      	add	r3, r2
 800a634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <pvPortMalloc+0xfc>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	613b      	str	r3, [r7, #16]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a66a:	69b8      	ldr	r0, [r7, #24]
 800a66c:	f000 f90a 	bl	800a884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a670:	4b1d      	ldr	r3, [pc, #116]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a67e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f0 <pvPortMalloc+0x194>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d203      	bcs.n	800a692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a68a:	4b17      	ldr	r3, [pc, #92]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <pvPortMalloc+0x194>)
 800a690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4b13      	ldr	r3, [pc, #76]	@ (800a6e4 <pvPortMalloc+0x188>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6a6:	4b13      	ldr	r3, [pc, #76]	@ (800a6f4 <pvPortMalloc+0x198>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	4a11      	ldr	r2, [pc, #68]	@ (800a6f4 <pvPortMalloc+0x198>)
 800a6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6b0:	f7fe ff36 	bl	8009520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	60fb      	str	r3, [r7, #12]
}
 800a6d0:	bf00      	nop
 800a6d2:	bf00      	nop
 800a6d4:	e7fd      	b.n	800a6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3728      	adds	r7, #40	@ 0x28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	2000d734 	.word	0x2000d734
 800a6e4:	2000d748 	.word	0x2000d748
 800a6e8:	2000d738 	.word	0x2000d738
 800a6ec:	2000d72c 	.word	0x2000d72c
 800a6f0:	2000d73c 	.word	0x2000d73c
 800a6f4:	2000d740 	.word	0x2000d740

0800a6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d04f      	beq.n	800a7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a70a:	2308      	movs	r3, #8
 800a70c:	425b      	negs	r3, r3
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4413      	add	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	4b25      	ldr	r3, [pc, #148]	@ (800a7b4 <vPortFree+0xbc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4013      	ands	r3, r2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <vPortFree+0x46>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	60fb      	str	r3, [r7, #12]
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	e7fd      	b.n	800a73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <vPortFree+0x66>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60bb      	str	r3, [r7, #8]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	4b14      	ldr	r3, [pc, #80]	@ (800a7b4 <vPortFree+0xbc>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4013      	ands	r3, r2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01e      	beq.n	800a7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11a      	bne.n	800a7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b4 <vPortFree+0xbc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	43db      	mvns	r3, r3
 800a77e:	401a      	ands	r2, r3
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a784:	f7fe febe 	bl	8009504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <vPortFree+0xc0>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4413      	add	r3, r2
 800a792:	4a09      	ldr	r2, [pc, #36]	@ (800a7b8 <vPortFree+0xc0>)
 800a794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a796:	6938      	ldr	r0, [r7, #16]
 800a798:	f000 f874 	bl	800a884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a79c:	4b07      	ldr	r3, [pc, #28]	@ (800a7bc <vPortFree+0xc4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	4a06      	ldr	r2, [pc, #24]	@ (800a7bc <vPortFree+0xc4>)
 800a7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7a6:	f7fe febb 	bl	8009520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7aa:	bf00      	nop
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	2000d748 	.word	0x2000d748
 800a7b8:	2000d738 	.word	0x2000d738
 800a7bc:	2000d744 	.word	0x2000d744

0800a7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7cc:	4b27      	ldr	r3, [pc, #156]	@ (800a86c <prvHeapInit+0xac>)
 800a7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00c      	beq.n	800a7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0307 	bic.w	r3, r3, #7
 800a7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a86c <prvHeapInit+0xac>)
 800a7f0:	4413      	add	r3, r2
 800a7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a870 <prvHeapInit+0xb0>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a870 <prvHeapInit+0xb0>)
 800a800:	2200      	movs	r2, #0
 800a802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4413      	add	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a80c:	2208      	movs	r2, #8
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0307 	bic.w	r3, r3, #7
 800a81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4a15      	ldr	r2, [pc, #84]	@ (800a874 <prvHeapInit+0xb4>)
 800a820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a822:	4b14      	ldr	r3, [pc, #80]	@ (800a874 <prvHeapInit+0xb4>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2200      	movs	r2, #0
 800a828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a82a:	4b12      	ldr	r3, [pc, #72]	@ (800a874 <prvHeapInit+0xb4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a840:	4b0c      	ldr	r3, [pc, #48]	@ (800a874 <prvHeapInit+0xb4>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4a0a      	ldr	r2, [pc, #40]	@ (800a878 <prvHeapInit+0xb8>)
 800a84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4a09      	ldr	r2, [pc, #36]	@ (800a87c <prvHeapInit+0xbc>)
 800a856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a858:	4b09      	ldr	r3, [pc, #36]	@ (800a880 <prvHeapInit+0xc0>)
 800a85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a85e:	601a      	str	r2, [r3, #0]
}
 800a860:	bf00      	nop
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	20009b2c 	.word	0x20009b2c
 800a870:	2000d72c 	.word	0x2000d72c
 800a874:	2000d734 	.word	0x2000d734
 800a878:	2000d73c 	.word	0x2000d73c
 800a87c:	2000d738 	.word	0x2000d738
 800a880:	2000d748 	.word	0x2000d748

0800a884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a88c:	4b28      	ldr	r3, [pc, #160]	@ (800a930 <prvInsertBlockIntoFreeList+0xac>)
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	e002      	b.n	800a898 <prvInsertBlockIntoFreeList+0x14>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d8f7      	bhi.n	800a892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d108      	bne.n	800a8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	441a      	add	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d118      	bne.n	800a90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	4b15      	ldr	r3, [pc, #84]	@ (800a934 <prvInsertBlockIntoFreeList+0xb0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d00d      	beq.n	800a902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	441a      	add	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e008      	b.n	800a914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a902:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <prvInsertBlockIntoFreeList+0xb0>)
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e003      	b.n	800a914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d002      	beq.n	800a922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	2000d72c 	.word	0x2000d72c
 800a934:	2000d734 	.word	0x2000d734

0800a938 <memset>:
 800a938:	4402      	add	r2, r0
 800a93a:	4603      	mov	r3, r0
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d100      	bne.n	800a942 <memset+0xa>
 800a940:	4770      	bx	lr
 800a942:	f803 1b01 	strb.w	r1, [r3], #1
 800a946:	e7f9      	b.n	800a93c <memset+0x4>

0800a948 <_reclaim_reent>:
 800a948:	4b29      	ldr	r3, [pc, #164]	@ (800a9f0 <_reclaim_reent+0xa8>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4283      	cmp	r3, r0
 800a94e:	b570      	push	{r4, r5, r6, lr}
 800a950:	4604      	mov	r4, r0
 800a952:	d04b      	beq.n	800a9ec <_reclaim_reent+0xa4>
 800a954:	69c3      	ldr	r3, [r0, #28]
 800a956:	b1ab      	cbz	r3, 800a984 <_reclaim_reent+0x3c>
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	b16b      	cbz	r3, 800a978 <_reclaim_reent+0x30>
 800a95c:	2500      	movs	r5, #0
 800a95e:	69e3      	ldr	r3, [r4, #28]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	5959      	ldr	r1, [r3, r5]
 800a964:	2900      	cmp	r1, #0
 800a966:	d13b      	bne.n	800a9e0 <_reclaim_reent+0x98>
 800a968:	3504      	adds	r5, #4
 800a96a:	2d80      	cmp	r5, #128	@ 0x80
 800a96c:	d1f7      	bne.n	800a95e <_reclaim_reent+0x16>
 800a96e:	69e3      	ldr	r3, [r4, #28]
 800a970:	4620      	mov	r0, r4
 800a972:	68d9      	ldr	r1, [r3, #12]
 800a974:	f000 f878 	bl	800aa68 <_free_r>
 800a978:	69e3      	ldr	r3, [r4, #28]
 800a97a:	6819      	ldr	r1, [r3, #0]
 800a97c:	b111      	cbz	r1, 800a984 <_reclaim_reent+0x3c>
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 f872 	bl	800aa68 <_free_r>
 800a984:	6961      	ldr	r1, [r4, #20]
 800a986:	b111      	cbz	r1, 800a98e <_reclaim_reent+0x46>
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 f86d 	bl	800aa68 <_free_r>
 800a98e:	69e1      	ldr	r1, [r4, #28]
 800a990:	b111      	cbz	r1, 800a998 <_reclaim_reent+0x50>
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f868 	bl	800aa68 <_free_r>
 800a998:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a99a:	b111      	cbz	r1, 800a9a2 <_reclaim_reent+0x5a>
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f863 	bl	800aa68 <_free_r>
 800a9a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9a4:	b111      	cbz	r1, 800a9ac <_reclaim_reent+0x64>
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f85e 	bl	800aa68 <_free_r>
 800a9ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a9ae:	b111      	cbz	r1, 800a9b6 <_reclaim_reent+0x6e>
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f000 f859 	bl	800aa68 <_free_r>
 800a9b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a9b8:	b111      	cbz	r1, 800a9c0 <_reclaim_reent+0x78>
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 f854 	bl	800aa68 <_free_r>
 800a9c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a9c2:	b111      	cbz	r1, 800a9ca <_reclaim_reent+0x82>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 f84f 	bl	800aa68 <_free_r>
 800a9ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a9cc:	b111      	cbz	r1, 800a9d4 <_reclaim_reent+0x8c>
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 f84a 	bl	800aa68 <_free_r>
 800a9d4:	6a23      	ldr	r3, [r4, #32]
 800a9d6:	b14b      	cbz	r3, 800a9ec <_reclaim_reent+0xa4>
 800a9d8:	4620      	mov	r0, r4
 800a9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9de:	4718      	bx	r3
 800a9e0:	680e      	ldr	r6, [r1, #0]
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 f840 	bl	800aa68 <_free_r>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	e7bb      	b.n	800a964 <_reclaim_reent+0x1c>
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20006428 	.word	0x20006428

0800a9f4 <__errno>:
 800a9f4:	4b01      	ldr	r3, [pc, #4]	@ (800a9fc <__errno+0x8>)
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	20006428 	.word	0x20006428

0800aa00 <__libc_init_array>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	4d0d      	ldr	r5, [pc, #52]	@ (800aa38 <__libc_init_array+0x38>)
 800aa04:	4c0d      	ldr	r4, [pc, #52]	@ (800aa3c <__libc_init_array+0x3c>)
 800aa06:	1b64      	subs	r4, r4, r5
 800aa08:	10a4      	asrs	r4, r4, #2
 800aa0a:	2600      	movs	r6, #0
 800aa0c:	42a6      	cmp	r6, r4
 800aa0e:	d109      	bne.n	800aa24 <__libc_init_array+0x24>
 800aa10:	4d0b      	ldr	r5, [pc, #44]	@ (800aa40 <__libc_init_array+0x40>)
 800aa12:	4c0c      	ldr	r4, [pc, #48]	@ (800aa44 <__libc_init_array+0x44>)
 800aa14:	f000 f9b6 	bl	800ad84 <_init>
 800aa18:	1b64      	subs	r4, r4, r5
 800aa1a:	10a4      	asrs	r4, r4, #2
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	42a6      	cmp	r6, r4
 800aa20:	d105      	bne.n	800aa2e <__libc_init_array+0x2e>
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
 800aa24:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa28:	4798      	blx	r3
 800aa2a:	3601      	adds	r6, #1
 800aa2c:	e7ee      	b.n	800aa0c <__libc_init_array+0xc>
 800aa2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa32:	4798      	blx	r3
 800aa34:	3601      	adds	r6, #1
 800aa36:	e7f2      	b.n	800aa1e <__libc_init_array+0x1e>
 800aa38:	0800ae38 	.word	0x0800ae38
 800aa3c:	0800ae38 	.word	0x0800ae38
 800aa40:	0800ae38 	.word	0x0800ae38
 800aa44:	0800ae3c 	.word	0x0800ae3c

0800aa48 <__retarget_lock_acquire_recursive>:
 800aa48:	4770      	bx	lr

0800aa4a <__retarget_lock_release_recursive>:
 800aa4a:	4770      	bx	lr

0800aa4c <memcpy>:
 800aa4c:	440a      	add	r2, r1
 800aa4e:	4291      	cmp	r1, r2
 800aa50:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa54:	d100      	bne.n	800aa58 <memcpy+0xc>
 800aa56:	4770      	bx	lr
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa62:	4291      	cmp	r1, r2
 800aa64:	d1f9      	bne.n	800aa5a <memcpy+0xe>
 800aa66:	bd10      	pop	{r4, pc}

0800aa68 <_free_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	d041      	beq.n	800aaf4 <_free_r+0x8c>
 800aa70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa74:	1f0c      	subs	r4, r1, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bfb8      	it	lt
 800aa7a:	18e4      	addlt	r4, r4, r3
 800aa7c:	f000 f83e 	bl	800aafc <__malloc_lock>
 800aa80:	4a1d      	ldr	r2, [pc, #116]	@ (800aaf8 <_free_r+0x90>)
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	b933      	cbnz	r3, 800aa94 <_free_r+0x2c>
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	6014      	str	r4, [r2, #0]
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa90:	f000 b83a 	b.w	800ab08 <__malloc_unlock>
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d908      	bls.n	800aaaa <_free_r+0x42>
 800aa98:	6820      	ldr	r0, [r4, #0]
 800aa9a:	1821      	adds	r1, r4, r0
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	bf01      	itttt	eq
 800aaa0:	6819      	ldreq	r1, [r3, #0]
 800aaa2:	685b      	ldreq	r3, [r3, #4]
 800aaa4:	1809      	addeq	r1, r1, r0
 800aaa6:	6021      	streq	r1, [r4, #0]
 800aaa8:	e7ed      	b.n	800aa86 <_free_r+0x1e>
 800aaaa:	461a      	mov	r2, r3
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	b10b      	cbz	r3, 800aab4 <_free_r+0x4c>
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d9fa      	bls.n	800aaaa <_free_r+0x42>
 800aab4:	6811      	ldr	r1, [r2, #0]
 800aab6:	1850      	adds	r0, r2, r1
 800aab8:	42a0      	cmp	r0, r4
 800aaba:	d10b      	bne.n	800aad4 <_free_r+0x6c>
 800aabc:	6820      	ldr	r0, [r4, #0]
 800aabe:	4401      	add	r1, r0
 800aac0:	1850      	adds	r0, r2, r1
 800aac2:	4283      	cmp	r3, r0
 800aac4:	6011      	str	r1, [r2, #0]
 800aac6:	d1e0      	bne.n	800aa8a <_free_r+0x22>
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	6053      	str	r3, [r2, #4]
 800aace:	4408      	add	r0, r1
 800aad0:	6010      	str	r0, [r2, #0]
 800aad2:	e7da      	b.n	800aa8a <_free_r+0x22>
 800aad4:	d902      	bls.n	800aadc <_free_r+0x74>
 800aad6:	230c      	movs	r3, #12
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	e7d6      	b.n	800aa8a <_free_r+0x22>
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	1821      	adds	r1, r4, r0
 800aae0:	428b      	cmp	r3, r1
 800aae2:	bf04      	itt	eq
 800aae4:	6819      	ldreq	r1, [r3, #0]
 800aae6:	685b      	ldreq	r3, [r3, #4]
 800aae8:	6063      	str	r3, [r4, #4]
 800aaea:	bf04      	itt	eq
 800aaec:	1809      	addeq	r1, r1, r0
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	6054      	str	r4, [r2, #4]
 800aaf2:	e7ca      	b.n	800aa8a <_free_r+0x22>
 800aaf4:	bd38      	pop	{r3, r4, r5, pc}
 800aaf6:	bf00      	nop
 800aaf8:	2000d888 	.word	0x2000d888

0800aafc <__malloc_lock>:
 800aafc:	4801      	ldr	r0, [pc, #4]	@ (800ab04 <__malloc_lock+0x8>)
 800aafe:	f7ff bfa3 	b.w	800aa48 <__retarget_lock_acquire_recursive>
 800ab02:	bf00      	nop
 800ab04:	2000d884 	.word	0x2000d884

0800ab08 <__malloc_unlock>:
 800ab08:	4801      	ldr	r0, [pc, #4]	@ (800ab10 <__malloc_unlock+0x8>)
 800ab0a:	f7ff bf9e 	b.w	800aa4a <__retarget_lock_release_recursive>
 800ab0e:	bf00      	nop
 800ab10:	2000d884 	.word	0x2000d884

0800ab14 <fmod>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	ed2d 8b02 	vpush	{d8}
 800ab1a:	ec57 6b10 	vmov	r6, r7, d0
 800ab1e:	ec55 4b11 	vmov	r4, r5, d1
 800ab22:	f000 f825 	bl	800ab70 <__ieee754_fmod>
 800ab26:	4622      	mov	r2, r4
 800ab28:	462b      	mov	r3, r5
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	eeb0 8a40 	vmov.f32	s16, s0
 800ab32:	eef0 8a60 	vmov.f32	s17, s1
 800ab36:	f7f5 ffc1 	bl	8000abc <__aeabi_dcmpun>
 800ab3a:	b990      	cbnz	r0, 800ab62 <fmod+0x4e>
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 ff88 	bl	8000a58 <__aeabi_dcmpeq>
 800ab48:	b158      	cbz	r0, 800ab62 <fmod+0x4e>
 800ab4a:	f7ff ff53 	bl	800a9f4 <__errno>
 800ab4e:	2321      	movs	r3, #33	@ 0x21
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	2200      	movs	r2, #0
 800ab54:	2300      	movs	r3, #0
 800ab56:	4610      	mov	r0, r2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f7f5 fe3f 	bl	80007dc <__aeabi_ddiv>
 800ab5e:	ec41 0b18 	vmov	d8, r0, r1
 800ab62:	eeb0 0a48 	vmov.f32	s0, s16
 800ab66:	eef0 0a68 	vmov.f32	s1, s17
 800ab6a:	ecbd 8b02 	vpop	{d8}
 800ab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab70 <__ieee754_fmod>:
 800ab70:	ec53 2b11 	vmov	r2, r3, d1
 800ab74:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800ab78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	ea52 040c 	orrs.w	r4, r2, ip
 800ab80:	ec51 0b10 	vmov	r0, r1, d0
 800ab84:	461e      	mov	r6, r3
 800ab86:	4617      	mov	r7, r2
 800ab88:	4696      	mov	lr, r2
 800ab8a:	d00c      	beq.n	800aba6 <__ieee754_fmod+0x36>
 800ab8c:	4c77      	ldr	r4, [pc, #476]	@ (800ad6c <__ieee754_fmod+0x1fc>)
 800ab8e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800ab92:	45a0      	cmp	r8, r4
 800ab94:	4689      	mov	r9, r1
 800ab96:	d806      	bhi.n	800aba6 <__ieee754_fmod+0x36>
 800ab98:	4254      	negs	r4, r2
 800ab9a:	4d75      	ldr	r5, [pc, #468]	@ (800ad70 <__ieee754_fmod+0x200>)
 800ab9c:	4314      	orrs	r4, r2
 800ab9e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800aba2:	42ac      	cmp	r4, r5
 800aba4:	d909      	bls.n	800abba <__ieee754_fmod+0x4a>
 800aba6:	f7f5 fcef 	bl	8000588 <__aeabi_dmul>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	f7f5 fe15 	bl	80007dc <__aeabi_ddiv>
 800abb2:	ec41 0b10 	vmov	d0, r0, r1
 800abb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abba:	45e0      	cmp	r8, ip
 800abbc:	4682      	mov	sl, r0
 800abbe:	4604      	mov	r4, r0
 800abc0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800abc4:	dc09      	bgt.n	800abda <__ieee754_fmod+0x6a>
 800abc6:	dbf4      	blt.n	800abb2 <__ieee754_fmod+0x42>
 800abc8:	4282      	cmp	r2, r0
 800abca:	d8f2      	bhi.n	800abb2 <__ieee754_fmod+0x42>
 800abcc:	d105      	bne.n	800abda <__ieee754_fmod+0x6a>
 800abce:	4b69      	ldr	r3, [pc, #420]	@ (800ad74 <__ieee754_fmod+0x204>)
 800abd0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800abd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abd8:	e7eb      	b.n	800abb2 <__ieee754_fmod+0x42>
 800abda:	4a65      	ldr	r2, [pc, #404]	@ (800ad70 <__ieee754_fmod+0x200>)
 800abdc:	ea19 0f02 	tst.w	r9, r2
 800abe0:	d148      	bne.n	800ac74 <__ieee754_fmod+0x104>
 800abe2:	f1b8 0f00 	cmp.w	r8, #0
 800abe6:	d13d      	bne.n	800ac64 <__ieee754_fmod+0xf4>
 800abe8:	4963      	ldr	r1, [pc, #396]	@ (800ad78 <__ieee754_fmod+0x208>)
 800abea:	4653      	mov	r3, sl
 800abec:	2b00      	cmp	r3, #0
 800abee:	dc36      	bgt.n	800ac5e <__ieee754_fmod+0xee>
 800abf0:	4216      	tst	r6, r2
 800abf2:	d14f      	bne.n	800ac94 <__ieee754_fmod+0x124>
 800abf4:	f1bc 0f00 	cmp.w	ip, #0
 800abf8:	d144      	bne.n	800ac84 <__ieee754_fmod+0x114>
 800abfa:	4a5f      	ldr	r2, [pc, #380]	@ (800ad78 <__ieee754_fmod+0x208>)
 800abfc:	463b      	mov	r3, r7
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dc3d      	bgt.n	800ac7e <__ieee754_fmod+0x10e>
 800ac02:	485e      	ldr	r0, [pc, #376]	@ (800ad7c <__ieee754_fmod+0x20c>)
 800ac04:	4281      	cmp	r1, r0
 800ac06:	db4a      	blt.n	800ac9e <__ieee754_fmod+0x12e>
 800ac08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac10:	485a      	ldr	r0, [pc, #360]	@ (800ad7c <__ieee754_fmod+0x20c>)
 800ac12:	4282      	cmp	r2, r0
 800ac14:	db57      	blt.n	800acc6 <__ieee754_fmod+0x156>
 800ac16:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ac1a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800ac1e:	1a89      	subs	r1, r1, r2
 800ac20:	1b98      	subs	r0, r3, r6
 800ac22:	eba4 070e 	sub.w	r7, r4, lr
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d162      	bne.n	800acf0 <__ieee754_fmod+0x180>
 800ac2a:	4574      	cmp	r4, lr
 800ac2c:	bf38      	it	cc
 800ac2e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ac32:	2800      	cmp	r0, #0
 800ac34:	bfa4      	itt	ge
 800ac36:	463c      	movge	r4, r7
 800ac38:	4603      	movge	r3, r0
 800ac3a:	ea53 0104 	orrs.w	r1, r3, r4
 800ac3e:	d0c6      	beq.n	800abce <__ieee754_fmod+0x5e>
 800ac40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac44:	db69      	blt.n	800ad1a <__ieee754_fmod+0x1aa>
 800ac46:	494d      	ldr	r1, [pc, #308]	@ (800ad7c <__ieee754_fmod+0x20c>)
 800ac48:	428a      	cmp	r2, r1
 800ac4a:	db6c      	blt.n	800ad26 <__ieee754_fmod+0x1b6>
 800ac4c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac50:	432b      	orrs	r3, r5
 800ac52:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800ac56:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	e7a9      	b.n	800abb2 <__ieee754_fmod+0x42>
 800ac5e:	3901      	subs	r1, #1
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	e7c3      	b.n	800abec <__ieee754_fmod+0x7c>
 800ac64:	4945      	ldr	r1, [pc, #276]	@ (800ad7c <__ieee754_fmod+0x20c>)
 800ac66:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	ddc0      	ble.n	800abf0 <__ieee754_fmod+0x80>
 800ac6e:	3901      	subs	r1, #1
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	e7fa      	b.n	800ac6a <__ieee754_fmod+0xfa>
 800ac74:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ac78:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ac7c:	e7b8      	b.n	800abf0 <__ieee754_fmod+0x80>
 800ac7e:	3a01      	subs	r2, #1
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	e7bc      	b.n	800abfe <__ieee754_fmod+0x8e>
 800ac84:	4a3d      	ldr	r2, [pc, #244]	@ (800ad7c <__ieee754_fmod+0x20c>)
 800ac86:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	ddb9      	ble.n	800ac02 <__ieee754_fmod+0x92>
 800ac8e:	3a01      	subs	r2, #1
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	e7fa      	b.n	800ac8a <__ieee754_fmod+0x11a>
 800ac94:	ea4f 522c 	mov.w	r2, ip, asr #20
 800ac98:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ac9c:	e7b1      	b.n	800ac02 <__ieee754_fmod+0x92>
 800ac9e:	1a40      	subs	r0, r0, r1
 800aca0:	281f      	cmp	r0, #31
 800aca2:	dc0a      	bgt.n	800acba <__ieee754_fmod+0x14a>
 800aca4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800aca8:	fa08 f800 	lsl.w	r8, r8, r0
 800acac:	fa2a f303 	lsr.w	r3, sl, r3
 800acb0:	ea43 0308 	orr.w	r3, r3, r8
 800acb4:	fa0a f400 	lsl.w	r4, sl, r0
 800acb8:	e7aa      	b.n	800ac10 <__ieee754_fmod+0xa0>
 800acba:	4b31      	ldr	r3, [pc, #196]	@ (800ad80 <__ieee754_fmod+0x210>)
 800acbc:	1a5b      	subs	r3, r3, r1
 800acbe:	fa0a f303 	lsl.w	r3, sl, r3
 800acc2:	2400      	movs	r4, #0
 800acc4:	e7a4      	b.n	800ac10 <__ieee754_fmod+0xa0>
 800acc6:	1a80      	subs	r0, r0, r2
 800acc8:	281f      	cmp	r0, #31
 800acca:	dc0a      	bgt.n	800ace2 <__ieee754_fmod+0x172>
 800accc:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800acd0:	fa0c fc00 	lsl.w	ip, ip, r0
 800acd4:	fa27 f606 	lsr.w	r6, r7, r6
 800acd8:	ea46 060c 	orr.w	r6, r6, ip
 800acdc:	fa07 fe00 	lsl.w	lr, r7, r0
 800ace0:	e79d      	b.n	800ac1e <__ieee754_fmod+0xae>
 800ace2:	4e27      	ldr	r6, [pc, #156]	@ (800ad80 <__ieee754_fmod+0x210>)
 800ace4:	1ab6      	subs	r6, r6, r2
 800ace6:	fa07 f606 	lsl.w	r6, r7, r6
 800acea:	f04f 0e00 	mov.w	lr, #0
 800acee:	e796      	b.n	800ac1e <__ieee754_fmod+0xae>
 800acf0:	4574      	cmp	r4, lr
 800acf2:	bf38      	it	cc
 800acf4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800acf8:	2800      	cmp	r0, #0
 800acfa:	da05      	bge.n	800ad08 <__ieee754_fmod+0x198>
 800acfc:	0fe0      	lsrs	r0, r4, #31
 800acfe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ad02:	0064      	lsls	r4, r4, #1
 800ad04:	3901      	subs	r1, #1
 800ad06:	e78b      	b.n	800ac20 <__ieee754_fmod+0xb0>
 800ad08:	ea50 0307 	orrs.w	r3, r0, r7
 800ad0c:	f43f af5f 	beq.w	800abce <__ieee754_fmod+0x5e>
 800ad10:	0ffb      	lsrs	r3, r7, #31
 800ad12:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ad16:	007c      	lsls	r4, r7, #1
 800ad18:	e7f4      	b.n	800ad04 <__ieee754_fmod+0x194>
 800ad1a:	0fe1      	lsrs	r1, r4, #31
 800ad1c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ad20:	0064      	lsls	r4, r4, #1
 800ad22:	3a01      	subs	r2, #1
 800ad24:	e78c      	b.n	800ac40 <__ieee754_fmod+0xd0>
 800ad26:	1a89      	subs	r1, r1, r2
 800ad28:	2914      	cmp	r1, #20
 800ad2a:	dc0a      	bgt.n	800ad42 <__ieee754_fmod+0x1d2>
 800ad2c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800ad30:	fa03 f202 	lsl.w	r2, r3, r2
 800ad34:	40cc      	lsrs	r4, r1
 800ad36:	4322      	orrs	r2, r4
 800ad38:	410b      	asrs	r3, r1
 800ad3a:	ea43 0105 	orr.w	r1, r3, r5
 800ad3e:	4610      	mov	r0, r2
 800ad40:	e737      	b.n	800abb2 <__ieee754_fmod+0x42>
 800ad42:	291f      	cmp	r1, #31
 800ad44:	dc07      	bgt.n	800ad56 <__ieee754_fmod+0x1e6>
 800ad46:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800ad4a:	40cc      	lsrs	r4, r1
 800ad4c:	fa03 f202 	lsl.w	r2, r3, r2
 800ad50:	4322      	orrs	r2, r4
 800ad52:	462b      	mov	r3, r5
 800ad54:	e7f1      	b.n	800ad3a <__ieee754_fmod+0x1ca>
 800ad56:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800ad5a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ad5e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800ad62:	32e2      	adds	r2, #226	@ 0xe2
 800ad64:	fa43 f202 	asr.w	r2, r3, r2
 800ad68:	e7f3      	b.n	800ad52 <__ieee754_fmod+0x1e2>
 800ad6a:	bf00      	nop
 800ad6c:	7fefffff 	.word	0x7fefffff
 800ad70:	7ff00000 	.word	0x7ff00000
 800ad74:	0800ae20 	.word	0x0800ae20
 800ad78:	fffffbed 	.word	0xfffffbed
 800ad7c:	fffffc02 	.word	0xfffffc02
 800ad80:	fffffbe2 	.word	0xfffffbe2

0800ad84 <_init>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	bf00      	nop
 800ad88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8a:	bc08      	pop	{r3}
 800ad8c:	469e      	mov	lr, r3
 800ad8e:	4770      	bx	lr

0800ad90 <_fini>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr
