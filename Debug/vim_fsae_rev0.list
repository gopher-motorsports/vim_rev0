
vim_fsae_rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abdc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800adb0  0800adb0  0000bdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae40  0800ae40  000125e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae40  0800ae40  0000be40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae48  0800ae48  000125e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae48  0800ae48  0000be48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae4c  0800ae4c  0000be4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000065e0  20000000  0800ae50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007414  200065e0  08011430  000125e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d9f4  08011430  000129f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000125e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a2e  00000000  00000000  00012610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004560  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0003d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ff  00000000  00000000  0003ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fa4  00000000  00000000  0003fee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2e0  00000000  00000000  00066e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1aad  00000000  00000000  0008416b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175c18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  00175c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0017c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200065e0 	.word	0x200065e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad94 	.word	0x0800ad94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200065e4 	.word	0x200065e4
 800020c:	0800ad94 	.word	0x0800ad94

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	@ 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ba8:	d2ed      	bcs.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ldivmod>:
 8000d04:	b97b      	cbnz	r3, 8000d26 <__aeabi_ldivmod+0x22>
 8000d06:	b972      	cbnz	r2, 8000d26 <__aeabi_ldivmod+0x22>
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	bfbe      	ittt	lt
 8000d0c:	2000      	movlt	r0, #0
 8000d0e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d12:	e006      	blt.n	8000d22 <__aeabi_ldivmod+0x1e>
 8000d14:	bf08      	it	eq
 8000d16:	2800      	cmpeq	r0, #0
 8000d18:	bf1c      	itt	ne
 8000d1a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000d22:	f000 b9e9 	b.w	80010f8 <__aeabi_idiv0>
 8000d26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d2e:	2900      	cmp	r1, #0
 8000d30:	db09      	blt.n	8000d46 <__aeabi_ldivmod+0x42>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db1a      	blt.n	8000d6c <__aeabi_ldivmod+0x68>
 8000d36:	f000 f881 	bl	8000e3c <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4770      	bx	lr
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db1b      	blt.n	8000d88 <__aeabi_ldivmod+0x84>
 8000d50:	f000 f874 	bl	8000e3c <__udivmoddi4>
 8000d54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5c:	b004      	add	sp, #16
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	4252      	negs	r2, r2
 8000d66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f863 	bl	8000e3c <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4240      	negs	r0, r0
 8000d82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d86:	4770      	bx	lr
 8000d88:	4252      	negs	r2, r2
 8000d8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d8e:	f000 f855 	bl	8000e3c <__udivmoddi4>
 8000d92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d9a:	b004      	add	sp, #16
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_uldivmod>:
 8000da4:	b953      	cbnz	r3, 8000dbc <__aeabi_uldivmod+0x18>
 8000da6:	b94a      	cbnz	r2, 8000dbc <__aeabi_uldivmod+0x18>
 8000da8:	2900      	cmp	r1, #0
 8000daa:	bf08      	it	eq
 8000dac:	2800      	cmpeq	r0, #0
 8000dae:	bf1c      	itt	ne
 8000db0:	f04f 31ff 	movne.w	r1, #4294967295
 8000db4:	f04f 30ff 	movne.w	r0, #4294967295
 8000db8:	f000 b99e 	b.w	80010f8 <__aeabi_idiv0>
 8000dbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc4:	f000 f83a 	bl	8000e3c <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_f2lz>:
 8000dd4:	ee07 0a90 	vmov	s15, r0
 8000dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	d401      	bmi.n	8000de6 <__aeabi_f2lz+0x12>
 8000de2:	f000 b80b 	b.w	8000dfc <__aeabi_f2ulz>
 8000de6:	eef1 7a67 	vneg.f32	s15, s15
 8000dea:	b508      	push	{r3, lr}
 8000dec:	ee17 0a90 	vmov	r0, s15
 8000df0:	f000 f804 	bl	8000dfc <__aeabi_f2ulz>
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	bd08      	pop	{r3, pc}

08000dfc <__aeabi_f2ulz>:
 8000dfc:	b5d0      	push	{r4, r6, r7, lr}
 8000dfe:	f7ff fb6b 	bl	80004d8 <__aeabi_f2d>
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__aeabi_f2ulz+0x38>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	4606      	mov	r6, r0
 8000e08:	460f      	mov	r7, r1
 8000e0a:	f7ff fbbd 	bl	8000588 <__aeabi_dmul>
 8000e0e:	f000 f975 	bl	80010fc <__aeabi_d2uiz>
 8000e12:	4604      	mov	r4, r0
 8000e14:	f7ff fb3e 	bl	8000494 <__aeabi_ui2d>
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <__aeabi_f2ulz+0x3c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f7ff fbb4 	bl	8000588 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4630      	mov	r0, r6
 8000e26:	4639      	mov	r1, r7
 8000e28:	f7ff f9f6 	bl	8000218 <__aeabi_dsub>
 8000e2c:	f000 f966 	bl	80010fc <__aeabi_d2uiz>
 8000e30:	4621      	mov	r1, r4
 8000e32:	bdd0      	pop	{r4, r6, r7, pc}
 8000e34:	3df00000 	.word	0x3df00000
 8000e38:	41f00000 	.word	0x41f00000

08000e3c <__udivmoddi4>:
 8000e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e40:	9d08      	ldr	r5, [sp, #32]
 8000e42:	460c      	mov	r4, r1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d14e      	bne.n	8000ee6 <__udivmoddi4+0xaa>
 8000e48:	4694      	mov	ip, r2
 8000e4a:	458c      	cmp	ip, r1
 8000e4c:	4686      	mov	lr, r0
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	d962      	bls.n	8000f1a <__udivmoddi4+0xde>
 8000e54:	b14a      	cbz	r2, 8000e6a <__udivmoddi4+0x2e>
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	4319      	orrs	r1, r3
 8000e66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f f68c 	uxth.w	r6, ip
 8000e72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d90a      	bls.n	8000ea0 <__udivmoddi4+0x64>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e92:	f080 8112 	bcs.w	80010ba <__udivmoddi4+0x27e>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 810f 	bls.w	80010ba <__udivmoddi4+0x27e>
 8000e9c:	3c02      	subs	r4, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1a59      	subs	r1, r3, r1
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000eae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb2:	fb00 f606 	mul.w	r6, r0, r6
 8000eb6:	429e      	cmp	r6, r3
 8000eb8:	d90a      	bls.n	8000ed0 <__udivmoddi4+0x94>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec2:	f080 80fc 	bcs.w	80010be <__udivmoddi4+0x282>
 8000ec6:	429e      	cmp	r6, r3
 8000ec8:	f240 80f9 	bls.w	80010be <__udivmoddi4+0x282>
 8000ecc:	4463      	add	r3, ip
 8000ece:	3802      	subs	r0, #2
 8000ed0:	1b9b      	subs	r3, r3, r6
 8000ed2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	b11d      	cbz	r5, 8000ee2 <__udivmoddi4+0xa6>
 8000eda:	40d3      	lsrs	r3, r2
 8000edc:	2200      	movs	r2, #0
 8000ede:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d905      	bls.n	8000ef6 <__udivmoddi4+0xba>
 8000eea:	b10d      	cbz	r5, 8000ef0 <__udivmoddi4+0xb4>
 8000eec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e7f5      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8000ef6:	fab3 f183 	clz	r1, r3
 8000efa:	2900      	cmp	r1, #0
 8000efc:	d146      	bne.n	8000f8c <__udivmoddi4+0x150>
 8000efe:	42a3      	cmp	r3, r4
 8000f00:	d302      	bcc.n	8000f08 <__udivmoddi4+0xcc>
 8000f02:	4290      	cmp	r0, r2
 8000f04:	f0c0 80f0 	bcc.w	80010e8 <__udivmoddi4+0x2ac>
 8000f08:	1a86      	subs	r6, r0, r2
 8000f0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000f0e:	2001      	movs	r0, #1
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d0e6      	beq.n	8000ee2 <__udivmoddi4+0xa6>
 8000f14:	e9c5 6300 	strd	r6, r3, [r5]
 8000f18:	e7e3      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x204>
 8000f20:	eba1 040c 	sub.w	r4, r1, ip
 8000f24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f36:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f3e:	fb07 f006 	mul.w	r0, r7, r6
 8000f42:	4298      	cmp	r0, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x11c>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x11a>
 8000f50:	4298      	cmp	r0, r3
 8000f52:	f200 80cd 	bhi.w	80010f0 <__udivmoddi4+0x2b4>
 8000f56:	4626      	mov	r6, r4
 8000f58:	1a1c      	subs	r4, r3, r0
 8000f5a:	fa1f f38e 	uxth.w	r3, lr
 8000f5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f62:	fb08 4410 	mls	r4, r8, r0, r4
 8000f66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6a:	fb00 f707 	mul.w	r7, r0, r7
 8000f6e:	429f      	cmp	r7, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x148>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x146>
 8000f7c:	429f      	cmp	r7, r3
 8000f7e:	f200 80b0 	bhi.w	80010e2 <__udivmoddi4+0x2a6>
 8000f82:	4620      	mov	r0, r4
 8000f84:	1bdb      	subs	r3, r3, r7
 8000f86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8a:	e7a5      	b.n	8000ed8 <__udivmoddi4+0x9c>
 8000f8c:	f1c1 0620 	rsb	r6, r1, #32
 8000f90:	408b      	lsls	r3, r1
 8000f92:	fa22 f706 	lsr.w	r7, r2, r6
 8000f96:	431f      	orrs	r7, r3
 8000f98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa0:	ea43 030c 	orr.w	r3, r3, ip
 8000fa4:	40f4      	lsrs	r4, r6
 8000fa6:	fa00 f801 	lsl.w	r8, r0, r1
 8000faa:	0c38      	lsrs	r0, r7, #16
 8000fac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb4:	fa1f fc87 	uxth.w	ip, r7
 8000fb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000fbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc4:	45a1      	cmp	r9, r4
 8000fc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fca:	d90a      	bls.n	8000fe2 <__udivmoddi4+0x1a6>
 8000fcc:	193c      	adds	r4, r7, r4
 8000fce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd2:	f080 8084 	bcs.w	80010de <__udivmoddi4+0x2a2>
 8000fd6:	45a1      	cmp	r9, r4
 8000fd8:	f240 8081 	bls.w	80010de <__udivmoddi4+0x2a2>
 8000fdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe0:	443c      	add	r4, r7
 8000fe2:	eba4 0409 	sub.w	r4, r4, r9
 8000fe6:	fa1f f983 	uxth.w	r9, r3
 8000fea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ff6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffa:	45a4      	cmp	ip, r4
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x1d2>
 8000ffe:	193c      	adds	r4, r7, r4
 8001000:	f103 30ff 	add.w	r0, r3, #4294967295
 8001004:	d267      	bcs.n	80010d6 <__udivmoddi4+0x29a>
 8001006:	45a4      	cmp	ip, r4
 8001008:	d965      	bls.n	80010d6 <__udivmoddi4+0x29a>
 800100a:	3b02      	subs	r3, #2
 800100c:	443c      	add	r4, r7
 800100e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001012:	fba0 9302 	umull	r9, r3, r0, r2
 8001016:	eba4 040c 	sub.w	r4, r4, ip
 800101a:	429c      	cmp	r4, r3
 800101c:	46ce      	mov	lr, r9
 800101e:	469c      	mov	ip, r3
 8001020:	d351      	bcc.n	80010c6 <__udivmoddi4+0x28a>
 8001022:	d04e      	beq.n	80010c2 <__udivmoddi4+0x286>
 8001024:	b155      	cbz	r5, 800103c <__udivmoddi4+0x200>
 8001026:	ebb8 030e 	subs.w	r3, r8, lr
 800102a:	eb64 040c 	sbc.w	r4, r4, ip
 800102e:	fa04 f606 	lsl.w	r6, r4, r6
 8001032:	40cb      	lsrs	r3, r1
 8001034:	431e      	orrs	r6, r3
 8001036:	40cc      	lsrs	r4, r1
 8001038:	e9c5 6400 	strd	r6, r4, [r5]
 800103c:	2100      	movs	r1, #0
 800103e:	e750      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8001040:	f1c2 0320 	rsb	r3, r2, #32
 8001044:	fa20 f103 	lsr.w	r1, r0, r3
 8001048:	fa0c fc02 	lsl.w	ip, ip, r2
 800104c:	fa24 f303 	lsr.w	r3, r4, r3
 8001050:	4094      	lsls	r4, r2
 8001052:	430c      	orrs	r4, r1
 8001054:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001058:	fa00 fe02 	lsl.w	lr, r0, r2
 800105c:	fa1f f78c 	uxth.w	r7, ip
 8001060:	fbb3 f0f8 	udiv	r0, r3, r8
 8001064:	fb08 3110 	mls	r1, r8, r0, r3
 8001068:	0c23      	lsrs	r3, r4, #16
 800106a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800106e:	fb00 f107 	mul.w	r1, r0, r7
 8001072:	4299      	cmp	r1, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x24c>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 36ff 	add.w	r6, r0, #4294967295
 800107e:	d22c      	bcs.n	80010da <__udivmoddi4+0x29e>
 8001080:	4299      	cmp	r1, r3
 8001082:	d92a      	bls.n	80010da <__udivmoddi4+0x29e>
 8001084:	3802      	subs	r0, #2
 8001086:	4463      	add	r3, ip
 8001088:	1a5b      	subs	r3, r3, r1
 800108a:	b2a4      	uxth	r4, r4
 800108c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001090:	fb08 3311 	mls	r3, r8, r1, r3
 8001094:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001098:	fb01 f307 	mul.w	r3, r1, r7
 800109c:	42a3      	cmp	r3, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x276>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010a8:	d213      	bcs.n	80010d2 <__udivmoddi4+0x296>
 80010aa:	42a3      	cmp	r3, r4
 80010ac:	d911      	bls.n	80010d2 <__udivmoddi4+0x296>
 80010ae:	3902      	subs	r1, #2
 80010b0:	4464      	add	r4, ip
 80010b2:	1ae4      	subs	r4, r4, r3
 80010b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010b8:	e739      	b.n	8000f2e <__udivmoddi4+0xf2>
 80010ba:	4604      	mov	r4, r0
 80010bc:	e6f0      	b.n	8000ea0 <__udivmoddi4+0x64>
 80010be:	4608      	mov	r0, r1
 80010c0:	e706      	b.n	8000ed0 <__udivmoddi4+0x94>
 80010c2:	45c8      	cmp	r8, r9
 80010c4:	d2ae      	bcs.n	8001024 <__udivmoddi4+0x1e8>
 80010c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ce:	3801      	subs	r0, #1
 80010d0:	e7a8      	b.n	8001024 <__udivmoddi4+0x1e8>
 80010d2:	4631      	mov	r1, r6
 80010d4:	e7ed      	b.n	80010b2 <__udivmoddi4+0x276>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e799      	b.n	800100e <__udivmoddi4+0x1d2>
 80010da:	4630      	mov	r0, r6
 80010dc:	e7d4      	b.n	8001088 <__udivmoddi4+0x24c>
 80010de:	46d6      	mov	lr, sl
 80010e0:	e77f      	b.n	8000fe2 <__udivmoddi4+0x1a6>
 80010e2:	4463      	add	r3, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e74d      	b.n	8000f84 <__udivmoddi4+0x148>
 80010e8:	4606      	mov	r6, r0
 80010ea:	4623      	mov	r3, r4
 80010ec:	4608      	mov	r0, r1
 80010ee:	e70f      	b.n	8000f10 <__udivmoddi4+0xd4>
 80010f0:	3e02      	subs	r6, #2
 80010f2:	4463      	add	r3, ip
 80010f4:	e730      	b.n	8000f58 <__udivmoddi4+0x11c>
 80010f6:	bf00      	nop

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_d2uiz>:
 80010fc:	004a      	lsls	r2, r1, #1
 80010fe:	d211      	bcs.n	8001124 <__aeabi_d2uiz+0x28>
 8001100:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001104:	d211      	bcs.n	800112a <__aeabi_d2uiz+0x2e>
 8001106:	d50d      	bpl.n	8001124 <__aeabi_d2uiz+0x28>
 8001108:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800110c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001110:	d40e      	bmi.n	8001130 <__aeabi_d2uiz+0x34>
 8001112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800111e:	fa23 f002 	lsr.w	r0, r3, r2
 8001122:	4770      	bx	lr
 8001124:	f04f 0000 	mov.w	r0, #0
 8001128:	4770      	bx	lr
 800112a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800112e:	d102      	bne.n	8001136 <__aeabi_d2uiz+0x3a>
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <init>:
bool lowMode = true;

// init
//  What needs to happen on startup in order to run GopherCAN
void init(CAN_HandleTypeDef* hcan_ptr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	example_hcan = hcan_ptr;
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <init+0x40>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(2, example_hcan, THIS_MODULE_ID, BXTYPE_MASTER))
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <init+0x40>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	2201      	movs	r2, #1
 8001152:	2002      	movs	r0, #2
 8001154:	f001 fa7c 	bl	8002650 <init_can>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <init+0x26>
	{
		// an error has occurred, stay here
		while (1);
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <init+0x22>
	}

	// enable all of the variables in GopherCAN for testing
	//set_all_params_state(TRUE);

	clear();
 8001162:	f000 f98f 	bl	8001484 <clear>
	setStripBrightness(100);
 8001166:	2064      	movs	r0, #100	@ 0x64
 8001168:	f000 fa82 	bl	8001670 <setStripBrightness>
	generateRainbow(rainbowArr);
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <init+0x44>)
 800116e:	f000 fabf 	bl	80016f0 <generateRainbow>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200065fc 	.word	0x200065fc
 8001180:	20006604 	.word	0x20006604

08001184 <can_buffer_handling_loop>:

// can_buffer_handling_loop
//  This loop will handle CAN RX software task and CAN TX hardware task. Should be
//  called every 1ms or as often as received messages should be handled
void can_buffer_handling_loop()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 8001188:	f002 f950 	bl	800342c <service_can_rx_buffer>
	{
		// an error has occurred
	}

	// handle the transmission hardware for each CAN bus
	service_can_tx(example_hcan);
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <can_buffer_handling_loop+0x18>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f8c1 	bl	8003318 <service_can_tx>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200065fc 	.word	0x200065fc

080011a0 <main_loop>:

// main_loop
//  another loop. This includes logic for sending a CAN command. Designed to be
//  called every 10ms
void main_loop()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	ed2d 8b02 	vpush	{d8}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af02      	add	r7, sp, #8
	uint32_t time = HAL_GetTick();
 80011aa:	f002 fde9 	bl	8003d80 <HAL_GetTick>
 80011ae:	61b8      	str	r0, [r7, #24]
	if(time - lastUpdate >= 1)
 80011b0:	4b95      	ldr	r3, [pc, #596]	@ (8001408 <main_loop+0x268>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	f000 811c 	beq.w	80013f4 <main_loop+0x254>

		#define SPACING      13

		static float offset = 0;

		if(motorSpeedLF_rpm.data < (uint16_t)MIN_RPM)
 80011bc:	4b93      	ldr	r3, [pc, #588]	@ (800140c <main_loop+0x26c>)
 80011be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80011c2:	2b09      	cmp	r3, #9
 80011c4:	f300 80aa 	bgt.w	800131c <main_loop+0x17c>
		{
			float packVoltage = bmsAveBrickVoltage_V.data*84;
 80011c8:	4b91      	ldr	r3, [pc, #580]	@ (8001410 <main_loop+0x270>)
 80011ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80011ce:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001414 <main_loop+0x274>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	edc7 7a05 	vstr	s15, [r7, #20]
			if(dcBusVoltage_V.data < 0.05f * packVoltage) {
 80011da:	4b8f      	ldr	r3, [pc, #572]	@ (8001418 <main_loop+0x278>)
 80011dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80011e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800141c <main_loop+0x27c>
 80011e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	d52c      	bpl.n	8001250 <main_loop+0xb0>
				  float intensity = abs((HAL_GetTick() % 2000) - 1000) / 1000.0f;
 80011f6:	f002 fdc3 	bl	8003d80 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <main_loop+0x280>)
 80011fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001202:	09db      	lsrs	r3, r3, #7
 8001204:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfb8      	it	lt
 8001216:	425b      	neglt	r3, r3
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001424 <main_loop+0x284>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	edc7 7a02 	vstr	s15, [r7, #8]
				  setStripColor(0, (uint8_t)(255.0f * intensity), 0);
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001428 <main_loop+0x288>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001240:	793b      	ldrb	r3, [r7, #4]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f9f3 	bl	8001634 <setStripColor>
 800124e:	e0cc      	b.n	80013ea <main_loop+0x24a>
			} else if (dcBusVoltage_V.data > 0.95f * packVoltage) {
 8001250:	4b71      	ldr	r3, [pc, #452]	@ (8001418 <main_loop+0x278>)
 8001252:	ed93 7a07 	vldr	s14, [r3, #28]
 8001256:	edd7 7a05 	vldr	s15, [r7, #20]
 800125a:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800142c <main_loop+0x28c>
 800125e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dd2b      	ble.n	80012c4 <main_loop+0x124>
				float intensity = abs((HAL_GetTick() % 300) - 150) / 150.0f;
 800126c:	f002 fd88 	bl	8003d80 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <main_loop+0x290>)
 8001274:	fba3 1302 	umull	r1, r3, r3, r2
 8001278:	095b      	lsrs	r3, r3, #5
 800127a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	3b96      	subs	r3, #150	@ 0x96
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8001434 <main_loop+0x294>
 8001298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]
				  setStripColor((uint8_t)(255.0f * intensity), 0, 0);
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001428 <main_loop+0x288>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80012b4:	793b      	ldrb	r3, [r7, #4]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f9b9 	bl	8001634 <setStripColor>
 80012c2:	e092      	b.n	80013ea <main_loop+0x24a>
			} else {
				float intensity = abs((HAL_GetTick() % 500) - 250) / 250.0f;
 80012c4:	f002 fd5c 	bl	8003d80 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <main_loop+0x280>)
 80012cc:	fba3 1302 	umull	r1, r3, r3, r2
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	3bfa      	subs	r3, #250	@ 0xfa
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bfb8      	it	lt
 80012e2:	425b      	neglt	r3, r3
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ec:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8001438 <main_loop+0x298>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	edc7 7a04 	vstr	s15, [r7, #16]
				  setStripColor(0, 0, (uint8_t)(255.0f * intensity));
 80012f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001428 <main_loop+0x288>
 8001300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f000 f98d 	bl	8001634 <setStripColor>
 800131a:	e066      	b.n	80013ea <main_loop+0x24a>
			}
		}
		else
		{
		  static float lastOffset = 0;
		  float motorSpeed = (float)motorSpeedLF_rpm.data;
 800131c:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <main_loop+0x26c>)
 800131e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	edc7 7a07 	vstr	s15, [r7, #28]
		  if(motorSpeed > MAX_RPM)
 800132e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001332:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800143c <main_loop+0x29c>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	dd01      	ble.n	8001344 <main_loop+0x1a4>
		  {
			motorSpeed = MAX_RPM;
 8001340:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <main_loop+0x2a0>)
 8001342:	61fb      	str	r3, [r7, #28]
		  }

		  // Offset = (base_speed + speed_per_rpm * rpm) * delta_t
		  offset += (INTERCEPT + SLOPE * motorSpeed) * (float)(HAL_GetTick() - lastUpdate) / 1000.0f;
 8001344:	edd7 7a07 	vldr	s15, [r7, #28]
 8001348:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001444 <main_loop+0x2a4>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001354:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001358:	f002 fd12 	bl	8003d80 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <main_loop+0x268>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001370:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001424 <main_loop+0x284>
 8001374:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001378:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <main_loop+0x2a8>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <main_loop+0x2a8>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
		  // If offset has advanced to the next integer value
		  if((uint32_t)lastOffset != (uint32_t)offset)
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <main_loop+0x2ac>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <main_loop+0x2a8>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d01c      	beq.n	80013e2 <main_loop+0x242>
		  {
			// Update the dotted line
			dottedLine(SPACING, (uint32_t)offset, 255, 0, 0);
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <main_loop+0x2a8>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	22ff      	movs	r2, #255	@ 0xff
 80013ba:	ee17 1a90 	vmov	r1, s15
 80013be:	200d      	movs	r0, #13
 80013c0:	f000 fad4 	bl	800196c <dottedLine>
			write();
 80013c4:	f000 f87e 	bl	80014c4 <write>
			fmod(offset, SPACING);
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <main_loop+0x2a8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f883 	bl	80004d8 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001400 <main_loop+0x260>
 80013da:	ec43 2b10 	vmov	d0, r2, r3
 80013de:	f009 fba1 	bl	800ab24 <fmod>
		  }
		  // Update last offset
		  lastOffset = offset;
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <main_loop+0x2a8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a19      	ldr	r2, [pc, #100]	@ (800144c <main_loop+0x2ac>)
 80013e8:	6013      	str	r3, [r2, #0]
		}
		write();
 80013ea:	f000 f86b 	bl	80014c4 <write>
//				  lowMode = true;
//			  }
//		  }

//		  write();
		lastUpdate = time;
 80013ee:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <main_loop+0x268>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6013      	str	r3, [r2, #0]
	}
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	ecbd 8b02 	vpop	{d8}
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	00000000 	.word	0x00000000
 8001404:	402a0000 	.word	0x402a0000
 8001408:	20006600 	.word	0x20006600
 800140c:	200002ec 	.word	0x200002ec
 8001410:	200044cc 	.word	0x200044cc
 8001414:	42a80000 	.word	0x42a80000
 8001418:	2000080c 	.word	0x2000080c
 800141c:	3d4ccccd 	.word	0x3d4ccccd
 8001420:	10624dd3 	.word	0x10624dd3
 8001424:	447a0000 	.word	0x447a0000
 8001428:	437f0000 	.word	0x437f0000
 800142c:	3f733333 	.word	0x3f733333
 8001430:	1b4e81b5 	.word	0x1b4e81b5
 8001434:	43160000 	.word	0x43160000
 8001438:	437a0000 	.word	0x437a0000
 800143c:	459c4000 	.word	0x459c4000
 8001440:	459c4000 	.word	0x459c4000
 8001444:	3d3bf906 	.word	0x3d3bf906
 8001448:	20006ce8 	.word	0x20006ce8
 800144c:	20006cec 	.word	0x20006cec

08001450 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a07      	ldr	r2, [pc, #28]	@ (800147c <vApplicationGetIdleTaskMemory+0x2c>)
 8001460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	4a06      	ldr	r2, [pc, #24]	@ (8001480 <vApplicationGetIdleTaskMemory+0x30>)
 8001466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20006cf0 	.word	0x20006cf0
 8001480:	20006d90 	.word	0x20006d90

08001484 <clear>:
 */
uint8_t  ledData[NUM_PIXELS][4]	= {0};


void clear()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	memset(ledData, 0, sizeof(ledData[0][0]) * NUM_PIXELS * 4);
 800148a:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800148e:	2100      	movs	r1, #0
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <clear+0x3c>)
 8001492:	f009 fa59 	bl	800a948 <memset>
	for (int i = 0; i < NUM_PIXELS; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	e008      	b.n	80014ae <clear+0x2a>
	{
		ledData[i][BRIGHTNESS_INDEX] = 255;
 800149c:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <clear+0x3c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	22ff      	movs	r2, #255	@ 0xff
 80014a6:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < NUM_PIXELS; i++)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b92      	cmp	r3, #146	@ 0x92
 80014b2:	ddf3      	ble.n	800149c <clear+0x18>
	}
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20008d54 	.word	0x20008d54

080014c4 <write>:

void write()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
	for (int colorPhasePixelIndex = 0; colorPhasePixelIndex < NUM_PIXELS; colorPhasePixelIndex++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e070      	b.n	80015b2 <write+0xee>
	{
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80014d0:	4a3f      	ldr	r2, [pc, #252]	@ (80015d0 <write+0x10c>)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80014d8:	4619      	mov	r1, r3
							 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80014da:	4a3d      	ldr	r2, [pc, #244]	@ (80015d0 <write+0x10c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	78db      	ldrb	r3, [r3, #3]
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
							 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80014e8:	4a3a      	ldr	r2, [pc, #232]	@ (80015d4 <write+0x110>)
 80014ea:	fb82 1203 	smull	r1, r2, r2, r3
 80014ee:	441a      	add	r2, r3
 80014f0:	11d2      	asrs	r2, r2, #7
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1ad3      	subs	r3, r2, r3
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80014f6:	617b      	str	r3, [r7, #20]
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 80014f8:	4a35      	ldr	r2, [pc, #212]	@ (80015d0 <write+0x10c>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	4619      	mov	r1, r3
				 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8001504:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <write+0x10c>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	78db      	ldrb	r3, [r3, #3]
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 800150e:	fb01 f303 	mul.w	r3, r1, r3
				 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8001512:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <write+0x110>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	441a      	add	r2, r3
 800151a:	11d2      	asrs	r2, r2, #7
 800151c:	17db      	asrs	r3, r3, #31
 800151e:	1ad3      	subs	r3, r2, r3
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 8001520:	613b      	str	r3, [r7, #16]
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 8001522:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <write+0x10c>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	4619      	mov	r1, r3
	 	 	 	 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 800152e:	4a28      	ldr	r2, [pc, #160]	@ (80015d0 <write+0x10c>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	78db      	ldrb	r3, [r3, #3]
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 8001538:	fb01 f303 	mul.w	r3, r1, r3
	 	 	 	 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <write+0x110>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	441a      	add	r2, r3
 8001544:	11d2      	asrs	r2, r2, #7
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 800154a:	60fb      	str	r3, [r7, #12]
		uint32_t color = 	(green << 16) | (red <<  8) | (blue);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	041a      	lsls	r2, r3, #16
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	4313      	orrs	r3, r2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
		uint32_t mask  = 	 0x00000001 << (BITS_PER_PIXEL - 1);
 800155c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001560:	607b      	str	r3, [r7, #4]

		for (int i = 0; i < BITS_PER_PIXEL; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	e01e      	b.n	80015a6 <write+0xe2>
		{
			// Where in the pwm array we are. +24 due to front DMA padding
			uint32_t pwmIndex = colorPhasePixelIndex * BITS_PER_PIXEL + i + 24;
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	461a      	mov	r2, r3
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	4413      	add	r3, r2
 8001578:	3318      	adds	r3, #24
 800157a:	603b      	str	r3, [r7, #0]
			if ((mask >> i) & color)
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	40da      	lsrs	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <write+0xd2>
			{
				// Write 1
				pwmData[pwmIndex] = ONE_HIGH_TIME;
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <write+0x114>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2154      	movs	r1, #84	@ 0x54
 8001590:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001594:	e004      	b.n	80015a0 <write+0xdc>
			}
			else
			{
				// Write 0
				pwmData[pwmIndex] = ZERO_HIGH_TIME;
 8001596:	4a10      	ldr	r2, [pc, #64]	@ (80015d8 <write+0x114>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	211c      	movs	r1, #28
 800159c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BITS_PER_PIXEL; i++)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b17      	cmp	r3, #23
 80015aa:	dddd      	ble.n	8001568 <write+0xa4>
	for (int colorPhasePixelIndex = 0; colorPhasePixelIndex < NUM_PIXELS; colorPhasePixelIndex++)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b92      	cmp	r3, #146	@ 0x92
 80015b6:	dd8b      	ble.n	80014d0 <write+0xc>
			}
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)pwmData, ARRAY_SIZE);
 80015b8:	f640 53e1 	movw	r3, #3553	@ 0xde1
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <write+0x114>)
 80015be:	210c      	movs	r1, #12
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <write+0x118>)
 80015c2:	f005 f9d1 	bl	8006968 <HAL_TIM_PWM_Start_DMA>
}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20008d54 	.word	0x20008d54
 80015d4:	80808081 	.word	0x80808081
 80015d8:	20007190 	.word	0x20007190
 80015dc:	20009058 	.word	0x20009058

080015e0 <setPixelColor>:

void setPixelColor(uint32_t ledNum, uint8_t red, uint8_t green, uint8_t blue)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70bb      	strb	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
	if (ledNum >= NUM_PIXELS) return;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b92      	cmp	r3, #146	@ 0x92
 80015fe:	d811      	bhi.n	8001624 <setPixelColor+0x44>
	ledData[ledNum][0] = red;
 8001600:	490b      	ldr	r1, [pc, #44]	@ (8001630 <setPixelColor+0x50>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	ledData[ledNum][1] = green;
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <setPixelColor+0x50>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	78ba      	ldrb	r2, [r7, #2]
 8001614:	705a      	strb	r2, [r3, #1]
	ledData[ledNum][2] = blue;
 8001616:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <setPixelColor+0x50>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	787a      	ldrb	r2, [r7, #1]
 8001620:	709a      	strb	r2, [r3, #2]
 8001622:	e000      	b.n	8001626 <setPixelColor+0x46>
	if (ledNum >= NUM_PIXELS) return;
 8001624:	bf00      	nop
}
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20008d54 	.word	0x20008d54

08001634 <setStripColor>:
	ledData[ledNum][2] = blue;
	ledData[ledNum][3] = brightness;
}

void setStripColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	460b      	mov	r3, r1
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	4613      	mov	r3, r2
 8001644:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < NUM_PIXELS; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e008      	b.n	800165e <setStripColor+0x2a>
	{
		setPixelColor(i, red, green, blue);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	797b      	ldrb	r3, [r7, #5]
 8001650:	79ba      	ldrb	r2, [r7, #6]
 8001652:	79f9      	ldrb	r1, [r7, #7]
 8001654:	f7ff ffc4 	bl	80015e0 <setPixelColor>
	for (int i = 0; i < NUM_PIXELS; i++)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b92      	cmp	r3, #146	@ 0x92
 8001662:	ddf3      	ble.n	800164c <setStripColor+0x18>
	}
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <setStripBrightness>:
		setPixel(i, red, green, blue, brightness);
	}
}

void setStripBrightness(uint32_t brightness)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if (brightness > 255) brightness = 255;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2bff      	cmp	r3, #255	@ 0xff
 800167c:	d901      	bls.n	8001682 <setStripBrightness+0x12>
 800167e:	23ff      	movs	r3, #255	@ 0xff
 8001680:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_PIXELS; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e00a      	b.n	800169e <setStripBrightness+0x2e>
	{
		ledData[i][BRIGHTNESS_INDEX] = brightness;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <setStripBrightness+0x44>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	460a      	mov	r2, r1
 8001696:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < NUM_PIXELS; i++)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b92      	cmp	r3, #146	@ 0x92
 80016a2:	ddf1      	ble.n	8001688 <setStripBrightness+0x18>
	}
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20008d54 	.word	0x20008d54

080016b8 <map>:
		ledData[ledNum][BRIGHTNESS_INDEX] = brightness;
	}
}

int32_t map(int32_t x, int32_t inputMin, int32_t inputMax, int32_t outputMin, int32_t outputMax)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  return (x - inputMin) * (outputMax - outputMin) / (inputMax - inputMin) + outputMin;
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	69b9      	ldr	r1, [r7, #24]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	1a8a      	subs	r2, r1, r2
 80016d2:	fb03 f202 	mul.w	r2, r3, r2
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1acb      	subs	r3, r1, r3
 80016dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4413      	add	r3, r2
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <generateRainbow>:

void generateRainbow(uint32_t rainbowArr[NUM_PIXELS][3])
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	6078      	str	r0, [r7, #4]
	uint32_t colorPhaseStartIndex = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	76fb      	strb	r3, [r7, #27]
 8001700:	e128      	b.n	8001954 <generateRainbow+0x264>
	{
		uint32_t numPhasePixels = (NUM_PIXELS / NUM_COLOR_PHASES) +
 8001702:	7efb      	ldrb	r3, [r7, #27]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d801      	bhi.n	800170c <generateRainbow+0x1c>
 8001708:	2319      	movs	r3, #25
 800170a:	e000      	b.n	800170e <generateRainbow+0x1e>
 800170c:	2318      	movs	r3, #24
 800170e:	613b      	str	r3, [r7, #16]
									((colorPhase < (NUM_PIXELS % NUM_COLOR_PHASES)) ? 1 : 0);
		uint32_t colorPhasePixelIndex = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPhasePixels)
 8001714:	e112      	b.n	800193c <generateRainbow+0x24c>
		{
			uint32_t pixelIndex = (colorPhaseStartIndex + colorPhasePixelIndex) % NUM_PIXELS;
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	4a92      	ldr	r2, [pc, #584]	@ (8001968 <generateRainbow+0x278>)
 800171e:	fba2 1203 	umull	r1, r2, r2, r3
 8001722:	09d2      	lsrs	r2, r2, #7
 8001724:	2193      	movs	r1, #147	@ 0x93
 8001726:	fb01 f202 	mul.w	r2, r1, r2
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
			switch (colorPhase)
 800172e:	7efb      	ldrb	r3, [r7, #27]
 8001730:	2b05      	cmp	r3, #5
 8001732:	f200 80ff 	bhi.w	8001934 <generateRainbow+0x244>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <generateRainbow+0x4c>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	08001755 	.word	0x08001755
 8001740:	080017a5 	.word	0x080017a5
 8001744:	080017f5 	.word	0x080017f5
 8001748:	08001845 	.word	0x08001845
 800174c:	08001895 	.word	0x08001895
 8001750:	080018e5 	.word	0x080018e5
			{
			case RED_TO_RED_GREEN:
				rainbowArr[pixelIndex][0] = 255;
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	22ff      	movs	r2, #255	@ 0xff
 8001766:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	23ff      	movs	r3, #255	@ 0xff
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2100      	movs	r1, #0
 8001774:	f7ff ffa0 	bl	80016b8 <map>
 8001778:	4601      	mov	r1, r0
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	460a      	mov	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 0;
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
				break;
 80017a2:	e0c8      	b.n	8001936 <generateRainbow+0x246>

			case RED_GREEN_TO_GREEN:
				rainbowArr[pixelIndex][0] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 80017a4:	6978      	ldr	r0, [r7, #20]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	23ff      	movs	r3, #255	@ 0xff
 80017ae:	2100      	movs	r1, #0
 80017b0:	f7ff ff82 	bl	80016b8 <map>
 80017b4:	4601      	mov	r1, r0
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	460a      	mov	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 255;
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	22ff      	movs	r2, #255	@ 0xff
 80017dc:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 0;
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
				break;
 80017f2:	e0a0      	b.n	8001936 <generateRainbow+0x246>

			case GREEN_TO_GREEN_BLUE:
				rainbowArr[pixelIndex][0] = 0;
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 255;
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	22ff      	movs	r2, #255	@ 0xff
 800181a:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 800181c:	6978      	ldr	r0, [r7, #20]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	23ff      	movs	r3, #255	@ 0xff
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	2100      	movs	r1, #0
 8001828:	f7ff ff46 	bl	80016b8 <map>
 800182c:	4601      	mov	r1, r0
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	460a      	mov	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
				break;
 8001842:	e078      	b.n	8001936 <generateRainbow+0x246>

			case GREEN_BLUE_TO_BLUE:
				rainbowArr[pixelIndex][0] = 0;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	23ff      	movs	r3, #255	@ 0xff
 8001862:	2100      	movs	r1, #0
 8001864:	f7ff ff28 	bl	80016b8 <map>
 8001868:	4601      	mov	r1, r0
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	460a      	mov	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 255;
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	609a      	str	r2, [r3, #8]
				break;
 8001892:	e050      	b.n	8001936 <generateRainbow+0x246>

			case BLUE_TO_BLUE_RED:
				rainbowArr[pixelIndex][0] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 8001894:	6978      	ldr	r0, [r7, #20]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	23ff      	movs	r3, #255	@ 0xff
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	f7ff ff0a 	bl	80016b8 <map>
 80018a4:	4601      	mov	r1, r0
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	460a      	mov	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 0;
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 255;
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	22ff      	movs	r2, #255	@ 0xff
 80018e0:	609a      	str	r2, [r3, #8]
				break;
 80018e2:	e028      	b.n	8001936 <generateRainbow+0x246>

			case BLUE_RED_TO_RED:
				rainbowArr[pixelIndex][0] = 255;
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	22ff      	movs	r2, #255	@ 0xff
 80018f6:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 0;
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	23ff      	movs	r3, #255	@ 0xff
 8001916:	2100      	movs	r1, #0
 8001918:	f7ff fece 	bl	80016b8 <map>
 800191c:	4601      	mov	r1, r0
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	460a      	mov	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
				break;
 8001932:	e000      	b.n	8001936 <generateRainbow+0x246>

			default:
				break;
 8001934:	bf00      	nop
			}
			colorPhasePixelIndex++;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPhasePixels)
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	f4ff aee8 	bcc.w	8001716 <generateRainbow+0x26>
		}

		colorPhaseStartIndex += numPhasePixels;
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 800194e:	7efb      	ldrb	r3, [r7, #27]
 8001950:	3301      	adds	r3, #1
 8001952:	76fb      	strb	r3, [r7, #27]
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	2b06      	cmp	r3, #6
 8001958:	f67f aed3 	bls.w	8001702 <generateRainbow+0x12>
	}
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	dee95c4d 	.word	0xdee95c4d

0800196c <dottedLine>:

}


void dottedLine(uint32_t stepSize, uint32_t offset, uint8_t red, uint8_t green, uint8_t blue)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	460b      	mov	r3, r1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	4613      	mov	r3, r2
 8001980:	71bb      	strb	r3, [r7, #6]
	clear();
 8001982:	f7ff fd7f 	bl	8001484 <clear>
	offset %= stepSize;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	fbb3 f2f2 	udiv	r2, r3, r2
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	fb01 f202 	mul.w	r2, r1, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
	for (int ledIndex = offset; ledIndex < NUM_PIXELS; ledIndex+=stepSize)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <dottedLine+0x48>
	{
		setPixelColor(ledIndex, red, green, blue);
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019a4:	79ba      	ldrb	r2, [r7, #6]
 80019a6:	79f9      	ldrb	r1, [r7, #7]
 80019a8:	f7ff fe1a 	bl	80015e0 <setPixelColor>
	for (int ledIndex = offset; ledIndex < NUM_PIXELS; ledIndex+=stepSize)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b92      	cmp	r3, #146	@ 0x92
 80019b8:	ddf1      	ble.n	800199e <dottedLine+0x32>
	}
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b08e      	sub	sp, #56	@ 0x38
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ca:	f002 f9a3 	bl	8003d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ce:	f000 f843 	bl	8001a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d2:	f000 fa71 	bl	8001eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d6:	f000 fa47 	bl	8001e68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019da:	f000 fa1b 	bl	8001e14 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80019de:	f000 f8f9 	bl	8001bd4 <MX_CAN1_Init>
  MX_TIM2_Init();
 80019e2:	f000 f92d 	bl	8001c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019e6:	f000 f99f 	bl	8001d28 <MX_TIM3_Init>
  MX_ADC1_Init();
 80019ea:	f000 f8a1 	bl	8001b30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init(&hcan1);
 80019ee:	4815      	ldr	r0, [pc, #84]	@ (8001a44 <main+0x80>)
 80019f0:	f7ff fba4 	bl	800113c <init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskMain_Loop */
  osThreadDef(taskMain_Loop, task_main_loop, osPriorityNormal, 0, 256);
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <main+0x84>)
 80019f6:	f107 041c 	add.w	r4, r7, #28
 80019fa:	461d      	mov	r5, r3
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskMain_LoopHandle = osThreadCreate(osThread(taskMain_Loop), NULL);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f006 fba3 	bl	800815a <osThreadCreate>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <main+0x88>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskGCAN_Hardwa */
  osThreadDef(taskGCAN_Hardwa, task_gcan_hw, osPriorityNormal, 0, 256);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <main+0x8c>)
 8001a1c:	463c      	mov	r4, r7
 8001a1e:	461d      	mov	r5, r3
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskGCAN_HardwaHandle = osThreadCreate(osThread(taskGCAN_Hardwa), NULL);
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f006 fb92 	bl	800815a <osThreadCreate>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <main+0x90>)
 8001a3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a3c:	f006 fb86 	bl	800814c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <main+0x7c>
 8001a44:	20008fe8 	.word	0x20008fe8
 8001a48:	0800adc0 	.word	0x0800adc0
 8001a4c:	200091a4 	.word	0x200091a4
 8001a50:	0800adec 	.word	0x0800adec
 8001a54:	200091a8 	.word	0x200091a8

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b094      	sub	sp, #80	@ 0x50
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2234      	movs	r2, #52	@ 0x34
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 ff6e 	bl	800a948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <SystemClock_Config+0xd0>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	4a28      	ldr	r2, [pc, #160]	@ (8001b28 <SystemClock_Config+0xd0>)
 8001a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <SystemClock_Config+0xd0>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <SystemClock_Config+0xd4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <SystemClock_Config+0xd4>)
 8001aa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <SystemClock_Config+0xd4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ab8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001abc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001ac8:	230c      	movs	r3, #12
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001acc:	23a0      	movs	r3, #160	@ 0xa0
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fb89 	bl	80061f8 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aec:	f000 fa7a 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	2302      	movs	r3, #2
 8001af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001afc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f87c 	bl	8005c0c <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b1a:	f000 fa63 	bl	8001fe4 <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	@ 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40007000 	.word	0x40007000

08001b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b36:	463b      	mov	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b44:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <MX_ADC1_Init+0x9c>)
 8001b46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <MX_ADC1_Init+0xa0>)
 8001b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b90:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001b92:	f002 f929 	bl	8003de8 <HAL_ADC_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b9c:	f000 fa22 	bl	8001fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_ADC1_Init+0x98>)
 8001bb2:	f002 f95d 	bl	8003e70 <HAL_ADC_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bbc:	f000 fa12 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20008fa0 	.word	0x20008fa0
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	0f000001 	.word	0x0f000001

08001bd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_CAN1_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001be0:	2205      	movs	r2, #5
 8001be2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bf2:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001bf6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_CAN1_Init+0x64>)
 8001c24:	f002 fb52 	bl	80042cc <HAL_CAN_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c2e:	f000 f9d9 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20008fe8 	.word	0x20008fe8
 8001c3c:	40006400 	.word	0x40006400

08001c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	@ 0x38
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c70:	4b2c      	ldr	r3, [pc, #176]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c78:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 112;
 8001c84:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c86:	2270      	movs	r2, #112	@ 0x70
 8001c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c96:	4823      	ldr	r0, [pc, #140]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001c98:	f004 fd4c 	bl	8006734 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001ca2:	f000 f99f 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481c      	ldr	r0, [pc, #112]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001cb4:	f005 f9ea 	bl	800708c <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001cbe:	f000 f991 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cc2:	4818      	ldr	r0, [pc, #96]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001cc4:	f004 fdf6 	bl	80068b4 <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001cce:	f000 f989 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4810      	ldr	r0, [pc, #64]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001ce2:	f005 feb7 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001cec:	f000 f97a 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	2360      	movs	r3, #96	@ 0x60
 8001cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	220c      	movs	r2, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001d08:	f005 f8fe 	bl	8006f08 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d12:	f000 f967 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d16:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <MX_TIM2_Init+0xe4>)
 8001d18:	f000 fae2 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	@ 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20009010 	.word	0x20009010

08001d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	@ 0x38
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e10 <MX_TIM3_Init+0xe8>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 112;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d6c:	2270      	movs	r2, #112	@ 0x70
 8001d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d7c:	4823      	ldr	r0, [pc, #140]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d7e:	f004 fcd9 	bl	8006734 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001d88:	f000 f92c 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d96:	4619      	mov	r1, r3
 8001d98:	481c      	ldr	r0, [pc, #112]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001d9a:	f005 f977 	bl	800708c <HAL_TIM_ConfigClockSource>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001da4:	f000 f91e 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da8:	4818      	ldr	r0, [pc, #96]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001daa:	f004 fd83 	bl	80068b4 <HAL_TIM_PWM_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001db4:	f000 f916 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4811      	ldr	r0, [pc, #68]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001dc8:	f005 fe44 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001dd2:	f000 f907 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd6:	2360      	movs	r3, #96	@ 0x60
 8001dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	220c      	movs	r2, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001dee:	f005 f88b 	bl	8006f08 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001df8:	f000 f8f4 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <MX_TIM3_Init+0xe4>)
 8001dfe:	f000 fa6f 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3738      	adds	r7, #56	@ 0x38
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20009058 	.word	0x20009058
 8001e10:	40000400 	.word	0x40000400

08001e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_USART2_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	f005 fe92 	bl	8007b74 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f000 f8c5 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20009160 	.word	0x20009160
 8001e64:	40004400 	.word	0x40004400

08001e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <MX_DMA_Init+0x4c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb4 <MX_DMA_Init+0x4c>)
 8001e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <MX_DMA_Init+0x4c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	200d      	movs	r0, #13
 8001e90:	f003 f974 	bl	800517c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e94:	200d      	movs	r0, #13
 8001e96:	f003 f98d 	bl	80051b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	202f      	movs	r0, #47	@ 0x2f
 8001ea0:	f003 f96c 	bl	800517c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001ea4:	202f      	movs	r0, #47	@ 0x2f
 8001ea6:	f003 f985 	bl	80051b4 <HAL_NVIC_EnableIRQ>

}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <MX_GPIO_Init+0xd0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2120      	movs	r1, #32
 8001f42:	4812      	ldr	r0, [pc, #72]	@ (8001f8c <MX_GPIO_Init+0xd4>)
 8001f44:	f003 fe48 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <MX_GPIO_Init+0xd8>)
 8001f5e:	f003 fca7 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f62:	2320      	movs	r3, #32
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_GPIO_Init+0xd4>)
 8001f7a:	f003 fc99 	bl	80058b0 <HAL_GPIO_Init>

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020800 	.word	0x40020800

08001f94 <task_main_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main_loop */
void task_main_loop(void const * argument)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  main_loop();
 8001f9c:	f7ff f900 	bl	80011a0 <main_loop>
    osDelay(10);
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f006 f926 	bl	80081f2 <osDelay>
	  main_loop();
 8001fa6:	bf00      	nop
 8001fa8:	e7f8      	b.n	8001f9c <task_main_loop+0x8>

08001faa <task_gcan_hw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gcan_hw */
void task_gcan_hw(void const * argument)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gcan_hw */
  /* Infinite loop */
  for(;;)
  {
	  can_buffer_handling_loop();
 8001fb2:	f7ff f8e7 	bl	8001184 <can_buffer_handling_loop>
    osDelay(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f006 f91b 	bl	80081f2 <osDelay>
	  can_buffer_handling_loop();
 8001fbc:	bf00      	nop
 8001fbe:	e7f8      	b.n	8001fb2 <task_gcan_hw+0x8>

08001fc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fd2:	f001 fec1 	bl	8003d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40001000 	.word	0x40001000

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <Error_Handler+0x8>

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_MspInit+0x54>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <HAL_MspInit+0x54>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_MspInit+0x54>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_MspInit+0x54>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_MspInit+0x54>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_MspInit+0x54>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	210f      	movs	r1, #15
 8002032:	f06f 0001 	mvn.w	r0, #1
 8002036:	f003 f8a1 	bl	800517c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a17      	ldr	r2, [pc, #92]	@ (80020c4 <HAL_ADC_MspInit+0x7c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d127      	bne.n	80020ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	4a15      	ldr	r2, [pc, #84]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002078:	6453      	str	r3, [r2, #68]	@ 0x44
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <HAL_ADC_MspInit+0x80>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a6:	2303      	movs	r3, #3
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <HAL_ADC_MspInit+0x84>)
 80020b6:	f003 fbfb 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	@ 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40012000 	.word	0x40012000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a25      	ldr	r2, [pc, #148]	@ (8002184 <HAL_CAN_MspInit+0xb4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d144      	bne.n	800217c <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	4a23      	ldr	r2, [pc, #140]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 80020fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002100:	6413      	str	r3, [r2, #64]	@ 0x40
 8002102:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_CAN_MspInit+0xb8>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800212a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800213c:	2309      	movs	r3, #9
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4811      	ldr	r0, [pc, #68]	@ (800218c <HAL_CAN_MspInit+0xbc>)
 8002148:	f003 fbb2 	bl	80058b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2105      	movs	r1, #5
 8002150:	2013      	movs	r0, #19
 8002152:	f003 f813 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002156:	2013      	movs	r0, #19
 8002158:	f003 f82c 	bl	80051b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2105      	movs	r1, #5
 8002160:	2014      	movs	r0, #20
 8002162:	f003 f80b 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002166:	2014      	movs	r0, #20
 8002168:	f003 f824 	bl	80051b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2105      	movs	r1, #5
 8002170:	2015      	movs	r0, #21
 8002172:	f003 f803 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002176:	2015      	movs	r0, #21
 8002178:	f003 f81c 	bl	80051b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40006400 	.word	0x40006400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a0:	d144      	bne.n	800222c <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b48      	ldr	r3, [pc, #288]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a47      	ldr	r2, [pc, #284]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 80021be:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021c0:	4a43      	ldr	r2, [pc, #268]	@ (80022d0 <HAL_TIM_Base_MspInit+0x140>)
 80021c2:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 80021c4:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021c6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80021ca:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021cc:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d2:	4b3e      	ldr	r3, [pc, #248]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80021d8:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021de:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e0:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e8:	4b38      	ldr	r3, [pc, #224]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ee:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_NORMAL;
 80021f0:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80021f6:	4b35      	ldr	r3, [pc, #212]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021fc:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 8002202:	4832      	ldr	r0, [pc, #200]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002204:	f002 ffe4 	bl	80051d0 <HAL_DMA_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800220e:	f7ff fee9 	bl	8001fe4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2d      	ldr	r2, [pc, #180]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	4a2c      	ldr	r2, [pc, #176]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2a      	ldr	r2, [pc, #168]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
 8002224:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <HAL_TIM_Base_MspInit+0x13c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800222a:	e048      	b.n	80022be <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	@ (80022d4 <HAL_TIM_Base_MspInit+0x144>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d143      	bne.n	80022be <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_TIM_Base_MspInit+0x138>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <HAL_TIM_Base_MspInit+0x14c>)
 8002256:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800225a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800225e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002260:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002262:	2240      	movs	r2, #64	@ 0x40
 8002264:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002266:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800226e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002272:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002274:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800227a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800227e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002282:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002296:	4810      	ldr	r0, [pc, #64]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 8002298:	f002 ff9a 	bl	80051d0 <HAL_DMA_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 80022a2:	f7ff fe9f 	bl	8001fe4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022b6:	621a      	str	r2, [r3, #32]
 80022b8:	4a07      	ldr	r2, [pc, #28]	@ (80022d8 <HAL_TIM_Base_MspInit+0x148>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	200090a0 	.word	0x200090a0
 80022d0:	400260b8 	.word	0x400260b8
 80022d4:	40000400 	.word	0x40000400
 80022d8:	20009100 	.word	0x20009100
 80022dc:	40026040 	.word	0x40026040

080022e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002300:	d11e      	bne.n	8002340 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a21      	ldr	r2, [pc, #132]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PIXELS2_Pin;
 800231e:	2304      	movs	r3, #4
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800232e:	2301      	movs	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PIXELS2_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4816      	ldr	r0, [pc, #88]	@ (8002394 <HAL_TIM_MspPostInit+0xb4>)
 800233a:	f003 fab9 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800233e:	e023      	b.n	8002388 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <HAL_TIM_MspPostInit+0xb8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d11e      	bne.n	8002388 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_TIM_MspPostInit+0xb0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PIXELS_Pin;
 8002366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002378:	2302      	movs	r3, #2
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PIXELS_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	4806      	ldr	r0, [pc, #24]	@ (800239c <HAL_TIM_MspPostInit+0xbc>)
 8002384:	f003 fa94 	bl	80058b0 <HAL_GPIO_Init>
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400
 8002398:	40000400 	.word	0x40000400
 800239c:	40020800 	.word	0x40020800

080023a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <HAL_UART_MspInit+0x84>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12b      	bne.n	800241a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a17      	ldr	r2, [pc, #92]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <HAL_UART_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023fa:	230c      	movs	r3, #12
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800240a:	2307      	movs	r3, #7
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	@ (800242c <HAL_UART_MspInit+0x8c>)
 8002416:	f003 fa4b 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	@ 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004400 	.word	0x40004400
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000

08002430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	@ 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_InitTick+0xe4>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	4a32      	ldr	r2, [pc, #200]	@ (8002514 <HAL_InitTick+0xe4>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_InitTick+0xe4>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800245c:	f107 0210 	add.w	r2, r7, #16
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fcea 	bl	8005e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002476:	f003 fcbb 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 800247a:	6378      	str	r0, [r7, #52]	@ 0x34
 800247c:	e004      	b.n	8002488 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800247e:	f003 fcb7 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 8002482:	4603      	mov	r3, r0
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	4a23      	ldr	r2, [pc, #140]	@ (8002518 <HAL_InitTick+0xe8>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	3b01      	subs	r3, #1
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_InitTick+0xec>)
 8002498:	4a21      	ldr	r2, [pc, #132]	@ (8002520 <HAL_InitTick+0xf0>)
 800249a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_InitTick+0xec>)
 800249e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_InitTick+0xec>)
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <HAL_InitTick+0xec>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_InitTick+0xec>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_InitTick+0xec>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024bc:	4817      	ldr	r0, [pc, #92]	@ (800251c <HAL_InitTick+0xec>)
 80024be:	f004 f939 	bl	8006734 <HAL_TIM_Base_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80024c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11b      	bne.n	8002508 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024d0:	4812      	ldr	r0, [pc, #72]	@ (800251c <HAL_InitTick+0xec>)
 80024d2:	f004 f97f 	bl	80067d4 <HAL_TIM_Base_Start_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80024dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024e4:	2036      	movs	r0, #54	@ 0x36
 80024e6:	f002 fe65 	bl	80051b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d808      	bhi.n	8002502 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	2036      	movs	r0, #54	@ 0x36
 80024f6:	f002 fe41 	bl	800517c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_InitTick+0xf4>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e002      	b.n	8002508 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002508:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800250c:	4618      	mov	r0, r3
 800250e:	3738      	adds	r7, #56	@ 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	431bde83 	.word	0x431bde83
 800251c:	200091ac 	.word	0x200091ac
 8002520:	40001000 	.word	0x40001000
 8002524:	20006584 	.word	0x20006584

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <UsageFault_Handler+0x4>

08002550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <DMA1_Stream2_IRQHandler+0x10>)
 8002566:	f002 ff39 	bl	80053dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20009100 	.word	0x20009100

08002574 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <CAN1_TX_IRQHandler+0x10>)
 800257a:	f002 fb5e 	bl	8004c3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20008fe8 	.word	0x20008fe8

08002588 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <CAN1_RX0_IRQHandler+0x10>)
 800258e:	f002 fb54 	bl	8004c3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20008fe8 	.word	0x20008fe8

0800259c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <CAN1_RX1_IRQHandler+0x10>)
 80025a2:	f002 fb4a 	bl	8004c3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20008fe8 	.word	0x20008fe8

080025b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch4);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <DMA1_Stream7_IRQHandler+0x10>)
 80025b6:	f002 ff11 	bl	80053dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200090a0 	.word	0x200090a0

080025c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <TIM6_DAC_IRQHandler+0x10>)
 80025ca:	f004 fb95 	bl	8006cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200091ac 	.word	0x200091ac

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	@ (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	@ (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	@ (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7ff ffd7 	bl	80025d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f008 f9f1 	bl	800aa10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7ff f9c9 	bl	80019c4 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200065e0 	.word	0x200065e0
  ldr r2, =_sidata
 8002640:	0800ae50 	.word	0x0800ae50
  ldr r2, =_sbss
 8002644:	200065e0 	.word	0x200065e0
  ldr r4, =_ebss
 8002648:	2000d9f4 	.word	0x2000d9f4

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <init_can>:
//  MODULE_ID module_id:     what module this is (ex. PDM_ID, ACM_ID)
//  BXCAN_TYPE bx_type:      master or slave BXcan type. This is usually BXTYPE_MASTER
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(U8 bus_id, CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6039      	str	r1, [r7, #0]
 8002658:	4611      	mov	r1, r2
 800265a:	461a      	mov	r2, r3
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	460b      	mov	r3, r1
 8002662:	71bb      	strb	r3, [r7, #6]
 8002664:	4613      	mov	r3, r2
 8002666:	717b      	strb	r3, [r7, #5]
	U8 c;

	// set the current module
	this_module_id = module_id;
 8002668:	4a3e      	ldr	r2, [pc, #248]	@ (8002764 <init_can+0x114>)
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	7013      	strb	r3, [r2, #0]

	// check for invalid bus ID
	if (!(bus_id == GCAN0 || bus_id == GCAN1 || bus_id == GCAN2)) {
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <init_can+0x36>
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d005      	beq.n	8002686 <init_can+0x36>
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d002      	beq.n	8002686 <init_can+0x36>
	    return INIT_FAILED;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
 8002684:	e06a      	b.n	800275c <init_can+0x10c>
        txbuff1.hcan = hcan;
        osMutexDef(txbuff1_mutex);
        txbuff1.mutex = osMutexCreate(osMutex(txbuff1_mutex));
    }
#endif
    if (bus_id == GCAN0) {
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10e      	bne.n	80026aa <init_can+0x5a>
        txbuff0.hcan = hcan;
 800268c:	4a36      	ldr	r2, [pc, #216]	@ (8002768 <init_can+0x118>)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6053      	str	r3, [r2, #4]
        osMutexDef(txbuff0_mutex);
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
        txbuff0.mutex = osMutexCreate(osMutex(txbuff0_mutex));
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	4618      	mov	r0, r3
 80026a0:	f005 fdbb 	bl	800821a <osMutexCreate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <init_can+0x118>)
 80026a8:	6113      	str	r3, [r2, #16]
    }

	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f001 fb74 	bl	8003d98 <HAL_SetTickFreq>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
 80026b4:	e01f      	b.n	80026f6 <init_can+0xa6>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 80026b6:	7dfa      	ldrb	r2, [r7, #23]
 80026b8:	492c      	ldr	r1, [pc, #176]	@ (800276c <init_can+0x11c>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <init_can+0x120>)
 80026c6:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 80026c8:	7dfa      	ldrb	r2, [r7, #23]
 80026ca:	4928      	ldr	r1, [pc, #160]	@ (800276c <init_can+0x11c>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3304      	adds	r3, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 80026dc:	7dfa      	ldrb	r2, [r7, #23]
 80026de:	4923      	ldr	r1, [pc, #140]	@ (800276c <init_can+0x11c>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3308      	adds	r3, #8
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	3301      	adds	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d9dc      	bls.n	80026b6 <init_can+0x66>

	}

	if (init_filters(hcan, bx_type))
 80026fc:	797b      	ldrb	r3, [r7, #5]
 80026fe:	4619      	mov	r1, r3
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f000 f837 	bl	8002774 <init_filters>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <init_can+0xc2>
	{
		return FILTER_SET_FAILED;
 800270c:	f06f 0304 	mvn.w	r3, #4
 8002710:	e024      	b.n	800275c <init_can+0x10c>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8002712:	2102      	movs	r1, #2
 8002714:	6838      	ldr	r0, [r7, #0]
 8002716:	f002 fa43 	bl	8004ba0 <HAL_CAN_ActivateNotification>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <init_can+0xde>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8002720:	2110      	movs	r1, #16
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f002 fa3c 	bl	8004ba0 <HAL_CAN_ActivateNotification>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <init_can+0xe4>
	{
		return IRQ_SET_FAILED;
 800272e:	f06f 0305 	mvn.w	r3, #5
 8002732:	e013      	b.n	800275c <init_can+0x10c>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002734:	2101      	movs	r1, #1
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	f002 fa32 	bl	8004ba0 <HAL_CAN_ActivateNotification>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <init_can+0xf8>
	{
		return IRQ_SET_FAILED;
 8002742:	f06f 0305 	mvn.w	r3, #5
 8002746:	e009      	b.n	800275c <init_can+0x10c>
	}
#endif

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f001 ff9b 	bl	8004684 <HAL_CAN_Start>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <init_can+0x10a>
	{
		return CAN_START_FAILED;
 8002754:	f06f 0306 	mvn.w	r3, #6
 8002758:	e000      	b.n	800275c <init_can+0x10c>
	}

	return CAN_SUCCESS;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20009224 	.word	0x20009224
 8002768:	20000018 	.word	0x20000018
 800276c:	200091f4 	.word	0x200091f4
 8002770:	0800397d 	.word	0x0800397d

08002774 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b092      	sub	sp, #72	@ 0x48
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (bx_type == BXTYPE_SLAVE)
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d102      	bne.n	8002792 <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 800278c:	230e      	movs	r3, #14
 800278e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002792:	2301      	movs	r3, #1
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK; // use mask mode to filter
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
	}
#else

#ifndef IGNORE_DATA
	// accept STD ID messages (IDE=0)
	filterConfig.FilterBank = banknum++;
 800279a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80027a4:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // 16 bit scale includes IDE bit
 80027aa:	2300      	movs	r3, #0
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	filterConfig.FilterIdLow = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = 0b00001000;
 80027b6:	2308      	movs	r3, #8
 80027b8:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f001 fe7d 	bl	80044c4 <HAL_CAN_ConfigFilter>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <init_filters+0x62>
	{
		return FILTER_SET_FAILED;
 80027d0:	f06f 0304 	mvn.w	r3, #4
 80027d4:	e08d      	b.n	80028f2 <init_filters+0x17e>
	}

	// apply same filter to FIFO1
	filterConfig.FilterBank = banknum++;
 80027d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80027e0:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f001 fe69 	bl	80044c4 <HAL_CAN_ConfigFilter>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <init_filters+0x8a>
	{
		return FILTER_SET_FAILED;
 80027f8:	f06f 0304 	mvn.w	r3, #4
 80027fc:	e079      	b.n	80028f2 <init_filters+0x17e>
    U32 filt_id_high;
    U32 filt_mask_high;
    U32 filt_mask_low;

	// accept EXT messages with destination = this_module_id
	filt_id_high = GET_ID_HIGH(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 80027fe:	4b3f      	ldr	r3, [pc, #252]	@ (80028fc <init_filters+0x188>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	065b      	lsls	r3, r3, #25
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
	filt_id_low = GET_ID_LOW(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8002808:	2304      	movs	r3, #4
 800280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 800280c:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
    filt_mask_low = GET_ID_LOW(DEST_MASK);
 8002812:	2304      	movs	r3, #4
 8002814:	637b      	str	r3, [r7, #52]	@ 0x34

	filterConfig.FilterBank = banknum++;
 8002816:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8002820:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002826:	2301      	movs	r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
	filterConfig.FilterIdLow = filt_id_low;
 800282a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282c:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;
 800282e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002830:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;
 8002832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002834:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fe3f 	bl	80044c4 <HAL_CAN_ConfigFilter>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <init_filters+0xde>
	{
		return FILTER_SET_FAILED;
 800284c:	f06f 0304 	mvn.w	r3, #4
 8002850:	e04f      	b.n	80028f2 <init_filters+0x17e>
	}

	// apply same filter to FIFO1
	filterConfig.FilterBank = banknum++;
 8002852:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 800285c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f001 fe2b 	bl	80044c4 <HAL_CAN_ConfigFilter>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <init_filters+0x106>
	{
		return FILTER_SET_FAILED;
 8002874:	f06f 0304 	mvn.w	r3, #4
 8002878:	e03b      	b.n	80028f2 <init_filters+0x17e>
	}

	// accept EXT messages with destination = ALL_MODULES_ID
	filt_id_high = GET_ID_HIGH(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 800287a:	2300      	movs	r3, #0
 800287c:	643b      	str	r3, [r7, #64]	@ 0x40
	filt_id_low = GET_ID_LOW(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 800287e:	2304      	movs	r3, #4
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 8002882:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8002886:	63bb      	str	r3, [r7, #56]	@ 0x38
	filt_mask_low = GET_ID_LOW(DEST_MASK);
 8002888:	2304      	movs	r3, #4
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34

	filterConfig.FilterBank = banknum++;
 800288c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8002896:	623b      	str	r3, [r7, #32]
    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800289c:	2301      	movs	r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
    filterConfig.FilterIdLow = filt_id_low;
 80028a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a2:	613b      	str	r3, [r7, #16]
    filterConfig.FilterIdHigh = filt_id_high;
 80028a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a6:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;
 80028ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ae:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f001 fe04 	bl	80044c4 <HAL_CAN_ConfigFilter>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <init_filters+0x154>
	{
		return FILTER_SET_FAILED;
 80028c2:	f06f 0304 	mvn.w	r3, #4
 80028c6:	e014      	b.n	80028f2 <init_filters+0x17e>
	}

	// apply same filter to FIFO1
	filterConfig.FilterBank = banknum++;
 80028c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 80028d2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 fdf0 	bl	80044c4 <HAL_CAN_ConfigFilter>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <init_filters+0x17c>
	{
		return FILTER_SET_FAILED;
 80028ea:	f06f 0304 	mvn.w	r3, #4
 80028ee:	e000      	b.n	80028f2 <init_filters+0x17e>
	}

#endif // CAN_ROUTER

	return CAN_SUCCESS;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3748      	adds	r7, #72	@ 0x48
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20009224 	.word	0x20009224

08002900 <send_parameter>:
// params:
// CAN_INFO_STRUCT* param: parameter to send (along with its group)
// returns:
// error codes specified in GopherCAN.h
S8 send_parameter(CAN_INFO_STRUCT* param)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	return send_group(param->GROUP_ID);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	885b      	ldrh	r3, [r3, #2]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f805 	bl	800291c <send_group>
 8002912:	4603      	mov	r3, r0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <send_group>:
// params:
//  U16 group_id: the CAN ID of the group to be sent
// returns:
//  error codes specificed in GopherCAN.h
S8 send_group(U16 group_id)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b091      	sub	sp, #68	@ 0x44
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
    PARAM_GROUP* group = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // find the specified parameter group
    for (U8 i = 0; i < NUM_OF_GROUPS; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002930:	e01a      	b.n	8002968 <send_group+0x4c>
    {
        if (GROUPS[i].group_id == group_id)
 8002932:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8002936:	494e      	ldr	r1, [pc, #312]	@ (8002a70 <send_group+0x154>)
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	429a      	cmp	r2, r3
 8002948:	d109      	bne.n	800295e <send_group+0x42>
        {
            group = &GROUPS[i];
 800294a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4a46      	ldr	r2, [pc, #280]	@ (8002a70 <send_group+0x154>)
 8002958:	4413      	add	r3, r2
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800295c:	e008      	b.n	8002970 <send_group+0x54>
    for (U8 i = 0; i < NUM_OF_GROUPS; i++)
 800295e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002962:	3301      	adds	r3, #1
 8002964:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002968:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800296c:	2b8e      	cmp	r3, #142	@ 0x8e
 800296e:	d9e0      	bls.n	8002932 <send_group+0x16>
        }
    }

    if (group == NULL) return NOT_FOUND_ERR;
 8002970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <send_group+0x60>
 8002976:	f06f 0309 	mvn.w	r3, #9
 800297a:	e074      	b.n	8002a66 <send_group+0x14a>

    // build parameter group message. Setting the data to 0 means that training zeros
    // will be properly removed when sending the message, cutting down the DLC with it
    CAN_MSG message = {
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	2224      	movs	r2, #36	@ 0x24
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f007 ffdf 	bl	800a948 <memset>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2308      	movs	r3, #8
 8002990:	61fb      	str	r3, [r7, #28]
    };

    // run through all of the bytes in the group, putting the correct data in them based
    // on the parameters that are in this group
    S8 err;
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002998:	e032      	b.n	8002a00 <send_group+0xe4>
    {
        GCAN_PARAM_ID id = group->param_ids[i];
 800299a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800299e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	885b      	ldrh	r3, [r3, #2]
 80029a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if (id == EMPTY_ID) continue;
 80029a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d022      	beq.n	80029f4 <send_group+0xd8>

        // check to make sure this is a good id. We are down bad if it is not
        if (id < EMPTY_ID || id >= NUM_OF_PARAMETERS) return BAD_PARAMETER_ID;
 80029ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029b0:	f240 2289 	movw	r2, #649	@ 0x289
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d902      	bls.n	80029be <send_group+0xa2>
 80029b8:	f06f 0302 	mvn.w	r3, #2
 80029bc:	e053      	b.n	8002a66 <send_group+0x14a>

        // add this parameter's data to the message
        CAN_INFO_STRUCT* parameter = (CAN_INFO_STRUCT*) PARAMETERS[id];
 80029be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80029c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a74 <send_group+0x158>)
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
        err = encode_parameter(parameter, message.data, i, parameter->ENC_SIZE);
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	79d8      	ldrb	r0, [r3, #7]
 80029cc:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	f103 0118 	add.w	r1, r3, #24
 80029d8:	4603      	mov	r3, r0
 80029da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029dc:	f000 f84c 	bl	8002a78 <encode_parameter>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        if (err) return err;
 80029e6:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <send_group+0xda>
 80029ee:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 80029f2:	e038      	b.n	8002a66 <send_group+0x14a>
        if (id == EMPTY_ID) continue;
 80029f4:	bf00      	nop
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 80029f6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80029fa:	3301      	adds	r3, #1
 80029fc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002a00:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	d9c8      	bls.n	800299a <send_group+0x7e>
    }

    // send the message
    err = tx_can_message(&message);
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fd3d 	bl	800348c <tx_can_message>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    if (err) return err;
 8002a18:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <send_group+0x10a>
 8002a20:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8002a24:	e01f      	b.n	8002a66 <send_group+0x14a>

    // if successful send, update the last_tx for all of the sent parameters
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8002a2c:	e016      	b.n	8002a5c <send_group+0x140>
    {
        GCAN_PARAM_ID id = group->param_ids[i];
 8002a2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	885b      	ldrh	r3, [r3, #2]
 8002a3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if (id != EMPTY_ID) ((CAN_INFO_STRUCT*)PARAMETERS[id])->last_tx = HAL_GetTick();
 8002a3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <send_group+0x136>
 8002a42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a44:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <send_group+0x158>)
 8002a46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002a4a:	f001 f999 	bl	8003d80 <HAL_GetTick>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6123      	str	r3, [r4, #16]
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8002a52:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a56:	3301      	adds	r3, #1
 8002a58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8002a5c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a60:	2b07      	cmp	r3, #7
 8002a62:	d9e4      	bls.n	8002a2e <send_group+0x112>
    }

    return CAN_SUCCESS;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3744      	adds	r7, #68	@ 0x44
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20005b74 	.word	0x20005b74
 8002a74:	2000514c 	.word	0x2000514c

08002a78 <encode_parameter>:

// encode_parameter
// encodes a parameter as an unsigned int with scale & offset
// adds encoded param to the CAN message data field
static S8 encode_parameter(CAN_INFO_STRUCT* param, U8* data, U8 start, U8 length)
{
 8002a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a7c:	b09e      	sub	sp, #120	@ 0x78
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6678      	str	r0, [r7, #100]	@ 0x64
 8002a82:	6639      	str	r1, [r7, #96]	@ 0x60
 8002a84:	4619      	mov	r1, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    U64 value = 0;
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // apply quantization and store in U64
    // use scale = 1 if necessary to avoid divide by 0 due to truncation
    switch (param->TYPE) {
 8002a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aa0:	791b      	ldrb	r3, [r3, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	f200 81b1 	bhi.w	8002e0c <encode_parameter+0x394>
 8002aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <encode_parameter+0x38>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002ba3 	.word	0x08002ba3
 8002ab8:	08002c59 	.word	0x08002c59
 8002abc:	08002cf5 	.word	0x08002cf5
 8002ac0:	08002b3b 	.word	0x08002b3b
 8002ac4:	08002bfd 	.word	0x08002bfd
 8002ac8:	08002ca9 	.word	0x08002ca9
 8002acc:	08002d6b 	.word	0x08002d6b
 8002ad0:	08002de1 	.word	0x08002de1
        case UNSIGNED8:
            value = (((U8_CAN_STRUCT*)param)->data - (U8)param->OFFSET)
 8002ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ad6:	7f1b      	ldrb	r3, [r3, #28]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002adc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002ae8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	1ad2      	subs	r2, r2, r3
                / ((U8)param->SCALE + ((U8)param->SCALE == 0));
 8002af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002af2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002afa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002afe:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b10:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b14:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	440b      	add	r3, r1
 8002b26:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((U8_CAN_STRUCT*)param)->data - (U8)param->OFFSET)
 8002b2a:	17da      	asrs	r2, r3, #31
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b34:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002b38:	e16b      	b.n	8002e12 <encode_parameter+0x39a>
        case SIGNED8:
            value = (((S8_CAN_STRUCT*)param)->data - (S8)param->OFFSET)
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002b40:	461a      	mov	r2, r3
 8002b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b44:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b4c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b50:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	1ad2      	subs	r2, r2, r3
                / ((S8)param->SCALE + ((S8)param->SCALE == 0));
 8002b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b62:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b66:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b78:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002b7c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((S8_CAN_STRUCT*)param)->data - (S8)param->OFFSET)
 8002b92:	17da      	asrs	r2, r3, #31
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	61fa      	str	r2, [r7, #28]
 8002b98:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002b9c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002ba0:	e137      	b.n	8002e12 <encode_parameter+0x39a>
        case UNSIGNED16:
            value = (((U16_CAN_STRUCT*)param)->data - (U16)param->OFFSET)
 8002ba2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba4:	8b9b      	ldrh	r3, [r3, #28]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002baa:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb2:	ee17 3a90 	vmov	r3, s15
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	1ad2      	subs	r2, r2, r3
                / ((U16)param->SCALE + ((U16)param->SCALE == 0));
 8002bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 3a90 	vmov	r3, s15
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd6:	ee17 3a90 	vmov	r3, s15
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	440b      	add	r3, r1
 8002be8:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((U16_CAN_STRUCT*)param)->data - (U16)param->OFFSET)
 8002bec:	17da      	asrs	r2, r3, #31
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	617a      	str	r2, [r7, #20]
 8002bf2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002bf6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002bfa:	e10a      	b.n	8002e12 <encode_parameter+0x39a>
        case SIGNED16:
            value = (((S16_CAN_STRUCT*)param)->data - (S16)param->OFFSET)
 8002bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002c02:	461a      	mov	r2, r3
 8002c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c0e:	ee17 3a90 	vmov	r3, s15
 8002c12:	b21b      	sxth	r3, r3
 8002c14:	1ad2      	subs	r2, r2, r3
                / ((S16)param->SCALE + ((S16)param->SCALE == 0));
 8002c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c18:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c20:	ee17 3a90 	vmov	r3, s15
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c32:	ee17 3a90 	vmov	r3, s15
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	440b      	add	r3, r1
 8002c44:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((S16_CAN_STRUCT*)param)->data - (S16)param->OFFSET)
 8002c48:	17da      	asrs	r2, r3, #31
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	60fa      	str	r2, [r7, #12]
 8002c4e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c52:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002c56:	e0dc      	b.n	8002e12 <encode_parameter+0x39a>
        case UNSIGNED32:
            value = (((U32_CAN_STRUCT*)param)->data - (U32)(param->OFFSET))
 8002c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c5e:	edd2 7a03 	vldr	s15, [r2, #12]
 8002c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c66:	ee17 2a90 	vmov	r2, s15
 8002c6a:	1a9a      	subs	r2, r3, r2
                / ((U32)param->SCALE + ((U32)param->SCALE == 0));
 8002c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c76:	ee17 1a90 	vmov	r1, s15
 8002c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c84:	ee17 3a90 	vmov	r3, s15
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	440b      	add	r3, r1
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
            value = (((U32_CAN_STRUCT*)param)->data - (U32)(param->OFFSET))
 8002c98:	2200      	movs	r2, #0
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ca2:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
            break;
 8002ca6:	e0b4      	b.n	8002e12 <encode_parameter+0x39a>
        case SIGNED32:
            value = (((S32_CAN_STRUCT*)param)->data - (S32)(param->OFFSET))
 8002ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002cae:	edd2 7a03 	vldr	s15, [r2, #12]
 8002cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb6:	ee17 2a90 	vmov	r2, s15
 8002cba:	1a9a      	subs	r2, r3, r2
                / ((S32)param->SCALE + ((S32)param->SCALE == 0));
 8002cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc6:	ee17 1a90 	vmov	r1, s15
 8002cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ccc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd4:	ee17 3a90 	vmov	r3, s15
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	fb92 f3f3 	sdiv	r3, r2, r3
            value = (((S32_CAN_STRUCT*)param)->data - (S32)(param->OFFSET))
 8002ce8:	17da      	asrs	r2, r3, #31
 8002cea:	461c      	mov	r4, r3
 8002cec:	4615      	mov	r5, r2
 8002cee:	e9c7 451c 	strd	r4, r5, [r7, #112]	@ 0x70
            break;
 8002cf2:	e08e      	b.n	8002e12 <encode_parameter+0x39a>
        case UNSIGNED64:
            value = (((U64_CAN_STRUCT*)param)->data - (U64)param->OFFSET)
 8002cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f87c 	bl	8000dfc <__aeabi_f2ulz>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	1aa1      	subs	r1, r4, r2
 8002d0a:	6539      	str	r1, [r7, #80]	@ 0x50
 8002d0c:	eb65 0303 	sbc.w	r3, r5, r3
 8002d10:	657b      	str	r3, [r7, #84]	@ 0x54
                / ((U64)param->SCALE + ((U64)param->SCALE == 0));
 8002d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe f870 	bl	8000dfc <__aeabi_f2ulz>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	460d      	mov	r5, r1
 8002d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe f869 	bl	8000dfc <__aeabi_f2ulz>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002d46:	460b      	mov	r3, r1
 8002d48:	18e3      	adds	r3, r4, r3
 8002d4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	eb45 0303 	adc.w	r3, r5, r3
 8002d52:	647b      	str	r3, [r7, #68]	@ 0x44
            value = (((U64_CAN_STRUCT*)param)->data - (U64)param->OFFSET)
 8002d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d5c:	f7fe f822 	bl	8000da4 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            break;
 8002d68:	e053      	b.n	8002e12 <encode_parameter+0x39a>
        case SIGNED64:
            value = (((S64_CAN_STRUCT*)param)->data - (S64)param->OFFSET)
 8002d6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f82d 	bl	8000dd4 <__aeabi_f2lz>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	1aa1      	subs	r1, r4, r2
 8002d80:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d82:	eb65 0303 	sbc.w	r3, r5, r3
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
                / ((S64)param->SCALE + ((S64)param->SCALE == 0));
 8002d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe f821 	bl	8000dd4 <__aeabi_f2lz>
 8002d92:	4604      	mov	r4, r0
 8002d94:	460d      	mov	r5, r1
 8002d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f81a 	bl	8000dd4 <__aeabi_f2lz>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002db6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002db8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	18e3      	adds	r3, r4, r3
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	eb45 0303 	adc.w	r3, r5, r3
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002dd2:	f7fd ff97 	bl	8000d04 <__aeabi_ldivmod>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
            value = (((S64_CAN_STRUCT*)param)->data - (S64)param->OFFSET)
 8002dda:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            break;
 8002dde:	e018      	b.n	8002e12 <encode_parameter+0x39a>
        case FLOATING:
            // send floats as signed values
            value = (S64)( (((FLOAT_CAN_STRUCT*)param)->data - param->OFFSET) / param->SCALE );
 8002de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002df2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002df6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002dfa:	ee16 0a90 	vmov	r0, s13
 8002dfe:	f7fd ffe9 	bl	8000dd4 <__aeabi_f2lz>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            break;
 8002e0a:	e002      	b.n	8002e12 <encode_parameter+0x39a>
        default:
            return ENCODING_ERR;
 8002e0c:	f06f 030d 	mvn.w	r3, #13
 8002e10:	e060      	b.n	8002ed4 <encode_parameter+0x45c>
    }

    // move bytes into data field
    for (U8 i = 0; i < length; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002e18:	e055      	b.n	8002ec6 <encode_parameter+0x44e>
        if (param->ENC == LSB) {
 8002e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1c:	799b      	ldrb	r3, [r3, #6]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d120      	bne.n	8002e64 <encode_parameter+0x3ec>
            data[start + i] = value >> (i * BITS_IN_BYTE);
 8002e22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e26:	00d9      	lsls	r1, r3, #3
 8002e28:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e2c:	f1c1 0420 	rsb	r4, r1, #32
 8002e30:	f1a1 0020 	sub.w	r0, r1, #32
 8002e34:	fa22 f801 	lsr.w	r8, r2, r1
 8002e38:	fa03 f404 	lsl.w	r4, r3, r4
 8002e3c:	ea48 0804 	orr.w	r8, r8, r4
 8002e40:	fa23 f000 	lsr.w	r0, r3, r0
 8002e44:	ea48 0800 	orr.w	r8, r8, r0
 8002e48:	fa23 f901 	lsr.w	r9, r3, r1
 8002e4c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002e50:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e54:	4413      	add	r3, r2
 8002e56:	461a      	mov	r2, r3
 8002e58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e5a:	4413      	add	r3, r2
 8002e5c:	fa5f f288 	uxtb.w	r2, r8
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e02b      	b.n	8002ebc <encode_parameter+0x444>
        } else if (param->ENC == MSB) {
 8002e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e66:	799b      	ldrb	r3, [r3, #6]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d124      	bne.n	8002eb6 <encode_parameter+0x43e>
            data[start + i] = value >> ((length - 1 - i) * BITS_IN_BYTE);
 8002e6c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	00d9      	lsls	r1, r3, #3
 8002e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e7e:	f1c1 0420 	rsb	r4, r1, #32
 8002e82:	f1a1 0020 	sub.w	r0, r1, #32
 8002e86:	fa22 fa01 	lsr.w	sl, r2, r1
 8002e8a:	fa03 f404 	lsl.w	r4, r3, r4
 8002e8e:	ea4a 0a04 	orr.w	sl, sl, r4
 8002e92:	fa23 f000 	lsr.w	r0, r3, r0
 8002e96:	ea4a 0a00 	orr.w	sl, sl, r0
 8002e9a:	fa23 fb01 	lsr.w	fp, r3, r1
 8002e9e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002ea2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002ea6:	4413      	add	r3, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eac:	4413      	add	r3, r2
 8002eae:	fa5f f28a 	uxtb.w	r2, sl
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e002      	b.n	8002ebc <encode_parameter+0x444>
        } else return ENCODING_ERR;
 8002eb6:	f06f 030d 	mvn.w	r3, #13
 8002eba:	e00b      	b.n	8002ed4 <encode_parameter+0x45c>
    for (U8 i = 0; i < length; i++) {
 8002ebc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002ec6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002eca:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d3a3      	bcc.n	8002e1a <encode_parameter+0x3a2>
    }

    return CAN_SUCCESS;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3778      	adds	r7, #120	@ 0x78
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ede:	bf00      	nop

08002ee0 <decode_parameter>:


// decode_parameter
// extract and decode a parameter from CAN data field
static S8 decode_parameter(CAN_INFO_STRUCT* param, U8* data, U8 start, U8 length)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b098      	sub	sp, #96	@ 0x60
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002eea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002eec:	4619      	mov	r1, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    U64 value = 0;
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    float value_fl = 0;
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	657b      	str	r3, [r7, #84]	@ 0x54

    // reconstruct U64
    for (U8 i = 0; i < length; i++) {
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002f12:	e051      	b.n	8002fb8 <decode_parameter+0xd8>
        if (param->ENC == LSB) {
 8002f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f16:	799b      	ldrb	r3, [r3, #6]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11e      	bne.n	8002f5a <decode_parameter+0x7a>
            value |= data[start + i] << (i * BITS_IN_BYTE);
 8002f1c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002f20:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f24:	4413      	add	r3, r2
 8002f26:	461a      	mov	r2, r3
 8002f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	17da      	asrs	r2, r3, #31
 8002f3c:	469a      	mov	sl, r3
 8002f3e:	4693      	mov	fp, r2
 8002f40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f44:	ea42 010a 	orr.w	r1, r2, sl
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	ea43 030b 	orr.w	r3, r3, fp
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f54:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002f58:	e029      	b.n	8002fae <decode_parameter+0xce>
        } else if (param->ENC == MSB) {
 8002f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f5c:	799b      	ldrb	r3, [r3, #6]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d122      	bne.n	8002fa8 <decode_parameter+0xc8>
            value |= data[start + i] << ((length - 1 - i) * BITS_IN_BYTE);
 8002f62:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002f66:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f6a:	4413      	add	r3, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	17da      	asrs	r2, r3, #31
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f94:	4311      	orrs	r1, r2
 8002f96:	6039      	str	r1, [r7, #0]
 8002f98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fa2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002fa6:	e002      	b.n	8002fae <decode_parameter+0xce>
        } else return DECODING_ERR;
 8002fa8:	f06f 030e 	mvn.w	r3, #14
 8002fac:	e16d      	b.n	800328a <decode_parameter+0x3aa>
    for (U8 i = 0; i < length; i++) {
 8002fae:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002fb8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002fbc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d3a7      	bcc.n	8002f14 <decode_parameter+0x34>
    }

    // restore original type
    switch (param->TYPE) {
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc6:	791b      	ldrb	r3, [r3, #4]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	f200 8159 	bhi.w	8003282 <decode_parameter+0x3a2>
 8002fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <decode_parameter+0xf8>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08003085 	.word	0x08003085
 8002fe0:	080030fb 	.word	0x080030fb
 8002fe4:	08003159 	.word	0x08003159
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	080030b9 	.word	0x080030b9
 8002ff0:	08003125 	.word	0x08003125
 8002ff4:	080031a7 	.word	0x080031a7
 8002ff8:	080031f1 	.word	0x080031f1
        case UNSIGNED8:
            ((U8_CAN_STRUCT*)param)->data = (value * (U8)param->SCALE) + (U8)param->OFFSET;
 8002ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ffe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003006:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 800300a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800300e:	b2da      	uxtb	r2, r3
 8003010:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003014:	fb12 f303 	smulbb	r3, r2, r3
 8003018:	b2da      	uxtb	r2, r3
 800301a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800301c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003024:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003028:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800302c:	b2db      	uxtb	r3, r3
 800302e:	4413      	add	r3, r2
 8003030:	b2da      	uxtb	r2, r3
 8003032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003034:	771a      	strb	r2, [r3, #28]
            break;
 8003036:	e127      	b.n	8003288 <decode_parameter+0x3a8>
        case SIGNED8:
            ((S8_CAN_STRUCT*)param)->data = (value * (S8)param->SCALE) + (S8)param->OFFSET;
 8003038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800303a:	edd3 7a02 	vldr	s15, [r3, #8]
 800303e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003042:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003046:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800304a:	b25b      	sxtb	r3, r3
 800304c:	b25b      	sxtb	r3, r3
 800304e:	17da      	asrs	r2, r3, #31
 8003050:	633b      	str	r3, [r7, #48]	@ 0x30
 8003052:	637a      	str	r2, [r7, #52]	@ 0x34
 8003054:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003058:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800305c:	fb12 f303 	smulbb	r3, r2, r3
 8003060:	b2da      	uxtb	r2, r3
 8003062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003064:	edd3 7a03 	vldr	s15, [r3, #12]
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003070:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003074:	b25b      	sxtb	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4413      	add	r3, r2
 800307a:	b2db      	uxtb	r3, r3
 800307c:	b25a      	sxtb	r2, r3
 800307e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003080:	771a      	strb	r2, [r3, #28]
            break;
 8003082:	e101      	b.n	8003288 <decode_parameter+0x3a8>
        case UNSIGNED16:
            ((U16_CAN_STRUCT*)param)->data = (value * (U16)param->SCALE) + (U16)param->OFFSET;
 8003084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003086:	edd3 7a02 	vldr	s15, [r3, #8]
 800308a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308e:	ee17 3a90 	vmov	r3, s15
 8003092:	b29a      	uxth	r2, r3
 8003094:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003098:	fb12 f303 	smulbb	r3, r2, r3
 800309c:	b29a      	uxth	r2, r3
 800309e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80030a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a8:	ee17 3a90 	vmov	r3, s15
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b4:	839a      	strh	r2, [r3, #28]
            break;
 80030b6:	e0e7      	b.n	8003288 <decode_parameter+0x3a8>
        case SIGNED16:
            ((S16_CAN_STRUCT*)param)->data = (value * (S16)param->SCALE) + (S16)param->OFFSET;
 80030b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80030be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c2:	ee17 3a90 	vmov	r3, s15
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	17da      	asrs	r2, r3, #31
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80030d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80030d6:	fb12 f303 	smulbb	r3, r2, r3
 80030da:	b29a      	uxth	r2, r3
 80030dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030de:	edd3 7a03 	vldr	s15, [r3, #12]
 80030e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e6:	ee17 3a90 	vmov	r3, s15
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f6:	839a      	strh	r2, [r3, #28]
            break;
 80030f8:	e0c6      	b.n	8003288 <decode_parameter+0x3a8>
        case UNSIGNED32:
            ((U32_CAN_STRUCT*)param)->data = (value * (U32)param->SCALE) + (U32)param->OFFSET;
 80030fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003104:	ee17 2a90 	vmov	r2, s15
 8003108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003110:	edd2 7a03 	vldr	s15, [r2, #12]
 8003114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003118:	ee17 2a90 	vmov	r2, s15
 800311c:	441a      	add	r2, r3
 800311e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003120:	61da      	str	r2, [r3, #28]
            break;
 8003122:	e0b1      	b.n	8003288 <decode_parameter+0x3a8>
        case SIGNED32:
            ((S32_CAN_STRUCT*)param)->data = (value * (S32)param->SCALE) + (S32)param->OFFSET;
 8003124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003126:	edd3 7a02 	vldr	s15, [r3, #8]
 800312a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312e:	ee17 2a90 	vmov	r2, s15
 8003132:	17d3      	asrs	r3, r2, #31
 8003134:	623a      	str	r2, [r7, #32]
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003142:	edd2 7a03 	vldr	s15, [r2, #12]
 8003146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800314a:	ee17 2a90 	vmov	r2, s15
 800314e:	4413      	add	r3, r2
 8003150:	461a      	mov	r2, r3
 8003152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003154:	61da      	str	r2, [r3, #28]
            break;
 8003156:	e097      	b.n	8003288 <decode_parameter+0x3a8>
        case UNSIGNED64:
            ((U64_CAN_STRUCT*)param)->data = (value * (U64)param->SCALE) + (U64)param->OFFSET;
 8003158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fe4d 	bl	8000dfc <__aeabi_f2ulz>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003168:	fb03 f001 	mul.w	r0, r3, r1
 800316c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800316e:	fb02 f101 	mul.w	r1, r2, r1
 8003172:	4401      	add	r1, r0
 8003174:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003176:	fba0 8902 	umull	r8, r9, r0, r2
 800317a:	eb01 0309 	add.w	r3, r1, r9
 800317e:	4699      	mov	r9, r3
 8003180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fe39 	bl	8000dfc <__aeabi_f2ulz>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	eb18 0102 	adds.w	r1, r8, r2
 8003192:	61b9      	str	r1, [r7, #24]
 8003194:	eb49 0303 	adc.w	r3, r9, r3
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800319c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031a0:	e9c3 1208 	strd	r1, r2, [r3, #32]
            break;
 80031a4:	e070      	b.n	8003288 <decode_parameter+0x3a8>
        case SIGNED64:
            ((S64_CAN_STRUCT*)param)->data = (value * (S64)param->SCALE) + (S64)param->OFFSET;
 80031a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fe12 	bl	8000dd4 <__aeabi_f2lz>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80031b6:	fb03 f001 	mul.w	r0, r3, r1
 80031ba:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80031bc:	fb02 f101 	mul.w	r1, r2, r1
 80031c0:	4401      	add	r1, r0
 80031c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80031c4:	fba0 4502 	umull	r4, r5, r0, r2
 80031c8:	194b      	adds	r3, r1, r5
 80031ca:	461d      	mov	r5, r3
 80031cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fdff 	bl	8000dd4 <__aeabi_f2lz>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	18a1      	adds	r1, r4, r2
 80031dc:	6139      	str	r1, [r7, #16]
 80031de:	eb45 0303 	adc.w	r3, r5, r3
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80031ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
            break;
 80031ee:	e04b      	b.n	8003288 <decode_parameter+0x3a8>
				else if (length == 4) value_fl = (S32)value;
				else if (length == 8) value_fl = (S64)value;
				else value_fl = value;
        	}
#else
            if (length == 1) value_fl = (S8)value;
 80031f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d108      	bne.n	800320a <decode_parameter+0x32a>
 80031f8:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003204:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8003208:	e02b      	b.n	8003262 <decode_parameter+0x382>
            else if (length == 2) value_fl = (S16)value;
 800320a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800320e:	2b02      	cmp	r3, #2
 8003210:	d108      	bne.n	8003224 <decode_parameter+0x344>
 8003212:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8003222:	e01e      	b.n	8003262 <decode_parameter+0x382>
            else if (length == 4) value_fl = (S32)value;
 8003224:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003228:	2b04      	cmp	r3, #4
 800322a:	d107      	bne.n	800323c <decode_parameter+0x35c>
 800322c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003236:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800323a:	e012      	b.n	8003262 <decode_parameter+0x382>
            else if (length == 8) value_fl = (S64)value;
 800323c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003240:	2b08      	cmp	r3, #8
 8003242:	d108      	bne.n	8003256 <decode_parameter+0x376>
 8003244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	f7fd fd1c 	bl	8000c88 <__aeabi_l2f>
 8003250:	4603      	mov	r3, r0
 8003252:	657b      	str	r3, [r7, #84]	@ 0x54
 8003254:	e005      	b.n	8003262 <decode_parameter+0x382>
            else value_fl = value;
 8003256:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800325a:	f7fd fd0d 	bl	8000c78 <__aeabi_ul2f>
 800325e:	4603      	mov	r3, r0
 8003260:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
            ((FLOAT_CAN_STRUCT*)param)->data = (value_fl * param->SCALE) + param->OFFSET;
 8003262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003264:	ed93 7a02 	vldr	s14, [r3, #8]
 8003268:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800326c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003272:	edd3 7a03 	vldr	s15, [r3, #12]
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800327c:	edc3 7a07 	vstr	s15, [r3, #28]
            break;
 8003280:	e002      	b.n	8003288 <decode_parameter+0x3a8>
        default:
            return DECODING_ERR;
 8003282:	f06f 030e 	mvn.w	r3, #14
 8003286:	e000      	b.n	800328a <decode_parameter+0x3aa>
    }

    return CAN_SUCCESS;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3760      	adds	r7, #96	@ 0x60
 800328e:	46bd      	mov	sp, r7
 8003290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003294 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
static void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	CAN_MSG* message;
	CAN_MSG_RING_BUFFER* buffer;
    U32 tx_mailbox_num;

	// With multiple busses, choose the correct bus buffer to be working with
	buffer = choose_tx_buffer_from_hcan(hcan);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fbe7 	bl	8003a70 <choose_tx_buffer_from_hcan>
 80032a2:	6178      	str	r0, [r7, #20]

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80032a4:	e028      	b.n	80032f8 <service_can_tx_hardware+0x64>
	{
		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	7b5b      	ldrb	r3, [r3, #13]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	7b12      	ldrb	r2, [r2, #12]
 80032b2:	fb93 f0f2 	sdiv	r0, r3, r2
 80032b6:	fb00 f202 	mul.w	r2, r0, r2
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	613b      	str	r3, [r7, #16]

		// configure the settings/params of the CAN message
		message->header.TransmitGlobalTime = DISABLE;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2200      	movs	r2, #0
 80032ce:	751a      	strb	r2, [r3, #20]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &(message->header), message->data, &tx_mailbox_num) != HAL_OK)
 80032d0:	6939      	ldr	r1, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f103 0218 	add.w	r2, r3, #24
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f001 fa15 	bl	800470c <HAL_CAN_AddTxMessage>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <service_can_tx_hardware+0x5e>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <service_can_tx_hardware+0x80>)
 80032ee:	6013      	str	r3, [r2, #0]
			return;
 80032f0:	e00d      	b.n	800330e <service_can_tx_hardware+0x7a>
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f000 fbe6 	bl	8003ac4 <remove_from_front>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	7b9b      	ldrb	r3, [r3, #14]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <service_can_tx_hardware+0x78>
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f001 fade 	bl	80048c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1cc      	bne.n	80032a6 <service_can_tx_hardware+0x12>
	}

	return;
 800330c:	bf00      	nop
}
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20009234 	.word	0x20009234

08003318 <service_can_tx>:
// service_can_tx
// Calls service_can_tx_hardware
// Acquires mutexes and temporarily disables interrupts
//  designed to be called at high priority on 1ms loop
void service_can_tx(CAN_HandleTypeDef* hcan)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    CAN_MSG_RING_BUFFER* buffer;

    // find buffer connected to this bus
    buffer = choose_tx_buffer_from_hcan(hcan);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fba5 	bl	8003a70 <choose_tx_buffer_from_hcan>
 8003326:	60f8      	str	r0, [r7, #12]

    // protect buffer from RTOS thread switching
    if (buffer->mutex != NULL) {
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <service_can_tx+0x2a>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2105      	movs	r1, #5
 8003336:	4618      	mov	r0, r3
 8003338:	f004 ff88 	bl	800824c <osMutexWait>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d114      	bne.n	800336c <service_can_tx+0x54>
    }
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    // protect buffer from interrupts
    HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8003342:	2101      	movs	r1, #1
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f001 fc51 	bl	8004bec <HAL_CAN_DeactivateNotification>
#endif

    service_can_tx_hardware(hcan);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffa2 	bl	8003294 <service_can_tx_hardware>

#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8003350:	2101      	movs	r1, #1
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 fc24 	bl	8004ba0 <HAL_CAN_ActivateNotification>
#endif
    if (buffer->mutex != NULL) {
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <service_can_tx+0x58>
        osMutexRelease(buffer->mutex);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 ffbf 	bl	80082e8 <osMutexRelease>
    }

    return;
 800336a:	e001      	b.n	8003370 <service_can_tx+0x58>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <service_can_tx+0x5a>
    return;
 8003370:	bf00      	nop
}
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <service_can_rx_hardware>:
//  U32 rx_mailbox:         the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//                           Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	@ 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rxbuff) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8003382:	e03f      	b.n	8003404 <service_can_rx_hardware+0x8c>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rxbuff, rxbuff.fill_level);
 8003384:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <service_can_rx_hardware+0xac>)
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	4b26      	ldr	r3, [pc, #152]	@ (8003424 <service_can_rx_hardware+0xac>)
 800338a:	7b5b      	ldrb	r3, [r3, #13]
 800338c:	461a      	mov	r2, r3
 800338e:	4b25      	ldr	r3, [pc, #148]	@ (8003424 <service_can_rx_hardware+0xac>)
 8003390:	7b9b      	ldrb	r3, [r3, #14]
 8003392:	4413      	add	r3, r2
 8003394:	4a23      	ldr	r2, [pc, #140]	@ (8003424 <service_can_rx_hardware+0xac>)
 8003396:	7b12      	ldrb	r2, [r2, #12]
 8003398:	fb93 f0f2 	sdiv	r0, r3, r2
 800339c:	fb00 f202 	mul.w	r2, r0, r2
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	461a      	mov	r2, r3
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	3318      	adds	r3, #24
 80033b4:	f107 0208 	add.w	r2, r7, #8
 80033b8:	6839      	ldr	r1, [r7, #0]
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f001 fab6 	bl	800492c <HAL_CAN_GetRxMessage>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <service_can_rx_hardware+0x58>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	4a17      	ldr	r2, [pc, #92]	@ (8003428 <service_can_rx_hardware+0xb0>)
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e026      	b.n	800341e <service_can_rx_hardware+0xa6>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rxbuff.fill_level++;
 80033d0:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <service_can_rx_hardware+0xac>)
 80033d2:	7b9b      	ldrb	r3, [r3, #14]
 80033d4:	3301      	adds	r3, #1
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <service_can_rx_hardware+0xac>)
 80033da:	739a      	strb	r2, [r3, #14]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->header.RTR = rx_header.RTR;
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	60da      	str	r2, [r3, #12]
		message->header.DLC = rx_header.DLC;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	611a      	str	r2, [r3, #16]
		message->header.ExtId = rx_header.ExtId;
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	605a      	str	r2, [r3, #4]
		message->header.StdId = rx_header.StdId;
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	601a      	str	r2, [r3, #0]
		message->header.IDE = rx_header.IDE;
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	609a      	str	r2, [r3, #8]
		message->rx_time = HAL_GetTick();
 80033fa:	f000 fcc1 	bl	8003d80 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	621a      	str	r2, [r3, #32]
	while (!IS_FULL(&rxbuff) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8003404:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <service_can_rx_hardware+0xac>)
 8003406:	7b9a      	ldrb	r2, [r3, #14]
 8003408:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <service_can_rx_hardware+0xac>)
 800340a:	7b1b      	ldrb	r3, [r3, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	d206      	bcs.n	800341e <service_can_rx_hardware+0xa6>
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 fb9c 	bl	8004b50 <HAL_CAN_GetRxFifoFillLevel>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1b2      	bne.n	8003384 <service_can_rx_hardware+0xc>
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
#endif // CAN_ROUTER
	}
}
 800341e:	3728      	adds	r7, #40	@ 0x28
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000004 	.word	0x20000004
 8003428:	20009234 	.word	0x20009234

0800342c <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!IS_EMPTY(&rxbuff))
 8003432:	e01f      	b.n	8003474 <service_can_rx_buffer+0x48>
	{
		// get the message at the head of the array
		current_message = GET_FROM_BUFFER(&rxbuff, 0);
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <service_can_rx_buffer+0x5c>)
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	4b13      	ldr	r3, [pc, #76]	@ (8003488 <service_can_rx_buffer+0x5c>)
 800343a:	7b5b      	ldrb	r3, [r3, #13]
 800343c:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <service_can_rx_buffer+0x5c>)
 800343e:	7b12      	ldrb	r2, [r2, #12]
 8003440:	fb93 f0f2 	sdiv	r0, r3, r2
 8003444:	fb00 f202 	mul.w	r2, r0, r2
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	461a      	mov	r2, r3
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	607b      	str	r3, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		if (current_message->header.IDE == CAN_ID_STD) {
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <service_can_rx_buffer+0x3c>
		    service_can_rx_message_std(current_message);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f83d 	bl	80034e0 <service_can_rx_message_std>
 8003466:	e002      	b.n	800346e <service_can_rx_buffer+0x42>
		} else {
		    service_can_rx_message_ext(current_message);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8e3 	bl	8003634 <service_can_rx_message_ext>
		}

		// move the head now that the first element has been removed
		remove_from_front(&rxbuff);
 800346e:	4806      	ldr	r0, [pc, #24]	@ (8003488 <service_can_rx_buffer+0x5c>)
 8003470:	f000 fb28 	bl	8003ac4 <remove_from_front>
	while (!IS_EMPTY(&rxbuff))
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <service_can_rx_buffer+0x5c>)
 8003476:	7b9b      	ldrb	r3, [r3, #14]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1db      	bne.n	8003434 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000004 	.word	0x20000004

0800348c <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	}
#endif

	// if extended ID, get destination
	// send standard ID data messages to all modules
	MODULE_ID module_id = message->header.IDE == CAN_ID_EXT ?
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
	        GET_ID_DEST(message->header.ExtId) :
 8003498:	2b04      	cmp	r3, #4
 800349a:	d107      	bne.n	80034ac <tx_can_message+0x20>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	0d9b      	lsrs	r3, r3, #22
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e000      	b.n	80034ae <tx_can_message+0x22>
 80034ac:	2300      	movs	r3, #0
	MODULE_ID module_id = message->header.IDE == CAN_ID_EXT ?
 80034ae:	73fb      	strb	r3, [r7, #15]
	        ALL_MODULES_ID;

	if (module_id == ALL_MODULES_ID) {
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d104      	bne.n	80034c0 <tx_can_message+0x34>
        add_message_by_highest_prio(&txbuff2, message);
#endif
#if NUM_OF_BUSSES > 1
        add_message_by_highest_prio(&txbuff1, message);
#endif
        add_message_by_highest_prio(&txbuff0, message);
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4808      	ldr	r0, [pc, #32]	@ (80034dc <tx_can_message+0x50>)
 80034ba:	f000 fb25 	bl	8003b08 <add_message_by_highest_prio>
 80034be:	e008      	b.n	80034d2 <tx_can_message+0x46>
    } else {
        CAN_MSG_RING_BUFFER* buffer = choose_tx_buffer_from_dest_module(module_id);
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 faf0 	bl	8003aa8 <choose_tx_buffer_from_dest_module>
 80034c8:	60b8      	str	r0, [r7, #8]
        add_message_by_highest_prio(buffer, message);
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f000 fb1b 	bl	8003b08 <add_message_by_highest_prio>
    }

    return CAN_SUCCESS;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000018 	.word	0x20000018

080034e0 <service_can_rx_message_std>:

// service_can_rx_message_std
// handle standard ID CAN messages (data messages)
// finds the specified group and decodes parameters
static S8 service_can_rx_message_std(CAN_MSG* message)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    PARAM_GROUP* group = NULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]

    // find the specified parameter group
    for (U8 i = 0; i < NUM_OF_GROUPS; i++) {
 80034ec:	2300      	movs	r3, #0
 80034ee:	76fb      	strb	r3, [r7, #27]
 80034f0:	e018      	b.n	8003524 <service_can_rx_message_std+0x44>
        if (GROUPS[i].group_id == message->header.StdId) {
 80034f2:	7efa      	ldrb	r2, [r7, #27]
 80034f4:	4948      	ldr	r1, [pc, #288]	@ (8003618 <service_can_rx_message_std+0x138>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	440b      	add	r3, r1
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d108      	bne.n	800351e <service_can_rx_message_std+0x3e>
            group = &GROUPS[i];
 800350c:	7efa      	ldrb	r2, [r7, #27]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4a40      	ldr	r2, [pc, #256]	@ (8003618 <service_can_rx_message_std+0x138>)
 8003518:	4413      	add	r3, r2
 800351a:	61fb      	str	r3, [r7, #28]
            break;
 800351c:	e005      	b.n	800352a <service_can_rx_message_std+0x4a>
    for (U8 i = 0; i < NUM_OF_GROUPS; i++) {
 800351e:	7efb      	ldrb	r3, [r7, #27]
 8003520:	3301      	adds	r3, #1
 8003522:	76fb      	strb	r3, [r7, #27]
 8003524:	7efb      	ldrb	r3, [r7, #27]
 8003526:	2b8e      	cmp	r3, #142	@ 0x8e
 8003528:	d9e3      	bls.n	80034f2 <service_can_rx_message_std+0x12>
        }
    }

    if (group == NULL) return NOT_FOUND_ERR;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <service_can_rx_message_std+0x56>
 8003530:	f06f 0309 	mvn.w	r3, #9
 8003534:	e06b      	b.n	800360e <service_can_rx_message_std+0x12e>

	if (group->group_id == BEACON_ID) {
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	2be5      	cmp	r3, #229	@ 0xe5
 800353c:	d132      	bne.n	80035a4 <service_can_rx_message_std+0xc4>
		if (HAL_GetTick() - lastHitTick > 100) {
 800353e:	f000 fc1f 	bl	8003d80 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	4b35      	ldr	r3, [pc, #212]	@ (800361c <service_can_rx_message_std+0x13c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d92a      	bls.n	80035a4 <service_can_rx_message_std+0xc4>

			U32 beaconData = message->data[0]  << 16 | message->data[1] << 8 | message->data[2];
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7e1b      	ldrb	r3, [r3, #24]
 8003552:	041a      	lsls	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7e5b      	ldrb	r3, [r3, #25]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	4313      	orrs	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	7e92      	ldrb	r2, [r2, #26]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
			if (beaconData <= (BEACON_DATA_CHECK*1.01) && beaconData >= (BEACON_DATA_CHECK*0.99)) {
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4a2e      	ldr	r2, [pc, #184]	@ (8003620 <service_can_rx_message_std+0x140>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d813      	bhi.n	8003594 <service_can_rx_message_std+0xb4>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4a2d      	ldr	r2, [pc, #180]	@ (8003624 <service_can_rx_message_std+0x144>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d90f      	bls.n	8003594 <service_can_rx_message_std+0xb4>
				lapBeacon_ul.data = 1;
 8003574:	4b2c      	ldr	r3, [pc, #176]	@ (8003628 <service_can_rx_message_std+0x148>)
 8003576:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800357a:	61da      	str	r2, [r3, #28]
				beacon_success_counter++;
 800357c:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <service_can_rx_message_std+0x14c>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <service_can_rx_message_std+0x14c>)
 8003586:	801a      	strh	r2, [r3, #0]
				lastHitTick = HAL_GetTick();
 8003588:	f000 fbfa 	bl	8003d80 <HAL_GetTick>
 800358c:	4603      	mov	r3, r0
 800358e:	4a23      	ldr	r2, [pc, #140]	@ (800361c <service_can_rx_message_std+0x13c>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e003      	b.n	800359c <service_can_rx_message_std+0xbc>
			} else {
				lapBeacon_ul.data = 0;
 8003594:	4b24      	ldr	r3, [pc, #144]	@ (8003628 <service_can_rx_message_std+0x148>)
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	61da      	str	r2, [r3, #28]
			}
			lapBeacon_ul.info.last_rx = message->rx_time;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <service_can_rx_message_std+0x148>)
 80035a2:	6153      	str	r3, [r2, #20]
	}

    // decode parameters
    S8 err;

    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	76bb      	strb	r3, [r7, #26]
 80035a8:	e02d      	b.n	8003606 <service_can_rx_message_std+0x126>
    {
        GCAN_PARAM_ID id = group->param_ids[i];
 80035aa:	7ebb      	ldrb	r3, [r7, #26]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	885b      	ldrh	r3, [r3, #2]
 80035b4:	827b      	strh	r3, [r7, #18]
        if (id == EMPTY_ID) continue;
 80035b6:	8a7b      	ldrh	r3, [r7, #18]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <service_can_rx_message_std+0x11e>

        // check to make sure this is a good id. We are down bad if it is not
        if (id < EMPTY_ID || id >= NUM_OF_PARAMETERS) return BAD_PARAMETER_ID;
 80035bc:	8a7b      	ldrh	r3, [r7, #18]
 80035be:	f240 2289 	movw	r2, #649	@ 0x289
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d902      	bls.n	80035cc <service_can_rx_message_std+0xec>
 80035c6:	f06f 0302 	mvn.w	r3, #2
 80035ca:	e020      	b.n	800360e <service_can_rx_message_std+0x12e>

        // decode this parameters data from the message
        // update last_rx if there was no error decoding
        CAN_INFO_STRUCT* param = (CAN_INFO_STRUCT*) PARAMETERS[id];
 80035cc:	8a7b      	ldrh	r3, [r7, #18]
 80035ce:	4a18      	ldr	r2, [pc, #96]	@ (8003630 <service_can_rx_message_std+0x150>)
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	60fb      	str	r3, [r7, #12]

        err = decode_parameter(param, message->data, i, param->ENC_SIZE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f103 0118 	add.w	r1, r3, #24
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	79db      	ldrb	r3, [r3, #7]
 80035e0:	7eba      	ldrb	r2, [r7, #26]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff fc7c 	bl	8002ee0 <decode_parameter>
 80035e8:	4603      	mov	r3, r0
 80035ea:	72fb      	strb	r3, [r7, #11]
        if (!err) param->last_rx = message->rx_time;
 80035ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <service_can_rx_message_std+0x120>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	615a      	str	r2, [r3, #20]
 80035fc:	e000      	b.n	8003600 <service_can_rx_message_std+0x120>
        if (id == EMPTY_ID) continue;
 80035fe:	bf00      	nop
    for (U8 i = 0; i < CAN_DATA_BYTES; i++)
 8003600:	7ebb      	ldrb	r3, [r7, #26]
 8003602:	3301      	adds	r3, #1
 8003604:	76bb      	strb	r3, [r7, #26]
 8003606:	7ebb      	ldrb	r3, [r7, #26]
 8003608:	2b07      	cmp	r3, #7
 800360a:	d9ce      	bls.n	80035aa <service_can_rx_message_std+0xca>
    }

    return CAN_SUCCESS;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20005b74 	.word	0x20005b74
 800361c:	2000923c 	.word	0x2000923c
 8003620:	0056854f 	.word	0x0056854f
 8003624:	0054ceb6 	.word	0x0054ceb6
 8003628:	2000512c 	.word	0x2000512c
 800362c:	20009238 	.word	0x20009238
 8003630:	2000514c 	.word	0x2000514c

08003634 <service_can_rx_message_ext>:

// service_can_rx_message_ext
// handle extended ID CAN messages (commands/errors)
static S8 service_can_rx_message_ext(CAN_MSG* message)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	get_message_id(&id, message);
 800363c:	f107 0308 	add.w	r3, r7, #8
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f933 	bl	80038ae <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 8003648:	7a7a      	ldrb	r2, [r7, #9]
 800364a:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <service_can_rx_message_ext+0xb0>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d005      	beq.n	800365e <service_can_rx_message_ext+0x2a>
 8003652:	7a7b      	ldrb	r3, [r7, #9]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <service_can_rx_message_ext+0x2a>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 8003658:	f06f 030c 	mvn.w	r3, #12
 800365c:	e03d      	b.n	80036da <service_can_rx_message_ext+0xa6>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 800365e:	7afb      	ldrb	r3, [r7, #11]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <service_can_rx_message_ext+0x58>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = message->rx_time;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <service_can_rx_message_ext+0xb4>)
 800366a:	6013      	str	r3, [r2, #0]
		last_error.source_module = id.source_module;
 800366c:	7aba      	ldrb	r2, [r7, #10]
 800366e:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <service_can_rx_message_ext+0xb4>)
 8003670:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 8003672:	89ba      	ldrh	r2, [r7, #12]
 8003674:	4b1c      	ldr	r3, [pc, #112]	@ (80036e8 <service_can_rx_message_ext+0xb4>)
 8003676:	80da      	strh	r2, [r3, #6]
		if (message->header.DLC > 0)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <service_can_rx_message_ext+0x54>
		{
			last_error.error_id = message->data[0];
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7e1a      	ldrb	r2, [r3, #24]
 8003684:	4b18      	ldr	r3, [pc, #96]	@ (80036e8 <service_can_rx_message_ext+0xb4>)
 8003686:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 8003688:	2300      	movs	r3, #0
 800368a:	e026      	b.n	80036da <service_can_rx_message_ext+0xa6>
	}

	// error checking on the parameter requested
	if (id.parameter < EMPTY_ID || id.parameter >= NUM_OF_PARAMETERS)
 800368c:	89bb      	ldrh	r3, [r7, #12]
 800368e:	f240 2289 	movw	r2, #649	@ 0x289
 8003692:	4293      	cmp	r3, r2
 8003694:	d908      	bls.n	80036a8 <service_can_rx_message_ext+0x74>
	{
		send_error_message(&id, ID_NOT_FOUND);
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f93d 	bl	800391c <send_error_message>

		return NOT_FOUND_ERR;
 80036a2:	f06f 0309 	mvn.w	r3, #9
 80036a6:	e018      	b.n	80036da <service_can_rx_message_ext+0xa6>
	}

    // run command: run the command specified by the CAN message on this module
	if (id.parameter == EMPTY_ID)
 80036a8:	89bb      	ldrh	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <service_can_rx_message_ext+0x8a>
	{
		return run_can_command(message, &id);
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f84b 	bl	8003750 <run_can_command>
 80036ba:	4603      	mov	r3, r0
 80036bc:	e00d      	b.n	80036da <service_can_rx_message_ext+0xa6>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->header.RTR)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <service_can_rx_message_ext+0xa2>
	{
		return parameter_requested(message, &id);
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f80d 	bl	80036ec <parameter_requested>
 80036d2:	4603      	mov	r3, r0
 80036d4:	e001      	b.n	80036da <service_can_rx_message_ext+0xa6>
	}

	// EXT ID but not a command/request/error - unknown message
	return NOT_IMPLEMENTED;
 80036d6:	f06f 0362 	mvn.w	r3, #98	@ 0x62
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20009224 	.word	0x20009224
 80036e8:	20009228 	.word	0x20009228

080036ec <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
	if (message->header.DLC != REQ_PARAM_SIZE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 80036fe:	2103      	movs	r1, #3
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	f000 f90b 	bl	800391c <send_error_message>

		return SIZE_ERR;
 8003706:	f06f 030b 	mvn.w	r3, #11
 800370a:	e01b      	b.n	8003744 <parameter_requested+0x58>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= EMPTY_ID || id->parameter >= NUM_OF_PARAMETERS)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	889b      	ldrh	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <parameter_requested+0x34>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	f240 2289 	movw	r2, #649	@ 0x289
 800371c:	4293      	cmp	r3, r2
 800371e:	d906      	bls.n	800372e <parameter_requested+0x42>
	{
		send_error_message(id, ID_NOT_FOUND);
 8003720:	2100      	movs	r1, #0
 8003722:	6838      	ldr	r0, [r7, #0]
 8003724:	f000 f8fa 	bl	800391c <send_error_message>

		return NOT_FOUND_ERR;
 8003728:	f06f 0309 	mvn.w	r3, #9
 800372c:	e00a      	b.n	8003744 <parameter_requested+0x58>
	}

	// send the parameter data to the module that requested
	CAN_INFO_STRUCT* param = (CAN_INFO_STRUCT*) PARAMETERS[id->parameter];
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	889b      	ldrh	r3, [r3, #4]
 8003732:	461a      	mov	r2, r3
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <parameter_requested+0x60>)
 8003736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373a:	60fb      	str	r3, [r7, #12]
	return send_parameter(param);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff f8df 	bl	8002900 <send_parameter>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2000514c 	.word	0x2000514c

08003750 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND_ID command_id;
	CUST_FUNC* this_function;
	U8 c;

	// DLC error checking
	if (message->header.DLC > COMMAND_SIZE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d906      	bls.n	8003770 <run_can_command+0x20>
	{
		// there is either no DLC (no function ID) or too many parameters sent
		send_error_message(id, SIZE_ERROR);
 8003762:	2103      	movs	r1, #3
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	f000 f8d9 	bl	800391c <send_error_message>
		return SIZE_ERR;
 800376a:	f06f 030b 	mvn.w	r3, #11
 800376e:	e042      	b.n	80037f6 <run_can_command+0xa6>
	}

	// fill in the extra DLC of the message with zeros
	for (c = message->header.DLC; c < COMMAND_SIZE; c++)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e007      	b.n	8003788 <run_can_command+0x38>
	{
		message->data[c] = 0;
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	2200      	movs	r2, #0
 8003780:	761a      	strb	r2, [r3, #24]
	for (c = message->header.DLC; c < COMMAND_SIZE; c++)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	3301      	adds	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d9f4      	bls.n	8003778 <run_can_command+0x28>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7e1b      	ldrb	r3, [r3, #24]
 8003792:	73bb      	strb	r3, [r7, #14]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d906      	bls.n	80037a8 <run_can_command+0x58>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 800379a:	2101      	movs	r1, #1
 800379c:	6838      	ldr	r0, [r7, #0]
 800379e:	f000 f8bd 	bl	800391c <send_error_message>

		return NOT_FOUND_ERR;
 80037a2:	f06f 0309 	mvn.w	r3, #9
 80037a6:	e026      	b.n	80037f6 <run_can_command+0xa6>
	}

	this_function = &(cust_funcs[command_id]);
 80037a8:	7bba      	ldrb	r2, [r7, #14]
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4a13      	ldr	r2, [pc, #76]	@ (8003800 <run_can_command+0xb0>)
 80037b4:	4413      	add	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <run_can_command+0x7e>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 80037c0:	2105      	movs	r1, #5
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f000 f8aa 	bl	800391c <send_error_message>

		return NOT_ENABLED_ERR;
 80037c8:	f06f 030a 	mvn.w	r3, #10
 80037cc:	e013      	b.n	80037f6 <run_can_command+0xa6>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	681c      	ldr	r4, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	7898      	ldrb	r0, [r3, #2]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7e5d      	ldrb	r5, [r3, #25]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7e9e      	ldrb	r6, [r3, #26]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7edb      	ldrb	r3, [r3, #27]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	7f12      	ldrb	r2, [r2, #28]
 80037ea:	9201      	str	r2, [sp, #4]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4633      	mov	r3, r6
 80037f0:	462a      	mov	r2, r5
 80037f2:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fe:	bf00      	nop
 8003800:	200091f4 	.word	0x200091f4

08003804 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static U32 build_message_id(CAN_ID* id)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	U32 temp;
	U32 msg_id = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

	// priority bit
	temp = !!id->priority;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	071b      	lsls	r3, r3, #28
 8003824:	60bb      	str	r3, [r7, #8]
	temp &= PRIORITY_MASK;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

	// destination bits
	temp = id->dest_module;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	059b      	lsls	r3, r3, #22
 8003840:	60bb      	str	r3, [r7, #8]
	temp &= DEST_MASK;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f003 637c 	and.w	r3, r3, #264241152	@ 0xfc00000
 8003848:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

    // source bits
	temp = id->source_module;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	789b      	ldrb	r3, [r3, #2]
 8003856:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	60bb      	str	r3, [r7, #8]
	temp &= SOURCE_MASK;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003864:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

	// error bit
	temp = id->error;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	78db      	ldrb	r3, [r3, #3]
 8003872:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	03db      	lsls	r3, r3, #15
 8003878:	60bb      	str	r3, [r7, #8]
	temp &= ERROR_MASK;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003880:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

	// parameter bits
	temp = id->parameter;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	889b      	ldrh	r3, [r3, #4]
 800388e:	60bb      	str	r3, [r7, #8]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003896:	60bb      	str	r3, [r7, #8]
	msg_id |= temp;
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

	return msg_id;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->header.ExtId);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0f1b      	lsrs	r3, r3, #28
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->header.ExtId);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0d9b      	lsrs	r3, r3, #22
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->header.ExtId);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->header.ExtId);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0bdb      	lsrs	r3, r3, #15
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->header.ExtId);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	809a      	strh	r2, [r3, #4]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08e      	sub	sp, #56	@ 0x38
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	733b      	strb	r3, [r7, #12]
	tx_id.dest_module = rx_id->source_module;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	789b      	ldrb	r3, [r3, #2]
 8003932:	737b      	strb	r3, [r7, #13]
	tx_id.source_module = this_module_id;
 8003934:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <send_error_message+0x5c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	73bb      	strb	r3, [r7, #14]
	tx_id.error = TRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
	tx_id.parameter = rx_id->parameter;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	889b      	ldrh	r3, [r3, #4]
 8003942:	823b      	strh	r3, [r7, #16]

	message.header.ExtId = build_message_id(&tx_id);
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5b 	bl	8003804 <build_message_id>
 800394e:	4603      	mov	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]
	message.header.IDE = CAN_ID_EXT;
 8003952:	2304      	movs	r3, #4
 8003954:	61fb      	str	r3, [r7, #28]
	message.header.RTR = DATA_MESSAGE;
 8003956:	2300      	movs	r3, #0
 8003958:	623b      	str	r3, [r7, #32]
	message.header.DLC = sizeof(error_id);
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
	message.data[0] = error_id;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// send the CAN message
	return tx_can_message(&message);
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fd8f 	bl	800348c <tx_can_message>
 800396e:	4603      	mov	r3, r0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3738      	adds	r7, #56	@ 0x38
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20009224 	.word	0x20009224

0800397c <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6039      	str	r1, [r7, #0]
 8003984:	4611      	mov	r1, r2
 8003986:	461a      	mov	r2, r3
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	460b      	mov	r3, r1
 800398e:	71bb      	strb	r3, [r7, #6]
 8003990:	4613      	mov	r3, r2
 8003992:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <GCAN_RxMsgPendingCallback>:


// custom CAN RX callback
__weak void GCAN_RxMsgPendingCallback(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
    service_can_rx_hardware(hcan, rx_mailbox);
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fce3 	bl	8003378 <service_can_rx_hardware>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0/FIFO1 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
    GCAN_RxMsgPendingCallback(hcan, CAN_RX_FIFO0);
 80039c2:	2100      	movs	r1, #0
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ffeb 	bl	80039a0 <GCAN_RxMsgPendingCallback>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
    GCAN_RxMsgPendingCallback(hcan, CAN_RX_FIFO1);
 80039da:	2101      	movs	r1, #1
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ffdf 	bl	80039a0 <GCAN_RxMsgPendingCallback>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fc4e 	bl	8003294 <service_can_tx_hardware>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fc43 	bl	8003294 <service_can_tx_hardware>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fc38 	bl	8003294 <service_can_tx_hardware>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fc2d 	bl	8003294 <service_can_tx_hardware>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fc22 	bl	8003294 <service_can_tx_hardware>
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    service_can_tx_hardware(hcan);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff fc17 	bl	8003294 <service_can_tx_hardware>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <choose_tx_buffer_from_hcan>:
#endif


// get TX buffer associated with a CAN handle
// defaults to TX buffer 0
CAN_MSG_RING_BUFFER* choose_tx_buffer_from_hcan(CAN_HandleTypeDef* hcan) {
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    if (txbuff2.hcan == hcan) return &txbuff2;
#endif
#if NUM_OF_BUSSES > 1
    if (txbuff1.hcan == hcan) return &txbuff1;
#endif
    return &txbuff0;
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <choose_tx_buffer_from_hcan+0x18>)
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000018 	.word	0x20000018

08003a8c <choose_hcan_from_tx_buffer>:

// get CAN handle associated with buffer
// defaults to TX buffer 0
CAN_HandleTypeDef* choose_hcan_from_tx_buffer(CAN_MSG_RING_BUFFER* buffer) {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    if (&txbuff2 == buffer) return txbuff2.hcan;
#endif
#if NUM_OF_BUSSES > 1
    if (&txbuff1 == buffer) return txbuff1.hcan;
#endif
    return txbuff0.hcan;
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <choose_hcan_from_tx_buffer+0x18>)
 8003a96:	685b      	ldr	r3, [r3, #4]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	20000018 	.word	0x20000018

08003aa8 <choose_tx_buffer_from_dest_module>:

// get TX buffer on the CAN bus associated with a module ID
// defaults to TX buffer 0
CAN_MSG_RING_BUFFER* choose_tx_buffer_from_dest_module(MODULE_ID module) {
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
    if (txbuff2.BUS_ID == module_bus_number[module]) return &txbuff2;
#endif
#if NUM_OF_BUSSES > 1
    if (txbuff1.BUS_ID == module_bus_number[module]) return &txbuff1;
#endif
    return &txbuff0;
 8003ab2:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <choose_tx_buffer_from_dest_module+0x18>)
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000018 	.word	0x20000018

08003ac4 <remove_from_front>:

//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    if (IS_EMPTY(buffer)) return;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7b9b      	ldrb	r3, [r3, #14]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <remove_from_front+0x38>

    // move the head to the next element
    buffer->head = (buffer->head + 1) % buffer->size;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7b5b      	ldrb	r3, [r3, #13]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	7b12      	ldrb	r2, [r2, #12]
 8003ade:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ae2:	fb01 f202 	mul.w	r2, r1, r2
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	735a      	strb	r2, [r3, #13]

    // decrement the fill level
    buffer->fill_level--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7b9b      	ldrb	r3, [r3, #14]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	739a      	strb	r2, [r3, #14]
 8003afa:	e000      	b.n	8003afe <remove_from_front+0x3a>
    if (IS_EMPTY(buffer)) return;
 8003afc:	bf00      	nop
}
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message.
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    // protect buffer from RTOS thread switching
    if (buffer->mutex != NULL) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <add_message_by_highest_prio+0x26>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2105      	movs	r1, #5
 8003b20:	4618      	mov	r0, r3
 8003b22:	f004 fb93 	bl	800824c <osMutexWait>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 80c3 	bne.w	8003cb4 <add_message_by_highest_prio+0x1ac>
    }
#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    // protect buffer from interrupts
    HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(buffer), CAN_IT_TX_MAILBOX_EMPTY);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffac 	bl	8003a8c <choose_hcan_from_tx_buffer>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 f857 	bl	8004bec <HAL_CAN_DeactivateNotification>
#endif

    if (IS_FULL(buffer)) 
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7b9a      	ldrb	r2, [r3, #14]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7b1b      	ldrb	r3, [r3, #12]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d30a      	bcc.n	8003b60 <add_message_by_highest_prio+0x58>
    {
        if (buffer->mutex != NULL) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80b2 	beq.w	8003cb8 <add_message_by_highest_prio+0x1b0>
            osMutexRelease(buffer->mutex);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 fbc5 	bl	80082e8 <osMutexRelease>
        }
        return;
 8003b5e:	e0ab      	b.n	8003cb8 <add_message_by_highest_prio+0x1b0>
    }

    CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7b5b      	ldrb	r3, [r3, #13]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	7b12      	ldrb	r2, [r2, #12]
 8003b6c:	fb93 f0f2 	sdiv	r0, r3, r2
 8003b70:	fb00 f202 	mul.w	r2, r0, r2
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	461a      	mov	r2, r3
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	60fb      	str	r3, [r7, #12]

    // start from the back of the buffer, moving each message towards the back
    // by one and put the new message in the correct spot by ID. If the buffer
    // was empty when the message first went through here, it will put the new
    // message in position 0
    buffer->fill_level++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7b9b      	ldrb	r3, [r3, #14]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	739a      	strb	r2, [r3, #14]
    for (c = buffer->fill_level - 2; c >= 0; c--)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7b9b      	ldrb	r3, [r3, #14]
 8003b94:	3b02      	subs	r3, #2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	e071      	b.n	8003c80 <add_message_by_highest_prio+0x178>
    {
        buffer_message = GET_FROM_BUFFER(buffer, c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7b5b      	ldrb	r3, [r3, #13]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003baa:	4413      	add	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	7b12      	ldrb	r2, [r2, #12]
 8003bb0:	fb93 f0f2 	sdiv	r0, r3, r2
 8003bb4:	fb00 f202 	mul.w	r2, r0, r2
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	60fb      	str	r3, [r7, #12]

        if (
            (message->header.IDE == CAN_ID_STD &&
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
        if (
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <add_message_by_highest_prio+0xd0>
            buffer_message->header.IDE == CAN_ID_EXT)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
            (message->header.IDE == CAN_ID_STD &&
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d01b      	beq.n	8003c10 <add_message_by_highest_prio+0x108>
            ||
            (message->header.IDE == CAN_ID_EXT &&
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
            ||
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d109      	bne.n	8003bf4 <add_message_by_highest_prio+0xec>
            buffer_message->header.IDE == CAN_ID_EXT &&
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
            (message->header.IDE == CAN_ID_EXT &&
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d105      	bne.n	8003bf4 <add_message_by_highest_prio+0xec>
            message->header.ExtId >= buffer_message->header.ExtId)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
            buffer_message->header.IDE == CAN_ID_EXT &&
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d20d      	bcs.n	8003c10 <add_message_by_highest_prio+0x108>
            ||
            (message->header.IDE == CAN_ID_STD &&
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
            ||
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d121      	bne.n	8003c40 <add_message_by_highest_prio+0x138>
            buffer_message->header.IDE == CAN_ID_STD &&
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
            (message->header.IDE == CAN_ID_STD &&
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11d      	bne.n	8003c40 <add_message_by_highest_prio+0x138>
            message->header.StdId >= buffer_message->header.StdId)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
            buffer_message->header.IDE == CAN_ID_STD &&
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d317      	bcc.n	8003c40 <add_message_by_highest_prio+0x138>
        ) {
            // new message is lower priority, insert behind this buffer message
            buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7b5b      	ldrb	r3, [r3, #13]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3301      	adds	r3, #1
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	7b12      	ldrb	r2, [r2, #12]
 8003c26:	fb93 f0f2 	sdiv	r0, r3, r2
 8003c2a:	fb00 f202 	mul.w	r2, r0, r2
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	60fb      	str	r3, [r7, #12]
            break;
 8003c3e:	e023      	b.n	8003c88 <add_message_by_highest_prio+0x180>
        }

        // move this message back by 1 and try again
        copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7b5b      	ldrb	r3, [r3, #13]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3301      	adds	r3, #1
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	7b12      	ldrb	r2, [r2, #12]
 8003c56:	fb93 f0f2 	sdiv	r0, r3, r2
 8003c5a:	fb00 f202 	mul.w	r2, r0, r2
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f826 	bl	8003cc0 <copy_message>
    for (c = buffer->fill_level - 2; c >= 0; c--)
 8003c74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	817b      	strh	r3, [r7, #10]
 8003c80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da89      	bge.n	8003b9c <add_message_by_highest_prio+0x94>
    }

    // put the message into the buffer at this position
    copy_message(message, buffer_message);
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	6838      	ldr	r0, [r7, #0]
 8003c8c:	f000 f818 	bl	8003cc0 <copy_message>

#if defined __STM32F4xx_HAL_H || defined __STM32F7xx_HAL_H
    HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(buffer), CAN_IT_TX_MAILBOX_EMPTY);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fefb 	bl	8003a8c <choose_hcan_from_tx_buffer>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff80 	bl	8004ba0 <HAL_CAN_ActivateNotification>
#endif
    if (buffer->mutex != NULL) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <add_message_by_highest_prio+0x1b2>
        osMutexRelease(buffer->mutex);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f004 fb1b 	bl	80082e8 <osMutexRelease>
 8003cb2:	e002      	b.n	8003cba <add_message_by_highest_prio+0x1b2>
        if(osMutexWait(buffer->mutex, MUTEX_TIMEOUT)) return;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <add_message_by_highest_prio+0x1b2>
        return;
 8003cb8:	bf00      	nop
    }
}
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <copy_message>:

// copy_message
//  function to copy all of the data in source to dest by value, not by reference
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 8003cc0:	b4b0      	push	{r4, r5, r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
    U8 c;

    dest->header = source->header;
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4614      	mov	r4, r2
 8003cd0:	461d      	mov	r5, r3
 8003cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cda:	e884 0003 	stmia.w	r4, {r0, r1}

    for (c = 0; c < dest->header.DLC; c++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e00b      	b.n	8003cfc <copy_message+0x3c>
    {
        dest->data[c] = source->data[c];
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	440a      	add	r2, r1
 8003cec:	7e11      	ldrb	r1, [r2, #24]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	460a      	mov	r2, r1
 8003cf4:	761a      	strb	r2, [r3, #24]
    for (c = 0; c < dest->header.DLC; c++)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3ee      	bcc.n	8003ce4 <copy_message+0x24>
    }
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bcb0      	pop	{r4, r5, r7}
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d18:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <HAL_Init+0x40>)
 8003d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <HAL_Init+0x40>)
 8003d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d30:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <HAL_Init+0x40>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a07      	ldr	r2, [pc, #28]	@ (8003d54 <HAL_Init+0x40>)
 8003d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f001 fa12 	bl	8005166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d42:	200f      	movs	r0, #15
 8003d44:	f7fe fb74 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d48:	f7fe f952 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00

08003d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_IncTick+0x20>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_IncTick+0x24>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4413      	add	r3, r2
 8003d68:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <HAL_IncTick+0x24>)
 8003d6a:	6013      	str	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20006588 	.word	0x20006588
 8003d7c:	20009b5c 	.word	0x20009b5c

08003d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return uwTick;
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_GetTick+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20009b5c 	.word	0x20009b5c

08003d98 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8003da6:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <HAL_SetTickFreq+0x48>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	79fa      	ldrb	r2, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d012      	beq.n	8003dd6 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_SetTickFreq+0x48>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <HAL_SetTickFreq+0x48>)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_SetTickFreq+0x4c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fb35 	bl	8002430 <HAL_InitTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8003dd0:	4a03      	ldr	r2, [pc, #12]	@ (8003de0 <HAL_SetTickFreq+0x48>)
 8003dd2:	7bbb      	ldrb	r3, [r7, #14]
 8003dd4:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20006588 	.word	0x20006588
 8003de4:	20006584 	.word	0x20006584

08003de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e033      	b.n	8003e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe f91e 	bl	8002048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e2e:	f023 0302 	bic.w	r3, r3, #2
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f94a 	bl	80040d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e56:	e001      	b.n	8003e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e113      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x244>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b09      	cmp	r3, #9
 8003e9a:	d925      	bls.n	8003ee8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68d9      	ldr	r1, [r3, #12]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	3b1e      	subs	r3, #30
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68d9      	ldr	r1, [r3, #12]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4403      	add	r3, r0
 8003eda:	3b1e      	subs	r3, #30
 8003edc:	409a      	lsls	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	e022      	b.n	8003f2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6919      	ldr	r1, [r3, #16]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	2207      	movs	r2, #7
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	400a      	ands	r2, r1
 8003f0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6919      	ldr	r1, [r3, #16]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4403      	add	r3, r0
 8003f24:	409a      	lsls	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d824      	bhi.n	8003f80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	3b05      	subs	r3, #5
 8003f48:	221f      	movs	r2, #31
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	400a      	ands	r2, r1
 8003f56:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4618      	mov	r0, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	3b05      	subs	r3, #5
 8003f72:	fa00 f203 	lsl.w	r2, r0, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f7e:	e04c      	b.n	800401a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d824      	bhi.n	8003fd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	3b23      	subs	r3, #35	@ 0x23
 8003f9a:	221f      	movs	r2, #31
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43da      	mvns	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3b23      	subs	r3, #35	@ 0x23
 8003fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fd0:	e023      	b.n	800401a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b41      	subs	r3, #65	@ 0x41
 8003fe4:	221f      	movs	r2, #31
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43da      	mvns	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	4618      	mov	r0, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	3b41      	subs	r3, #65	@ 0x41
 800400e:	fa00 f203 	lsl.w	r2, r0, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800401a:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <HAL_ADC_ConfigChannel+0x250>)
 800401c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a28      	ldr	r2, [pc, #160]	@ (80040c4 <HAL_ADC_ConfigChannel+0x254>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10f      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1d8>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b12      	cmp	r3, #18
 800402e:	d10b      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1d      	ldr	r2, [pc, #116]	@ (80040c4 <HAL_ADC_ConfigChannel+0x254>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d12b      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x23a>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_ADC_ConfigChannel+0x258>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <HAL_ADC_ConfigChannel+0x1f4>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b11      	cmp	r3, #17
 8004062:	d122      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <HAL_ADC_ConfigChannel+0x258>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004086:	4b11      	ldr	r3, [pc, #68]	@ (80040cc <HAL_ADC_ConfigChannel+0x25c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a11      	ldr	r2, [pc, #68]	@ (80040d0 <HAL_ADC_ConfigChannel+0x260>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	0c9a      	lsrs	r2, r3, #18
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800409c:	e002      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f9      	bne.n	800409e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40012300 	.word	0x40012300
 80040c4:	40012000 	.word	0x40012000
 80040c8:	10000012 	.word	0x10000012
 80040cc:	20000000 	.word	0x20000000
 80040d0:	431bde83 	.word	0x431bde83

080040d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040dc:	4b79      	ldr	r3, [pc, #484]	@ (80042c4 <ADC_Init+0x1f0>)
 80040de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	021a      	lsls	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800412c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800414e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	4a58      	ldr	r2, [pc, #352]	@ (80042c8 <ADC_Init+0x1f4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d022      	beq.n	80041b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800417a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6899      	ldr	r1, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800419c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	e00f      	b.n	80041d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0202 	bic.w	r2, r2, #2
 80041e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7e1b      	ldrb	r3, [r3, #24]
 80041ec:	005a      	lsls	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800421e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	3b01      	subs	r3, #1
 800422c:	035a      	lsls	r2, r3, #13
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e007      	b.n	8004248 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004246:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004256:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	3b01      	subs	r3, #1
 8004264:	051a      	lsls	r2, r3, #20
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800427c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800428a:	025a      	lsls	r2, r3, #9
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6899      	ldr	r1, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	029a      	lsls	r2, r3, #10
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40012300 	.word	0x40012300
 80042c8:	0f000001 	.word	0x0f000001

080042cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0ed      	b.n	80044ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd fef0 	bl	80020d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004300:	f7ff fd3e 	bl	8003d80 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004306:	e012      	b.n	800432e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004308:	f7ff fd3a 	bl	8003d80 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b0a      	cmp	r3, #10
 8004314:	d90b      	bls.n	800432e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2205      	movs	r2, #5
 8004326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0c5      	b.n	80044ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0e5      	beq.n	8004308 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0202 	bic.w	r2, r2, #2
 800434a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800434c:	f7ff fd18 	bl	8003d80 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004352:	e012      	b.n	800437a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004354:	f7ff fd14 	bl	8003d80 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b0a      	cmp	r3, #10
 8004360:	d90b      	bls.n	800437a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2205      	movs	r2, #5
 8004372:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e09f      	b.n	80044ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7e1b      	ldrb	r3, [r3, #24]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d108      	bne.n	80043a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e007      	b.n	80043b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	7e5b      	ldrb	r3, [r3, #25]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e007      	b.n	80043dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7e9b      	ldrb	r3, [r3, #26]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d108      	bne.n	80043f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0220 	orr.w	r2, r2, #32
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e007      	b.n	8004406 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0220 	bic.w	r2, r2, #32
 8004404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7edb      	ldrb	r3, [r3, #27]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d108      	bne.n	8004420 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0210 	bic.w	r2, r2, #16
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	e007      	b.n	8004430 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0210 	orr.w	r2, r2, #16
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7f1b      	ldrb	r3, [r3, #28]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d108      	bne.n	800444a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0208 	orr.w	r2, r2, #8
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e007      	b.n	800445a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7f5b      	ldrb	r3, [r3, #29]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d108      	bne.n	8004474 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0204 	orr.w	r2, r2, #4
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e007      	b.n	8004484 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0204 	bic.w	r2, r2, #4
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	ea42 0103 	orr.w	r1, r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d003      	beq.n	80044ea <HAL_CAN_ConfigFilter+0x26>
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f040 80be 	bne.w	8004666 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80044ea:	4b65      	ldr	r3, [pc, #404]	@ (8004680 <HAL_CAN_ConfigFilter+0x1bc>)
 80044ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004504:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	431a      	orrs	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2201      	movs	r2, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43db      	mvns	r3, r3
 800453c:	401a      	ands	r2, r3
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d123      	bne.n	8004594 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800456e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	3248      	adds	r2, #72	@ 0x48
 8004574:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004588:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800458a:	6979      	ldr	r1, [r7, #20]
 800458c:	3348      	adds	r3, #72	@ 0x48
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d122      	bne.n	80045e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3248      	adds	r2, #72	@ 0x48
 80045c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	3348      	adds	r3, #72	@ 0x48
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	440b      	add	r3, r1
 80045e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	401a      	ands	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80045fc:	e007      	b.n	800460e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	431a      	orrs	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	43db      	mvns	r3, r3
 8004620:	401a      	ands	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004628:	e007      	b.n	800463a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	431a      	orrs	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d107      	bne.n	8004652 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	431a      	orrs	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004658:	f023 0201 	bic.w	r2, r3, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e006      	b.n	8004674 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40006400 	.word	0x40006400

08004684 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d12e      	bne.n	80046f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b0:	f7ff fb66 	bl	8003d80 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046b6:	e012      	b.n	80046de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046b8:	f7ff fb62 	bl	8003d80 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b0a      	cmp	r3, #10
 80046c4:	d90b      	bls.n	80046de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2205      	movs	r2, #5
 80046d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e012      	b.n	8004704 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e006      	b.n	8004704 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	@ 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004720:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800472a:	7ffb      	ldrb	r3, [r7, #31]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d003      	beq.n	8004738 <HAL_CAN_AddTxMessage+0x2c>
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	2b02      	cmp	r3, #2
 8004734:	f040 80b8 	bne.w	80048a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a0 	beq.w	8004898 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	0e1b      	lsrs	r3, r3, #24
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d907      	bls.n	8004778 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e09e      	b.n	80048b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004778:	2201      	movs	r2, #1
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	409a      	lsls	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	6809      	ldr	r1, [r1, #0]
 8004798:	431a      	orrs	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3318      	adds	r3, #24
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	440b      	add	r3, r1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e00f      	b.n	80047c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80047ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3318      	adds	r3, #24
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3318      	adds	r3, #24
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	440b      	add	r3, r1
 80047d6:	3304      	adds	r3, #4
 80047d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	7d1b      	ldrb	r3, [r3, #20]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d111      	bne.n	8004806 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3318      	adds	r3, #24
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3318      	adds	r3, #24
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	440b      	add	r3, r1
 8004802:	3304      	adds	r3, #4
 8004804:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3307      	adds	r3, #7
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	061a      	lsls	r2, r3, #24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3306      	adds	r3, #6
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3305      	adds	r3, #5
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4313      	orrs	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	3204      	adds	r2, #4
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	4610      	mov	r0, r2
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	6811      	ldr	r1, [r2, #0]
 800482e:	ea43 0200 	orr.w	r2, r3, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	440b      	add	r3, r1
 8004838:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800483c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3303      	adds	r3, #3
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	061a      	lsls	r2, r3, #24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3302      	adds	r3, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3301      	adds	r3, #1
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	4313      	orrs	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	4610      	mov	r0, r2
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	6811      	ldr	r1, [r2, #0]
 8004864:	ea43 0200 	orr.w	r2, r3, r0
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	440b      	add	r3, r1
 800486e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004872:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3318      	adds	r3, #24
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4413      	add	r3, r2
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3318      	adds	r3, #24
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	440b      	add	r3, r1
 8004892:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e00e      	b.n	80048b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e006      	b.n	80048b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	@ 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d002      	beq.n	80048e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d11d      	bne.n	800491e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004940:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d003      	beq.n	8004950 <HAL_CAN_GetRxMessage+0x24>
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b02      	cmp	r3, #2
 800494c:	f040 80f3 	bne.w	8004b36 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10e      	bne.n	8004974 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0e7      	b.n	8004b44 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e0d8      	b.n	8004b44 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	331b      	adds	r3, #27
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	4413      	add	r3, r2
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0204 	and.w	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	331b      	adds	r3, #27
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	4413      	add	r3, r2
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	0d5b      	lsrs	r3, r3, #21
 80049c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e00b      	b.n	80049e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	331b      	adds	r3, #27
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	331b      	adds	r3, #27
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0202 	and.w	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	331b      	adds	r3, #27
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4413      	add	r3, r2
 8004a04:	3304      	adds	r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	331b      	adds	r3, #27
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	331b      	adds	r3, #27
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	0a1a      	lsrs	r2, r3, #8
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0c1a      	lsrs	r2, r3, #16
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	3302      	adds	r3, #2
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e1a      	lsrs	r2, r3, #24
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0a1a      	lsrs	r2, r3, #8
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	3305      	adds	r3, #5
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	0c1a      	lsrs	r2, r3, #16
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	3306      	adds	r3, #6
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e1a      	lsrs	r2, r3, #24
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	3307      	adds	r3, #7
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0220 	orr.w	r2, r2, #32
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	e007      	b.n	8004b32 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0220 	orr.w	r2, r2, #32
 8004b30:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e006      	b.n	8004b44 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b64:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d002      	beq.n	8004b72 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d10f      	bne.n	8004b92 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e005      	b.n	8004b92 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004b92:	68fb      	ldr	r3, [r7, #12]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d002      	beq.n	8004bbe <HAL_CAN_ActivateNotification+0x1e>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d109      	bne.n	8004bd2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6959      	ldr	r1, [r3, #20]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e006      	b.n	8004be0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d002      	beq.n	8004c0a <HAL_CAN_DeactivateNotification+0x1e>
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d10a      	bne.n	8004c20 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6959      	ldr	r1, [r3, #20]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	400a      	ands	r2, r1
 8004c1a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e006      	b.n	8004c2e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b08a      	sub	sp, #40	@ 0x28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d07c      	beq.n	8004d7a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d023      	beq.n	8004cd2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fe fea4 	bl	80039ea <HAL_CAN_TxMailbox0CompleteCallback>
 8004ca2:	e016      	b.n	8004cd2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb6:	e00c      	b.n	8004cd2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cca:	e002      	b.n	8004cd2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fe fead 	bl	8003a2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d024      	beq.n	8004d26 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ce4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fe fe85 	bl	8003a00 <HAL_CAN_TxMailbox1CompleteCallback>
 8004cf6:	e016      	b.n	8004d26 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0a:	e00c      	b.n	8004d26 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1e:	e002      	b.n	8004d26 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fe fe8e 	bl	8003a42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d024      	beq.n	8004d7a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004d38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fe fe66 	bl	8003a16 <HAL_CAN_TxMailbox2CompleteCallback>
 8004d4a:	e016      	b.n	8004d7a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5e:	e00c      	b.n	8004d7a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d72:	e002      	b.n	8004d7a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fe fe6f 	bl	8003a58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2208      	movs	r2, #8
 8004db8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8f4 	bl	8004fa8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fe fdee 	bl	80039ba <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2210      	movs	r2, #16
 8004e00:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8cc 	bl	8004fbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fe fdc8 	bl	80039d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8b6 	bl	8004fd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d006      	beq.n	8004e86 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f8af 	bl	8004fe4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d07b      	beq.n	8004f88 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d072      	beq.n	8004f80 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d043      	beq.n	8004f80 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03e      	beq.n	8004f80 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f08:	2b60      	cmp	r3, #96	@ 0x60
 8004f0a:	d02b      	beq.n	8004f64 <HAL_CAN_IRQHandler+0x32a>
 8004f0c:	2b60      	cmp	r3, #96	@ 0x60
 8004f0e:	d82e      	bhi.n	8004f6e <HAL_CAN_IRQHandler+0x334>
 8004f10:	2b50      	cmp	r3, #80	@ 0x50
 8004f12:	d022      	beq.n	8004f5a <HAL_CAN_IRQHandler+0x320>
 8004f14:	2b50      	cmp	r3, #80	@ 0x50
 8004f16:	d82a      	bhi.n	8004f6e <HAL_CAN_IRQHandler+0x334>
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d019      	beq.n	8004f50 <HAL_CAN_IRQHandler+0x316>
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d826      	bhi.n	8004f6e <HAL_CAN_IRQHandler+0x334>
 8004f20:	2b30      	cmp	r3, #48	@ 0x30
 8004f22:	d010      	beq.n	8004f46 <HAL_CAN_IRQHandler+0x30c>
 8004f24:	2b30      	cmp	r3, #48	@ 0x30
 8004f26:	d822      	bhi.n	8004f6e <HAL_CAN_IRQHandler+0x334>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d002      	beq.n	8004f32 <HAL_CAN_IRQHandler+0x2f8>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d005      	beq.n	8004f3c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004f30:	e01d      	b.n	8004f6e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	f043 0308 	orr.w	r3, r3, #8
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f3a:	e019      	b.n	8004f70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	f043 0310 	orr.w	r3, r3, #16
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f44:	e014      	b.n	8004f70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	f043 0320 	orr.w	r3, r3, #32
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f4e:	e00f      	b.n	8004f70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f58:	e00a      	b.n	8004f70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f62:	e005      	b.n	8004f70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f6c:	e000      	b.n	8004f70 <HAL_CAN_IRQHandler+0x336>
            break;
 8004f6e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004f7e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2204      	movs	r2, #4
 8004f86:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f82c 	bl	8004ff8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3728      	adds	r7, #40	@ 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800501c:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <__NVIC_SetPriorityGrouping+0x44>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005028:	4013      	ands	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800503c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800503e:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <__NVIC_SetPriorityGrouping+0x44>)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	60d3      	str	r3, [r2, #12]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005058:	4b04      	ldr	r3, [pc, #16]	@ (800506c <__NVIC_GetPriorityGrouping+0x18>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 0307 	and.w	r3, r3, #7
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800507a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db0b      	blt.n	800509a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	f003 021f 	and.w	r2, r3, #31
 8005088:	4907      	ldr	r1, [pc, #28]	@ (80050a8 <__NVIC_EnableIRQ+0x38>)
 800508a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2001      	movs	r0, #1
 8005092:	fa00 f202 	lsl.w	r2, r0, r2
 8005096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	e000e100 	.word	0xe000e100

080050ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db0a      	blt.n	80050d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	490c      	ldr	r1, [pc, #48]	@ (80050f8 <__NVIC_SetPriority+0x4c>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050d4:	e00a      	b.n	80050ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4908      	ldr	r1, [pc, #32]	@ (80050fc <__NVIC_SetPriority+0x50>)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3b04      	subs	r3, #4
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	440b      	add	r3, r1
 80050ea:	761a      	strb	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	@ 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f1c3 0307 	rsb	r3, r3, #7
 800511a:	2b04      	cmp	r3, #4
 800511c:	bf28      	it	cs
 800511e:	2304      	movcs	r3, #4
 8005120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3304      	adds	r3, #4
 8005126:	2b06      	cmp	r3, #6
 8005128:	d902      	bls.n	8005130 <NVIC_EncodePriority+0x30>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3b03      	subs	r3, #3
 800512e:	e000      	b.n	8005132 <NVIC_EncodePriority+0x32>
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005134:	f04f 32ff 	mov.w	r2, #4294967295
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	401a      	ands	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005148:	f04f 31ff 	mov.w	r1, #4294967295
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	43d9      	mvns	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	4313      	orrs	r3, r2
         );
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	@ 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ff4c 	bl	800500c <__NVIC_SetPriorityGrouping>
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800518e:	f7ff ff61 	bl	8005054 <__NVIC_GetPriorityGrouping>
 8005192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	6978      	ldr	r0, [r7, #20]
 800519a:	f7ff ffb1 	bl	8005100 <NVIC_EncodePriority>
 800519e:	4602      	mov	r2, r0
 80051a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff80 	bl	80050ac <__NVIC_SetPriority>
}
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff ff54 	bl	8005070 <__NVIC_EnableIRQ>
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7fe fdd0 	bl	8003d80 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e099      	b.n	8005320 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800520c:	e00f      	b.n	800522e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800520e:	f7fe fdb7 	bl	8003d80 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b05      	cmp	r3, #5
 800521a:	d908      	bls.n	800522e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2203      	movs	r2, #3
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e078      	b.n	8005320 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e8      	bne.n	800520e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <HAL_DMA_Init+0x158>)
 8005248:	4013      	ands	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800525a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	2b04      	cmp	r3, #4
 8005286:	d107      	bne.n	8005298 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	4313      	orrs	r3, r2
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d117      	bne.n	80052f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa6f 	bl	80057b8 <DMA_CheckFifoParam>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2240      	movs	r2, #64	@ 0x40
 80052e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80052ee:	2301      	movs	r3, #1
 80052f0:	e016      	b.n	8005320 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa26 	bl	800574c <DMA_CalcBaseAndBitshift>
 8005300:	4603      	mov	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005308:	223f      	movs	r2, #63	@ 0x3f
 800530a:	409a      	lsls	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	f010803f 	.word	0xf010803f

0800532c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_DMA_Start_IT+0x26>
 800534e:	2302      	movs	r3, #2
 8005350:	e040      	b.n	80053d4 <HAL_DMA_Start_IT+0xa8>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d12f      	bne.n	80053c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f9b8 	bl	80056f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005384:	223f      	movs	r2, #63	@ 0x3f
 8005386:	409a      	lsls	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0216 	orr.w	r2, r2, #22
 800539a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e005      	b.n	80053d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
 80053d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005624 <HAL_DMA_IRQHandler+0x248>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a8e      	ldr	r2, [pc, #568]	@ (8005628 <HAL_DMA_IRQHandler+0x24c>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005406:	2208      	movs	r2, #8
 8005408:	409a      	lsls	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01a      	beq.n	8005448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005434:	2208      	movs	r2, #8
 8005436:	409a      	lsls	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546a:	2201      	movs	r2, #1
 800546c:	409a      	lsls	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f043 0202 	orr.w	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	2204      	movs	r2, #4
 8005484:	409a      	lsls	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d012      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a0:	2204      	movs	r2, #4
 80054a2:	409a      	lsls	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b8:	2210      	movs	r2, #16
 80054ba:	409a      	lsls	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d043      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d03c      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d6:	2210      	movs	r2, #16
 80054d8:	409a      	lsls	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d018      	beq.n	800551e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d024      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	e01f      	b.n	800554c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	e016      	b.n	800554c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0208 	bic.w	r2, r2, #8
 800553a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005550:	2220      	movs	r2, #32
 8005552:	409a      	lsls	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808f 	beq.w	800567c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8087 	beq.w	800567c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005572:	2220      	movs	r2, #32
 8005574:	409a      	lsls	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b05      	cmp	r3, #5
 8005584:	d136      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0216 	bic.w	r2, r2, #22
 8005594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_DMA_IRQHandler+0x1da>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0208 	bic.w	r2, r2, #8
 80055c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ca:	223f      	movs	r2, #63	@ 0x3f
 80055cc:	409a      	lsls	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d07e      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
        }
        return;
 80055f2:	e079      	b.n	80056e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01d      	beq.n	800563e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10d      	bne.n	800562c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005614:	2b00      	cmp	r3, #0
 8005616:	d031      	beq.n	800567c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	e02c      	b.n	800567c <HAL_DMA_IRQHandler+0x2a0>
 8005622:	bf00      	nop
 8005624:	20000000 	.word	0x20000000
 8005628:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d023      	beq.n	800567c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
 800563c:	e01e      	b.n	800567c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10f      	bne.n	800566c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0210 	bic.w	r2, r2, #16
 800565a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005680:	2b00      	cmp	r3, #0
 8005682:	d032      	beq.n	80056ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d022      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2205      	movs	r2, #5
 8005694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d307      	bcc.n	80056c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f2      	bne.n	80056a8 <HAL_DMA_IRQHandler+0x2cc>
 80056c2:	e000      	b.n	80056c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
 80056e6:	e000      	b.n	80056ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80056e8:	bf00      	nop
    }
  }
}
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800570c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d108      	bne.n	8005730 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800572e:	e007      	b.n	8005740 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	3b10      	subs	r3, #16
 800575c:	4a14      	ldr	r2, [pc, #80]	@ (80057b0 <DMA_CalcBaseAndBitshift+0x64>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005766:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b03      	cmp	r3, #3
 8005778:	d909      	bls.n	800578e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	659a      	str	r2, [r3, #88]	@ 0x58
 800578c:	e007      	b.n	800579e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005796:	f023 0303 	bic.w	r3, r3, #3
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	aaaaaaab 	.word	0xaaaaaaab
 80057b4:	0800ae28 	.word	0x0800ae28

080057b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11f      	bne.n	8005812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d856      	bhi.n	8005886 <DMA_CheckFifoParam+0xce>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <DMA_CheckFifoParam+0x28>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005803 	.word	0x08005803
 80057e8:	080057f1 	.word	0x080057f1
 80057ec:	08005887 	.word	0x08005887
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d046      	beq.n	800588a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005800:	e043      	b.n	800588a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800580a:	d140      	bne.n	800588e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005810:	e03d      	b.n	800588e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581a:	d121      	bne.n	8005860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b03      	cmp	r3, #3
 8005820:	d837      	bhi.n	8005892 <DMA_CheckFifoParam+0xda>
 8005822:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <DMA_CheckFifoParam+0x70>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005839 	.word	0x08005839
 800582c:	0800583f 	.word	0x0800583f
 8005830:	08005839 	.word	0x08005839
 8005834:	08005851 	.word	0x08005851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e030      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d025      	beq.n	8005896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800584e:	e022      	b.n	8005896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005858:	d11f      	bne.n	800589a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800585e:	e01c      	b.n	800589a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d903      	bls.n	800586e <DMA_CheckFifoParam+0xb6>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d003      	beq.n	8005874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800586c:	e018      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
      break;
 8005872:	e015      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00e      	beq.n	800589e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
      break;
 8005884:	e00b      	b.n	800589e <DMA_CheckFifoParam+0xe6>
      break;
 8005886:	bf00      	nop
 8005888:	e00a      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
 800588c:	e008      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      break;
 800588e:	bf00      	nop
 8005890:	e006      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005892:	bf00      	nop
 8005894:	e004      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005896:	bf00      	nop
 8005898:	e002      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800589a:	bf00      	nop
 800589c:	e000      	b.n	80058a0 <DMA_CheckFifoParam+0xe8>
      break;
 800589e:	bf00      	nop
    }
  } 
  
  return status; 
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop

080058b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	@ 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e165      	b.n	8005b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058cc:	2201      	movs	r2, #1
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	f040 8154 	bne.w	8005b92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d005      	beq.n	8005902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d130      	bne.n	8005964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	2203      	movs	r2, #3
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005938:	2201      	movs	r2, #1
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 0201 	and.w	r2, r3, #1
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b03      	cmp	r3, #3
 800596e:	d017      	beq.n	80059a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	2203      	movs	r2, #3
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d123      	bne.n	80059f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	08da      	lsrs	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3208      	adds	r2, #8
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	220f      	movs	r2, #15
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	08da      	lsrs	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3208      	adds	r2, #8
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	2203      	movs	r2, #3
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0203 	and.w	r2, r3, #3
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80ae 	beq.w	8005b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8005bb0 <HAL_GPIO_Init+0x300>)
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8005bb0 <HAL_GPIO_Init+0x300>)
 8005a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a46:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb0 <HAL_GPIO_Init+0x300>)
 8005a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a52:	4a58      	ldr	r2, [pc, #352]	@ (8005bb4 <HAL_GPIO_Init+0x304>)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	3302      	adds	r3, #2
 8005a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	220f      	movs	r2, #15
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a4f      	ldr	r2, [pc, #316]	@ (8005bb8 <HAL_GPIO_Init+0x308>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d025      	beq.n	8005aca <HAL_GPIO_Init+0x21a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a4e      	ldr	r2, [pc, #312]	@ (8005bbc <HAL_GPIO_Init+0x30c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01f      	beq.n	8005ac6 <HAL_GPIO_Init+0x216>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a4d      	ldr	r2, [pc, #308]	@ (8005bc0 <HAL_GPIO_Init+0x310>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d019      	beq.n	8005ac2 <HAL_GPIO_Init+0x212>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a4c      	ldr	r2, [pc, #304]	@ (8005bc4 <HAL_GPIO_Init+0x314>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_GPIO_Init+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a4b      	ldr	r2, [pc, #300]	@ (8005bc8 <HAL_GPIO_Init+0x318>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00d      	beq.n	8005aba <HAL_GPIO_Init+0x20a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8005bcc <HAL_GPIO_Init+0x31c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <HAL_GPIO_Init+0x206>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a49      	ldr	r2, [pc, #292]	@ (8005bd0 <HAL_GPIO_Init+0x320>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <HAL_GPIO_Init+0x202>
 8005aae:	2306      	movs	r3, #6
 8005ab0:	e00c      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005ab2:	2307      	movs	r3, #7
 8005ab4:	e00a      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005ab6:	2305      	movs	r3, #5
 8005ab8:	e008      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005aba:	2304      	movs	r3, #4
 8005abc:	e006      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e004      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e002      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_GPIO_Init+0x21c>
 8005aca:	2300      	movs	r3, #0
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f002 0203 	and.w	r2, r2, #3
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	4093      	lsls	r3, r2
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005adc:	4935      	ldr	r1, [pc, #212]	@ (8005bb4 <HAL_GPIO_Init+0x304>)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	089b      	lsrs	r3, r3, #2
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aea:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b0e:	4a31      	ldr	r2, [pc, #196]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b14:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b38:	4a26      	ldr	r2, [pc, #152]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b3e:	4b25      	ldr	r3, [pc, #148]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b62:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b8c:	4a11      	ldr	r2, [pc, #68]	@ (8005bd4 <HAL_GPIO_Init+0x324>)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3301      	adds	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	f67f ae96 	bls.w	80058cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	3724      	adds	r7, #36	@ 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40013800 	.word	0x40013800
 8005bb8:	40020000 	.word	0x40020000
 8005bbc:	40020400 	.word	0x40020400
 8005bc0:	40020800 	.word	0x40020800
 8005bc4:	40020c00 	.word	0x40020c00
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40021400 	.word	0x40021400
 8005bd0:	40021800 	.word	0x40021800
 8005bd4:	40013c00 	.word	0x40013c00

08005bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
 8005be4:	4613      	mov	r3, r2
 8005be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005be8:	787b      	ldrb	r3, [r7, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bee:	887a      	ldrh	r2, [r7, #2]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bf4:	e003      	b.n	8005bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bf6:	887b      	ldrh	r3, [r7, #2]
 8005bf8:	041a      	lsls	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	619a      	str	r2, [r3, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0cc      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b68      	ldr	r3, [pc, #416]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d90c      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b65      	ldr	r3, [pc, #404]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b63      	ldr	r3, [pc, #396]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0b8      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c60:	4b59      	ldr	r3, [pc, #356]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4a58      	ldr	r2, [pc, #352]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c78:	4b53      	ldr	r3, [pc, #332]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4a52      	ldr	r2, [pc, #328]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c84:	4b50      	ldr	r3, [pc, #320]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	494d      	ldr	r1, [pc, #308]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d044      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b47      	ldr	r3, [pc, #284]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d119      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e07f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d003      	beq.n	8005cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cca:	4b3f      	ldr	r3, [pc, #252]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e06f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cda:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e067      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cea:	4b37      	ldr	r3, [pc, #220]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4934      	ldr	r1, [pc, #208]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cfc:	f7fe f840 	bl	8003d80 <HAL_GetTick>
 8005d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d04:	f7fe f83c 	bl	8003d80 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e04f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 020c 	and.w	r2, r3, #12
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d1eb      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d20c      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3a:	4b22      	ldr	r3, [pc, #136]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b20      	ldr	r3, [pc, #128]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e032      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4916      	ldr	r1, [pc, #88]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d7e:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	490e      	ldr	r1, [pc, #56]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d92:	f000 f887 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8005d96:	4602      	mov	r2, r0
 8005d98:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	490a      	ldr	r1, [pc, #40]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005da4:	5ccb      	ldrb	r3, [r1, r3]
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dae:	4b09      	ldr	r3, [pc, #36]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc fb3c 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40023c00 	.word	0x40023c00
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	0800ae10 	.word	0x0800ae10
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	20006584 	.word	0x20006584

08005dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ddc:	4b03      	ldr	r3, [pc, #12]	@ (8005dec <HAL_RCC_GetHCLKFreq+0x14>)
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000000 	.word	0x20000000

08005df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005df4:	f7ff fff0 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4b05      	ldr	r3, [pc, #20]	@ (8005e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	0a9b      	lsrs	r3, r3, #10
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4903      	ldr	r1, [pc, #12]	@ (8005e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40023800 	.word	0x40023800
 8005e14:	0800ae20 	.word	0x0800ae20

08005e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e1c:	f7ff ffdc 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0b5b      	lsrs	r3, r3, #13
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4903      	ldr	r1, [pc, #12]	@ (8005e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	0800ae20 	.word	0x0800ae20

08005e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	220f      	movs	r2, #15
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e50:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0203 	and.w	r2, r3, #3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e68:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e74:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e82:	4b07      	ldr	r3, [pc, #28]	@ (8005ea0 <HAL_RCC_GetClockConfig+0x60>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 020f 	and.w	r2, r3, #15
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40023c00 	.word	0x40023c00

08005ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea8:	b0a6      	sub	sp, #152	@ 0x98
 8005eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eca:	4bc8      	ldr	r3, [pc, #800]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	f200 817e 	bhi.w	80061d4 <HAL_RCC_GetSysClockFreq+0x330>
 8005ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f15 	.word	0x08005f15
 8005ee4:	080061d5 	.word	0x080061d5
 8005ee8:	080061d5 	.word	0x080061d5
 8005eec:	080061d5 	.word	0x080061d5
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	080061d5 	.word	0x080061d5
 8005ef8:	080061d5 	.word	0x080061d5
 8005efc:	080061d5 	.word	0x080061d5
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	080061d5 	.word	0x080061d5
 8005f08:	080061d5 	.word	0x080061d5
 8005f0c:	080061d5 	.word	0x080061d5
 8005f10:	0800608f 	.word	0x0800608f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4bb6      	ldr	r3, [pc, #728]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8005f1a:	e15f      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f1c:	4bb5      	ldr	r3, [pc, #724]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005f22:	e15b      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f24:	4bb1      	ldr	r3, [pc, #708]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f30:	4bae      	ldr	r3, [pc, #696]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d031      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3c:	4bab      	ldr	r3, [pc, #684]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	099b      	lsrs	r3, r3, #6
 8005f42:	2200      	movs	r2, #0
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f50:	2300      	movs	r3, #0
 8005f52:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f54:	4ba7      	ldr	r3, [pc, #668]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	fb03 f202 	mul.w	r2, r3, r2
 8005f60:	2300      	movs	r3, #0
 8005f62:	4621      	mov	r1, r4
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	4413      	add	r3, r2
 8005f6a:	4aa2      	ldr	r2, [pc, #648]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	fba1 1202 	umull	r1, r2, r1, r2
 8005f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f74:	460a      	mov	r2, r1
 8005f76:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005f78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f7a:	4413      	add	r3, r2
 8005f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f82:	2200      	movs	r2, #0
 8005f84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005f90:	f7fa ff08 	bl	8000da4 <__aeabi_uldivmod>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4613      	mov	r3, r2
 8005f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f9e:	e064      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa0:	4b92      	ldr	r3, [pc, #584]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	099b      	lsrs	r3, r3, #6
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005faa:	657a      	str	r2, [r7, #84]	@ 0x54
 8005fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	f04f 0000 	mov.w	r0, #0
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	0159      	lsls	r1, r3, #5
 8005fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fce:	0150      	lsls	r0, r2, #5
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	1a51      	subs	r1, r2, r1
 8005fd8:	6139      	str	r1, [r7, #16]
 8005fda:	4629      	mov	r1, r5
 8005fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fee:	4659      	mov	r1, fp
 8005ff0:	018b      	lsls	r3, r1, #6
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	018a      	lsls	r2, r1, #6
 8005ffc:	4651      	mov	r1, sl
 8005ffe:	ebb2 0801 	subs.w	r8, r2, r1
 8006002:	4659      	mov	r1, fp
 8006004:	eb63 0901 	sbc.w	r9, r3, r1
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006014:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006018:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800601c:	4690      	mov	r8, r2
 800601e:	4699      	mov	r9, r3
 8006020:	4623      	mov	r3, r4
 8006022:	eb18 0303 	adds.w	r3, r8, r3
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	462b      	mov	r3, r5
 800602a:	eb49 0303 	adc.w	r3, r9, r3
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800603c:	4629      	mov	r1, r5
 800603e:	028b      	lsls	r3, r1, #10
 8006040:	4621      	mov	r1, r4
 8006042:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006046:	4621      	mov	r1, r4
 8006048:	028a      	lsls	r2, r1, #10
 800604a:	4610      	mov	r0, r2
 800604c:	4619      	mov	r1, r3
 800604e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006052:	2200      	movs	r2, #0
 8006054:	643b      	str	r3, [r7, #64]	@ 0x40
 8006056:	647a      	str	r2, [r7, #68]	@ 0x44
 8006058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800605c:	f7fa fea2 	bl	8000da4 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4613      	mov	r3, r2
 8006066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800606a:	4b60      	ldr	r3, [pc, #384]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	0c1b      	lsrs	r3, r3, #16
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	3301      	adds	r3, #1
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 800607c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800608c:	e0a6      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800608e:	4b57      	ldr	r3, [pc, #348]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800609a:	4b54      	ldr	r3, [pc, #336]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d02a      	beq.n	80060fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a6:	4b51      	ldr	r3, [pc, #324]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	099b      	lsrs	r3, r3, #6
 80060ac:	2200      	movs	r2, #0
 80060ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060b8:	2100      	movs	r1, #0
 80060ba:	4b4e      	ldr	r3, [pc, #312]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80060bc:	fb03 f201 	mul.w	r2, r3, r1
 80060c0:	2300      	movs	r3, #0
 80060c2:	fb00 f303 	mul.w	r3, r0, r3
 80060c6:	4413      	add	r3, r2
 80060c8:	4a4a      	ldr	r2, [pc, #296]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80060ca:	fba0 1202 	umull	r1, r2, r0, r2
 80060ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80060d0:	460a      	mov	r2, r1
 80060d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80060d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060d6:	4413      	add	r3, r2
 80060d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80060da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060de:	2200      	movs	r2, #0
 80060e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80060e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80060e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80060ec:	f7fa fe5a 	bl	8000da4 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060fa:	e05b      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fc:	4b3b      	ldr	r3, [pc, #236]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	2200      	movs	r2, #0
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	2300      	movs	r3, #0
 8006112:	627b      	str	r3, [r7, #36]	@ 0x24
 8006114:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	f04f 0000 	mov.w	r0, #0
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	0159      	lsls	r1, r3, #5
 8006126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800612a:	0150      	lsls	r0, r2, #5
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4641      	mov	r1, r8
 8006132:	ebb2 0a01 	subs.w	sl, r2, r1
 8006136:	4649      	mov	r1, r9
 8006138:	eb63 0b01 	sbc.w	fp, r3, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006148:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800614c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006150:	ebb2 040a 	subs.w	r4, r2, sl
 8006154:	eb63 050b 	sbc.w	r5, r3, fp
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	00eb      	lsls	r3, r5, #3
 8006162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006166:	00e2      	lsls	r2, r4, #3
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	4643      	mov	r3, r8
 800616e:	18e3      	adds	r3, r4, r3
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	464b      	mov	r3, r9
 8006174:	eb45 0303 	adc.w	r3, r5, r3
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006186:	4629      	mov	r1, r5
 8006188:	028b      	lsls	r3, r1, #10
 800618a:	4621      	mov	r1, r4
 800618c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006190:	4621      	mov	r1, r4
 8006192:	028a      	lsls	r2, r1, #10
 8006194:	4610      	mov	r0, r2
 8006196:	4619      	mov	r1, r3
 8006198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800619c:	2200      	movs	r2, #0
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	61fa      	str	r2, [r7, #28]
 80061a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a6:	f7fa fdfd 	bl	8000da4 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4613      	mov	r3, r2
 80061b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80061b4:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x348>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	0f1b      	lsrs	r3, r3, #28
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80061c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061d2:	e003      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80061d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3798      	adds	r7, #152	@ 0x98
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	016e3600 	.word	0x016e3600

080061f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e28d      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8083 	beq.w	800631e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006218:	4b94      	ldr	r3, [pc, #592]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b04      	cmp	r3, #4
 8006222:	d019      	beq.n	8006258 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006224:	4b91      	ldr	r3, [pc, #580]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800622c:	2b08      	cmp	r3, #8
 800622e:	d106      	bne.n	800623e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006230:	4b8e      	ldr	r3, [pc, #568]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800623c:	d00c      	beq.n	8006258 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623e:	4b8b      	ldr	r3, [pc, #556]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006246:	2b0c      	cmp	r3, #12
 8006248:	d112      	bne.n	8006270 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800624a:	4b88      	ldr	r3, [pc, #544]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006256:	d10b      	bne.n	8006270 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006258:	4b84      	ldr	r3, [pc, #528]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d05b      	beq.n	800631c <HAL_RCC_OscConfig+0x124>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d157      	bne.n	800631c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e25a      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006278:	d106      	bne.n	8006288 <HAL_RCC_OscConfig+0x90>
 800627a:	4b7c      	ldr	r3, [pc, #496]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a7b      	ldr	r2, [pc, #492]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e01d      	b.n	80062c4 <HAL_RCC_OscConfig+0xcc>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0xb4>
 8006292:	4b76      	ldr	r3, [pc, #472]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a75      	ldr	r2, [pc, #468]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b73      	ldr	r3, [pc, #460]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a72      	ldr	r2, [pc, #456]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e00b      	b.n	80062c4 <HAL_RCC_OscConfig+0xcc>
 80062ac:	4b6f      	ldr	r3, [pc, #444]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a6e      	ldr	r2, [pc, #440]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	4b6c      	ldr	r3, [pc, #432]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a6b      	ldr	r2, [pc, #428]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fd fd58 	bl	8003d80 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fd fd54 	bl	8003d80 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	@ 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e21f      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	4b61      	ldr	r3, [pc, #388]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0xdc>
 80062f2:	e014      	b.n	800631e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fd fd44 	bl	8003d80 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fd fd40 	bl	8003d80 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	@ 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e20b      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800630e:	4b57      	ldr	r3, [pc, #348]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0x104>
 800631a:	e000      	b.n	800631e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d06f      	beq.n	800640a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800632a:	4b50      	ldr	r3, [pc, #320]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b00      	cmp	r3, #0
 8006334:	d017      	beq.n	8006366 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006336:	4b4d      	ldr	r3, [pc, #308]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800633e:	2b08      	cmp	r3, #8
 8006340:	d105      	bne.n	800634e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006342:	4b4a      	ldr	r3, [pc, #296]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800634e:	4b47      	ldr	r3, [pc, #284]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d11c      	bne.n	8006394 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800635a:	4b44      	ldr	r3, [pc, #272]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d116      	bne.n	8006394 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	4b41      	ldr	r3, [pc, #260]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_RCC_OscConfig+0x186>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d001      	beq.n	800637e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e1d3      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637e:	4b3b      	ldr	r3, [pc, #236]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4937      	ldr	r1, [pc, #220]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006392:	e03a      	b.n	800640a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d020      	beq.n	80063de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800639c:	4b34      	ldr	r3, [pc, #208]	@ (8006470 <HAL_RCC_OscConfig+0x278>)
 800639e:	2201      	movs	r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a2:	f7fd fced 	bl	8003d80 <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063aa:	f7fd fce9 	bl	8003d80 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e1b4      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063bc:	4b2b      	ldr	r3, [pc, #172]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0f0      	beq.n	80063aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c8:	4b28      	ldr	r3, [pc, #160]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4925      	ldr	r1, [pc, #148]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]
 80063dc:	e015      	b.n	800640a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063de:	4b24      	ldr	r3, [pc, #144]	@ (8006470 <HAL_RCC_OscConfig+0x278>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fd fccc 	bl	8003d80 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ec:	f7fd fcc8 	bl	8003d80 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e193      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063fe:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d036      	beq.n	8006484 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800641e:	4b15      	ldr	r3, [pc, #84]	@ (8006474 <HAL_RCC_OscConfig+0x27c>)
 8006420:	2201      	movs	r2, #1
 8006422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006424:	f7fd fcac 	bl	8003d80 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642c:	f7fd fca8 	bl	8003d80 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e173      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800643e:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <HAL_RCC_OscConfig+0x274>)
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0x234>
 800644a:	e01b      	b.n	8006484 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800644c:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <HAL_RCC_OscConfig+0x27c>)
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fd fc95 	bl	8003d80 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006458:	e00e      	b.n	8006478 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800645a:	f7fd fc91 	bl	8003d80 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d907      	bls.n	8006478 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e15c      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
 800646c:	40023800 	.word	0x40023800
 8006470:	42470000 	.word	0x42470000
 8006474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006478:	4b8a      	ldr	r3, [pc, #552]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800647a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1ea      	bne.n	800645a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8097 	beq.w	80065c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006496:	4b83      	ldr	r3, [pc, #524]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	4b7f      	ldr	r3, [pc, #508]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	4a7e      	ldr	r2, [pc, #504]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80064ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064b2:	4b7c      	ldr	r3, [pc, #496]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c2:	4b79      	ldr	r3, [pc, #484]	@ (80066a8 <HAL_RCC_OscConfig+0x4b0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d118      	bne.n	8006500 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ce:	4b76      	ldr	r3, [pc, #472]	@ (80066a8 <HAL_RCC_OscConfig+0x4b0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a75      	ldr	r2, [pc, #468]	@ (80066a8 <HAL_RCC_OscConfig+0x4b0>)
 80064d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064da:	f7fd fc51 	bl	8003d80 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e2:	f7fd fc4d 	bl	8003d80 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e118      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f4:	4b6c      	ldr	r3, [pc, #432]	@ (80066a8 <HAL_RCC_OscConfig+0x4b0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d106      	bne.n	8006516 <HAL_RCC_OscConfig+0x31e>
 8006508:	4b66      	ldr	r3, [pc, #408]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650c:	4a65      	ldr	r2, [pc, #404]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	6713      	str	r3, [r2, #112]	@ 0x70
 8006514:	e01c      	b.n	8006550 <HAL_RCC_OscConfig+0x358>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d10c      	bne.n	8006538 <HAL_RCC_OscConfig+0x340>
 800651e:	4b61      	ldr	r3, [pc, #388]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a60      	ldr	r2, [pc, #384]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
 800652a:	4b5e      	ldr	r3, [pc, #376]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	4a5d      	ldr	r2, [pc, #372]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6713      	str	r3, [r2, #112]	@ 0x70
 8006536:	e00b      	b.n	8006550 <HAL_RCC_OscConfig+0x358>
 8006538:	4b5a      	ldr	r3, [pc, #360]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800653a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653c:	4a59      	ldr	r2, [pc, #356]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	6713      	str	r3, [r2, #112]	@ 0x70
 8006544:	4b57      	ldr	r3, [pc, #348]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006548:	4a56      	ldr	r2, [pc, #344]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800654a:	f023 0304 	bic.w	r3, r3, #4
 800654e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fd fc12 	bl	8003d80 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fd fc0e 	bl	8003d80 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0d7      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006576:	4b4b      	ldr	r3, [pc, #300]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ee      	beq.n	8006560 <HAL_RCC_OscConfig+0x368>
 8006582:	e014      	b.n	80065ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fd fbfc 	bl	8003d80 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800658a:	e00a      	b.n	80065a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800658c:	f7fd fbf8 	bl	8003d80 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e0c1      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065a2:	4b40      	ldr	r3, [pc, #256]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1ee      	bne.n	800658c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d105      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b4:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b8:	4a3a      	ldr	r2, [pc, #232]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80065ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80ad 	beq.w	8006724 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ca:	4b36      	ldr	r3, [pc, #216]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d060      	beq.n	8006698 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d145      	bne.n	800666a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065de:	4b33      	ldr	r3, [pc, #204]	@ (80066ac <HAL_RCC_OscConfig+0x4b4>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e4:	f7fd fbcc 	bl	8003d80 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ec:	f7fd fbc8 	bl	8003d80 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e093      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	4b29      	ldr	r3, [pc, #164]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69da      	ldr	r2, [r3, #28]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006618:	019b      	lsls	r3, r3, #6
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	3b01      	subs	r3, #1
 8006624:	041b      	lsls	r3, r3, #16
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	061b      	lsls	r3, r3, #24
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006634:	071b      	lsls	r3, r3, #28
 8006636:	491b      	ldr	r1, [pc, #108]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 8006638:	4313      	orrs	r3, r2
 800663a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCC_OscConfig+0x4b4>)
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006642:	f7fd fb9d 	bl	8003d80 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664a:	f7fd fb99 	bl	8003d80 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e064      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800665c:	4b11      	ldr	r3, [pc, #68]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCC_OscConfig+0x452>
 8006668:	e05c      	b.n	8006724 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b10      	ldr	r3, [pc, #64]	@ (80066ac <HAL_RCC_OscConfig+0x4b4>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fd fb86 	bl	8003d80 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006678:	f7fd fb82 	bl	8003d80 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e04d      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668a:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <HAL_RCC_OscConfig+0x4ac>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x480>
 8006696:	e045      	b.n	8006724 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d107      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e040      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40007000 	.word	0x40007000
 80066ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <HAL_RCC_OscConfig+0x538>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d030      	beq.n	8006720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d129      	bne.n	8006720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d122      	bne.n	8006720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d119      	bne.n	8006720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	3b01      	subs	r3, #1
 80066fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d10f      	bne.n	8006720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d107      	bne.n	8006720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	40023800 	.word	0x40023800

08006734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e041      	b.n	80067ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fb fd18 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f000 fe5e 	bl	8007434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d001      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e04e      	b.n	800688a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a23      	ldr	r2, [pc, #140]	@ (8006898 <HAL_TIM_Base_Start_IT+0xc4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006816:	d01d      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1f      	ldr	r2, [pc, #124]	@ (800689c <HAL_TIM_Base_Start_IT+0xc8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a1e      	ldr	r2, [pc, #120]	@ (80068a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1c      	ldr	r2, [pc, #112]	@ (80068a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1b      	ldr	r2, [pc, #108]	@ (80068a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a19      	ldr	r2, [pc, #100]	@ (80068ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x80>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a18      	ldr	r2, [pc, #96]	@ (80068b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d111      	bne.n	8006878 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b06      	cmp	r3, #6
 8006864:	d010      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006876:	e007      	b.n	8006888 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40010000 	.word	0x40010000
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	40010400 	.word	0x40010400
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40001800 	.word	0x40001800

080068b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e041      	b.n	800694a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f839 	bl	8006952 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f000 fd9e 	bl	8007434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	bf0c      	ite	eq
 800698c:	2301      	moveq	r3, #1
 800698e:	2300      	movne	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e022      	b.n	80069da <HAL_TIM_PWM_Start_DMA+0x72>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b04      	cmp	r3, #4
 8006998:	d109      	bne.n	80069ae <HAL_TIM_PWM_Start_DMA+0x46>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	e015      	b.n	80069da <HAL_TIM_PWM_Start_DMA+0x72>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d109      	bne.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e008      	b.n	80069da <HAL_TIM_PWM_Start_DMA+0x72>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	e171      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_TIM_PWM_Start_DMA+0x94>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e022      	b.n	8006a42 <HAL_TIM_PWM_Start_DMA+0xda>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d109      	bne.n	8006a16 <HAL_TIM_PWM_Start_DMA+0xae>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	bf0c      	ite	eq
 8006a0e:	2301      	moveq	r3, #1
 8006a10:	2300      	movne	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	e015      	b.n	8006a42 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d109      	bne.n	8006a30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	bf0c      	ite	eq
 8006a28:	2301      	moveq	r3, #1
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	e008      	b.n	8006a42 <HAL_TIM_PWM_Start_DMA+0xda>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d024      	beq.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <HAL_TIM_PWM_Start_DMA+0xee>
 8006a4c:	887b      	ldrh	r3, [r7, #2]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e137      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a64:	e016      	b.n	8006a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d104      	bne.n	8006a76 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a74:	e00e      	b.n	8006a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Start_DMA+0x11e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a84:	e006      	b.n	8006a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a8e:	e001      	b.n	8006a94 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e118      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	f200 80ae 	bhi.w	8006bf8 <HAL_TIM_PWM_Start_DMA+0x290>
 8006a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ad9 	.word	0x08006ad9
 8006aa8:	08006bf9 	.word	0x08006bf9
 8006aac:	08006bf9 	.word	0x08006bf9
 8006ab0:	08006bf9 	.word	0x08006bf9
 8006ab4:	08006b21 	.word	0x08006b21
 8006ab8:	08006bf9 	.word	0x08006bf9
 8006abc:	08006bf9 	.word	0x08006bf9
 8006ac0:	08006bf9 	.word	0x08006bf9
 8006ac4:	08006b69 	.word	0x08006b69
 8006ac8:	08006bf9 	.word	0x08006bf9
 8006acc:	08006bf9 	.word	0x08006bf9
 8006ad0:	08006bf9 	.word	0x08006bf9
 8006ad4:	08006bb1 	.word	0x08006bb1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	4a7c      	ldr	r2, [pc, #496]	@ (8006cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006ade:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	4a7b      	ldr	r2, [pc, #492]	@ (8006cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006ae6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	4a7a      	ldr	r2, [pc, #488]	@ (8006cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006aee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3334      	adds	r3, #52	@ 0x34
 8006afc:	461a      	mov	r2, r3
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	f7fe fc14 	bl	800532c <HAL_DMA_Start_IT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e0db      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1c:	60da      	str	r2, [r3, #12]
      break;
 8006b1e:	e06e      	b.n	8006bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	4a6a      	ldr	r2, [pc, #424]	@ (8006cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006b26:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	4a69      	ldr	r2, [pc, #420]	@ (8006cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006b2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	4a68      	ldr	r2, [pc, #416]	@ (8006cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006b36:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3338      	adds	r3, #56	@ 0x38
 8006b44:	461a      	mov	r2, r3
 8006b46:	887b      	ldrh	r3, [r7, #2]
 8006b48:	f7fe fbf0 	bl	800532c <HAL_DMA_Start_IT>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e0b7      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b64:	60da      	str	r2, [r3, #12]
      break;
 8006b66:	e04a      	b.n	8006bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	4a58      	ldr	r2, [pc, #352]	@ (8006cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	4a57      	ldr	r2, [pc, #348]	@ (8006cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	4a56      	ldr	r2, [pc, #344]	@ (8006cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006b7e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	333c      	adds	r3, #60	@ 0x3c
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	f7fe fbcc 	bl	800532c <HAL_DMA_Start_IT>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e093      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bac:	60da      	str	r2, [r3, #12]
      break;
 8006bae:	e026      	b.n	8006bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	4a46      	ldr	r2, [pc, #280]	@ (8006cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	4a45      	ldr	r2, [pc, #276]	@ (8006cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	4a44      	ldr	r2, [pc, #272]	@ (8006cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006bc6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3340      	adds	r3, #64	@ 0x40
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	f7fe fba8 	bl	800532c <HAL_DMA_Start_IT>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e06f      	b.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bf4:	60da      	str	r2, [r3, #12]
      break;
 8006bf6:	e002      	b.n	8006bfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d15f      	bne.n	8006cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fefb 	bl	8007a08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a31      	ldr	r2, [pc, #196]	@ (8006cdc <HAL_TIM_PWM_Start_DMA+0x374>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIM_PWM_Start_DMA+0x2be>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a2f      	ldr	r2, [pc, #188]	@ (8006ce0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d101      	bne.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a25      	ldr	r2, [pc, #148]	@ (8006cdc <HAL_TIM_PWM_Start_DMA+0x374>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c52:	d01d      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a22      	ldr	r2, [pc, #136]	@ (8006ce4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a21      	ldr	r2, [pc, #132]	@ (8006ce8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cec <HAL_TIM_PWM_Start_DMA+0x384>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d111      	bne.n	8006cb4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d010      	beq.n	8006cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0201 	orr.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb2:	e007      	b.n	8006cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	08007325 	.word	0x08007325
 8006cd4:	080073cd 	.word	0x080073cd
 8006cd8:	08007293 	.word	0x08007293
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40010400 	.word	0x40010400
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40001800 	.word	0x40001800

08006cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d122      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d11b      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0202 	mvn.w	r2, #2
 8006d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa77 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa69 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa7a 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d122      	bne.n	8006da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d11b      	bne.n	8006da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0204 	mvn.w	r2, #4
 8006d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa4d 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006d94:	e005      	b.n	8006da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa3f 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa50 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d122      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d11b      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0208 	mvn.w	r2, #8
 8006dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa23 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa15 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fa26 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d122      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d11b      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0210 	mvn.w	r2, #16
 8006e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2208      	movs	r2, #8
 8006e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f9f9 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006e3c:	e005      	b.n	8006e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f9eb 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f9fc 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d10e      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0201 	mvn.w	r2, #1
 8006e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fb f8a2 	bl	8001fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b80      	cmp	r3, #128	@ 0x80
 8006e88:	d10e      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e94:	2b80      	cmp	r3, #128	@ 0x80
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fe5c 	bl	8007b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb2:	2b40      	cmp	r3, #64	@ 0x40
 8006eb4:	d10e      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec0:	2b40      	cmp	r3, #64	@ 0x40
 8006ec2:	d107      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f9cb 	bl	800726a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d10e      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0220 	mvn.w	r2, #32
 8006ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fe26 	bl	8007b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e0ae      	b.n	8007084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b0c      	cmp	r3, #12
 8006f32:	f200 809f 	bhi.w	8007074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f36:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f71 	.word	0x08006f71
 8006f40:	08007075 	.word	0x08007075
 8006f44:	08007075 	.word	0x08007075
 8006f48:	08007075 	.word	0x08007075
 8006f4c:	08006fb1 	.word	0x08006fb1
 8006f50:	08007075 	.word	0x08007075
 8006f54:	08007075 	.word	0x08007075
 8006f58:	08007075 	.word	0x08007075
 8006f5c:	08006ff3 	.word	0x08006ff3
 8006f60:	08007075 	.word	0x08007075
 8006f64:	08007075 	.word	0x08007075
 8006f68:	08007075 	.word	0x08007075
 8006f6c:	08007033 	.word	0x08007033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fafc 	bl	8007574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0204 	bic.w	r2, r2, #4
 8006f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6999      	ldr	r1, [r3, #24]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	619a      	str	r2, [r3, #24]
      break;
 8006fae:	e064      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb4c 	bl	8007654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	021a      	lsls	r2, r3, #8
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	619a      	str	r2, [r3, #24]
      break;
 8006ff0:	e043      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fba1 	bl	8007740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0208 	orr.w	r2, r2, #8
 800700c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0204 	bic.w	r2, r2, #4
 800701c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	61da      	str	r2, [r3, #28]
      break;
 8007030:	e023      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fbf5 	bl	8007828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800704c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800705c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	021a      	lsls	r2, r3, #8
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	61da      	str	r2, [r3, #28]
      break;
 8007072:	e002      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]
      break;
 8007078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_TIM_ConfigClockSource+0x1c>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e0b4      	b.n	8007212 <HAL_TIM_ConfigClockSource+0x186>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e0:	d03e      	beq.n	8007160 <HAL_TIM_ConfigClockSource+0xd4>
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e6:	f200 8087 	bhi.w	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ee:	f000 8086 	beq.w	80071fe <HAL_TIM_ConfigClockSource+0x172>
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f6:	d87f      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 80070f8:	2b70      	cmp	r3, #112	@ 0x70
 80070fa:	d01a      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0xa6>
 80070fc:	2b70      	cmp	r3, #112	@ 0x70
 80070fe:	d87b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007100:	2b60      	cmp	r3, #96	@ 0x60
 8007102:	d050      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007104:	2b60      	cmp	r3, #96	@ 0x60
 8007106:	d877      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007108:	2b50      	cmp	r3, #80	@ 0x50
 800710a:	d03c      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0xfa>
 800710c:	2b50      	cmp	r3, #80	@ 0x50
 800710e:	d873      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007110:	2b40      	cmp	r3, #64	@ 0x40
 8007112:	d058      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	d86f      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007118:	2b30      	cmp	r3, #48	@ 0x30
 800711a:	d064      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 800711c:	2b30      	cmp	r3, #48	@ 0x30
 800711e:	d86b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007120:	2b20      	cmp	r3, #32
 8007122:	d060      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d867      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d05c      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 800712c:	2b10      	cmp	r3, #16
 800712e:	d05a      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007130:	e062      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6899      	ldr	r1, [r3, #8]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f000 fc41 	bl	80079c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	609a      	str	r2, [r3, #8]
      break;
 800715e:	e04f      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	6899      	ldr	r1, [r3, #8]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f000 fc2a 	bl	80079c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007182:	609a      	str	r2, [r3, #8]
      break;
 8007184:	e03c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6859      	ldr	r1, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	461a      	mov	r2, r3
 8007194:	f000 fb9e 	bl	80078d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2150      	movs	r1, #80	@ 0x50
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fbf7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80071a4:	e02c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6859      	ldr	r1, [r3, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f000 fbbd 	bl	8007932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2160      	movs	r1, #96	@ 0x60
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fbe7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80071c4:	e01c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f000 fb7e 	bl	80078d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2140      	movs	r1, #64	@ 0x40
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fbd7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f000 fbce 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80071f6:	e003      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d107      	bne.n	80072ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072b8:	e02a      	b.n	8007310 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d107      	bne.n	80072d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2202      	movs	r2, #2
 80072c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072d2:	e01d      	b.n	8007310 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d107      	bne.n	80072ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2204      	movs	r2, #4
 80072e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ec:	e010      	b.n	8007310 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d107      	bne.n	8007308 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2208      	movs	r2, #8
 80072fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007306:	e003      	b.n	8007310 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff ffb4 	bl	800727e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007330:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	d10b      	bne.n	8007354 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d136      	bne.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007352:	e031      	b.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d10b      	bne.n	8007376 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2202      	movs	r2, #2
 8007362:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d125      	bne.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007374:	e020      	b.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d10b      	bne.n	8007398 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2204      	movs	r2, #4
 8007384:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d114      	bne.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007396:	e00f      	b.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d10a      	bne.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2208      	movs	r2, #8
 80073a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff ff42 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d103      	bne.n	80073ec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	771a      	strb	r2, [r3, #28]
 80073ea:	e019      	b.n	8007420 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d103      	bne.n	80073fe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2202      	movs	r2, #2
 80073fa:	771a      	strb	r2, [r3, #28]
 80073fc:	e010      	b.n	8007420 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d103      	bne.n	8007410 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2204      	movs	r2, #4
 800740c:	771a      	strb	r2, [r3, #28]
 800740e:	e007      	b.n	8007420 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	429a      	cmp	r2, r3
 8007418:	d102      	bne.n	8007420 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2208      	movs	r2, #8
 800741e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff ff18 	bl	8007256 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
}
 800742c:	bf00      	nop
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a40      	ldr	r2, [pc, #256]	@ (8007548 <TIM_Base_SetConfig+0x114>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007452:	d00f      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a3d      	ldr	r2, [pc, #244]	@ (800754c <TIM_Base_SetConfig+0x118>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00b      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3c      	ldr	r2, [pc, #240]	@ (8007550 <TIM_Base_SetConfig+0x11c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d007      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a3b      	ldr	r2, [pc, #236]	@ (8007554 <TIM_Base_SetConfig+0x120>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a3a      	ldr	r2, [pc, #232]	@ (8007558 <TIM_Base_SetConfig+0x124>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2f      	ldr	r2, [pc, #188]	@ (8007548 <TIM_Base_SetConfig+0x114>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02b      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007494:	d027      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2c      	ldr	r2, [pc, #176]	@ (800754c <TIM_Base_SetConfig+0x118>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d023      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007550 <TIM_Base_SetConfig+0x11c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01f      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007554 <TIM_Base_SetConfig+0x120>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01b      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a29      	ldr	r2, [pc, #164]	@ (8007558 <TIM_Base_SetConfig+0x124>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d017      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a28      	ldr	r2, [pc, #160]	@ (800755c <TIM_Base_SetConfig+0x128>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d013      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a27      	ldr	r2, [pc, #156]	@ (8007560 <TIM_Base_SetConfig+0x12c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a26      	ldr	r2, [pc, #152]	@ (8007564 <TIM_Base_SetConfig+0x130>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00b      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a25      	ldr	r2, [pc, #148]	@ (8007568 <TIM_Base_SetConfig+0x134>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d007      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a24      	ldr	r2, [pc, #144]	@ (800756c <TIM_Base_SetConfig+0x138>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a23      	ldr	r2, [pc, #140]	@ (8007570 <TIM_Base_SetConfig+0x13c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d108      	bne.n	80074f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a0a      	ldr	r2, [pc, #40]	@ (8007548 <TIM_Base_SetConfig+0x114>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_Base_SetConfig+0xf8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a0c      	ldr	r2, [pc, #48]	@ (8007558 <TIM_Base_SetConfig+0x124>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d103      	bne.n	8007534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	615a      	str	r2, [r3, #20]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40014400 	.word	0x40014400
 8007564:	40014800 	.word	0x40014800
 8007568:	40001800 	.word	0x40001800
 800756c:	40001c00 	.word	0x40001c00
 8007570:	40002000 	.word	0x40002000

08007574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f023 0201 	bic.w	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0302 	bic.w	r3, r3, #2
 80075bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a20      	ldr	r2, [pc, #128]	@ (800764c <TIM_OC1_SetConfig+0xd8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_OC1_SetConfig+0x64>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10c      	bne.n	80075f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0308 	bic.w	r3, r3, #8
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a15      	ldr	r2, [pc, #84]	@ (800764c <TIM_OC1_SetConfig+0xd8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_OC1_SetConfig+0x8e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d111      	bne.n	8007626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f023 0210 	bic.w	r2, r3, #16
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800768a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0320 	bic.w	r3, r3, #32
 800769e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a22      	ldr	r2, [pc, #136]	@ (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC2_SetConfig+0x68>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a21      	ldr	r2, [pc, #132]	@ (800773c <TIM_OC2_SetConfig+0xe8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10d      	bne.n	80076d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a17      	ldr	r2, [pc, #92]	@ (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0x94>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	@ (800773c <TIM_OC2_SetConfig+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400

08007740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <TIM_OC3_SetConfig+0xe0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_OC3_SetConfig+0x66>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a20      	ldr	r2, [pc, #128]	@ (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10d      	bne.n	80077c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TIM_OC3_SetConfig+0xe0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC3_SetConfig+0x92>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d113      	bne.n	80077fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	621a      	str	r2, [r3, #32]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400

08007828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800785e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	031b      	lsls	r3, r3, #12
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a12      	ldr	r2, [pc, #72]	@ (80078cc <TIM_OC4_SetConfig+0xa4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_OC4_SetConfig+0x68>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a11      	ldr	r2, [pc, #68]	@ (80078d0 <TIM_OC4_SetConfig+0xa8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d109      	bne.n	80078a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f023 030a 	bic.w	r3, r3, #10
 8007910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0210 	bic.w	r2, r3, #16
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800795c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e05a      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d022      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab8:	d01d      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d018      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10c      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40000c00 	.word	0x40000c00
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40001800 	.word	0x40001800

08007b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e03f      	b.n	8007c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fa fc00 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2224      	movs	r2, #36	@ 0x24
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f829 	bl	8007c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695a      	ldr	r2, [r3, #20]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c14:	b0c0      	sub	sp, #256	@ 0x100
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2c:	68d9      	ldr	r1, [r3, #12]
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	ea40 0301 	orr.w	r3, r0, r1
 8007c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c68:	f021 010c 	bic.w	r1, r1, #12
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c76:	430b      	orrs	r3, r1
 8007c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8a:	6999      	ldr	r1, [r3, #24]
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	ea40 0301 	orr.w	r3, r0, r1
 8007c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b8f      	ldr	r3, [pc, #572]	@ (8007edc <UART_SetConfig+0x2cc>)
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d005      	beq.n	8007cb0 <UART_SetConfig+0xa0>
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b8d      	ldr	r3, [pc, #564]	@ (8007ee0 <UART_SetConfig+0x2d0>)
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d104      	bne.n	8007cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cb0:	f7fe f8b2 	bl	8005e18 <HAL_RCC_GetPCLK2Freq>
 8007cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cb8:	e003      	b.n	8007cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cba:	f7fe f899 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 8007cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ccc:	f040 810c 	bne.w	8007ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	1891      	adds	r1, r2, r2
 8007ce8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cea:	415b      	adcs	r3, r3
 8007cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	eb12 0801 	adds.w	r8, r2, r1
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	eb43 0901 	adc.w	r9, r3, r1
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d12:	4690      	mov	r8, r2
 8007d14:	4699      	mov	r9, r3
 8007d16:	4623      	mov	r3, r4
 8007d18:	eb18 0303 	adds.w	r3, r8, r3
 8007d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d20:	462b      	mov	r3, r5
 8007d22:	eb49 0303 	adc.w	r3, r9, r3
 8007d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d3e:	460b      	mov	r3, r1
 8007d40:	18db      	adds	r3, r3, r3
 8007d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d44:	4613      	mov	r3, r2
 8007d46:	eb42 0303 	adc.w	r3, r2, r3
 8007d4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d54:	f7f9 f826 	bl	8000da4 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4b61      	ldr	r3, [pc, #388]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	011c      	lsls	r4, r3, #4
 8007d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	1891      	adds	r1, r2, r2
 8007d7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d80:	415b      	adcs	r3, r3
 8007d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d88:	4641      	mov	r1, r8
 8007d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d8e:	4649      	mov	r1, r9
 8007d90:	eb43 0b01 	adc.w	fp, r3, r1
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007da8:	4692      	mov	sl, r2
 8007daa:	469b      	mov	fp, r3
 8007dac:	4643      	mov	r3, r8
 8007dae:	eb1a 0303 	adds.w	r3, sl, r3
 8007db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007db6:	464b      	mov	r3, r9
 8007db8:	eb4b 0303 	adc.w	r3, fp, r3
 8007dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	18db      	adds	r3, r3, r3
 8007dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dda:	4613      	mov	r3, r2
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dea:	f7f8 ffdb 	bl	8000da4 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007df6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2264      	movs	r2, #100	@ 0x64
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	1acb      	subs	r3, r1, r3
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e18:	441c      	add	r4, r3
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e34:	415b      	adcs	r3, r3
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	1851      	adds	r1, r2, r1
 8007e40:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e42:	4649      	mov	r1, r9
 8007e44:	414b      	adcs	r3, r1
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e54:	4659      	mov	r1, fp
 8007e56:	00cb      	lsls	r3, r1, #3
 8007e58:	4651      	mov	r1, sl
 8007e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5e:	4651      	mov	r1, sl
 8007e60:	00ca      	lsls	r2, r1, #3
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	4642      	mov	r2, r8
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e70:	464b      	mov	r3, r9
 8007e72:	460a      	mov	r2, r1
 8007e74:	eb42 0303 	adc.w	r3, r2, r3
 8007e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e90:	460b      	mov	r3, r1
 8007e92:	18db      	adds	r3, r3, r3
 8007e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e96:	4613      	mov	r3, r2
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ea6:	f7f8 ff7d 	bl	8000da4 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	2164      	movs	r1, #100	@ 0x64
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	3332      	adds	r3, #50	@ 0x32
 8007ec2:	4a08      	ldr	r2, [pc, #32]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	f003 0207 	and.w	r2, r3, #7
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4422      	add	r2, r4
 8007ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ed8:	e106      	b.n	80080e8 <UART_SetConfig+0x4d8>
 8007eda:	bf00      	nop
 8007edc:	40011000 	.word	0x40011000
 8007ee0:	40011400 	.word	0x40011400
 8007ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	1891      	adds	r1, r2, r2
 8007f00:	6239      	str	r1, [r7, #32]
 8007f02:	415b      	adcs	r3, r3
 8007f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	1854      	adds	r4, r2, r1
 8007f0e:	4649      	mov	r1, r9
 8007f10:	eb43 0501 	adc.w	r5, r3, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	00eb      	lsls	r3, r5, #3
 8007f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f22:	00e2      	lsls	r2, r4, #3
 8007f24:	4614      	mov	r4, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	4643      	mov	r3, r8
 8007f2a:	18e3      	adds	r3, r4, r3
 8007f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f30:	464b      	mov	r3, r9
 8007f32:	eb45 0303 	adc.w	r3, r5, r3
 8007f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f56:	4629      	mov	r1, r5
 8007f58:	008b      	lsls	r3, r1, #2
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f60:	4621      	mov	r1, r4
 8007f62:	008a      	lsls	r2, r1, #2
 8007f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f68:	f7f8 ff1c 	bl	8000da4 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4b60      	ldr	r3, [pc, #384]	@ (80080f4 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 2302 	umull	r2, r3, r3, r2
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	011c      	lsls	r4, r3, #4
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	1891      	adds	r1, r2, r2
 8007f92:	61b9      	str	r1, [r7, #24]
 8007f94:	415b      	adcs	r3, r3
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	1851      	adds	r1, r2, r1
 8007fa0:	6139      	str	r1, [r7, #16]
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	414b      	adcs	r3, r1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	00cb      	lsls	r3, r1, #3
 8007fb8:	4651      	mov	r1, sl
 8007fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	00ca      	lsls	r2, r1, #3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4642      	mov	r2, r8
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	eb42 0303 	adc.w	r3, r2, r3
 8007fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fe6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	008b      	lsls	r3, r1, #2
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffe:	4641      	mov	r1, r8
 8008000:	008a      	lsls	r2, r1, #2
 8008002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008006:	f7f8 fecd 	bl	8000da4 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4611      	mov	r1, r2
 8008010:	4b38      	ldr	r3, [pc, #224]	@ (80080f4 <UART_SetConfig+0x4e4>)
 8008012:	fba3 2301 	umull	r2, r3, r3, r1
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	2264      	movs	r2, #100	@ 0x64
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	1acb      	subs	r3, r1, r3
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	3332      	adds	r3, #50	@ 0x32
 8008024:	4a33      	ldr	r2, [pc, #204]	@ (80080f4 <UART_SetConfig+0x4e4>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008030:	441c      	add	r4, r3
 8008032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008036:	2200      	movs	r2, #0
 8008038:	673b      	str	r3, [r7, #112]	@ 0x70
 800803a:	677a      	str	r2, [r7, #116]	@ 0x74
 800803c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	1891      	adds	r1, r2, r2
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	415b      	adcs	r3, r3
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008050:	4641      	mov	r1, r8
 8008052:	1851      	adds	r1, r2, r1
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	4649      	mov	r1, r9
 8008058:	414b      	adcs	r3, r1
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008068:	4659      	mov	r1, fp
 800806a:	00cb      	lsls	r3, r1, #3
 800806c:	4651      	mov	r1, sl
 800806e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008072:	4651      	mov	r1, sl
 8008074:	00ca      	lsls	r2, r1, #3
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	4603      	mov	r3, r0
 800807c:	4642      	mov	r2, r8
 800807e:	189b      	adds	r3, r3, r2
 8008080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008082:	464b      	mov	r3, r9
 8008084:	460a      	mov	r2, r1
 8008086:	eb42 0303 	adc.w	r3, r2, r3
 800808a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	663b      	str	r3, [r7, #96]	@ 0x60
 8008096:	667a      	str	r2, [r7, #100]	@ 0x64
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080a4:	4649      	mov	r1, r9
 80080a6:	008b      	lsls	r3, r1, #2
 80080a8:	4641      	mov	r1, r8
 80080aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ae:	4641      	mov	r1, r8
 80080b0:	008a      	lsls	r2, r1, #2
 80080b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080b6:	f7f8 fe75 	bl	8000da4 <__aeabi_uldivmod>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <UART_SetConfig+0x4e4>)
 80080c0:	fba3 1302 	umull	r1, r3, r3, r2
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	2164      	movs	r1, #100	@ 0x64
 80080c8:	fb01 f303 	mul.w	r3, r1, r3
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	3332      	adds	r3, #50	@ 0x32
 80080d2:	4a08      	ldr	r2, [pc, #32]	@ (80080f4 <UART_SetConfig+0x4e4>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	095b      	lsrs	r3, r3, #5
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4422      	add	r2, r4
 80080e6:	609a      	str	r2, [r3, #8]
}
 80080e8:	bf00      	nop
 80080ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080ee:	46bd      	mov	sp, r7
 80080f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f4:	51eb851f 	.word	0x51eb851f

080080f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800810a:	2b84      	cmp	r3, #132	@ 0x84
 800810c:	d005      	beq.n	800811a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800810e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	3303      	adds	r3, #3
 8008118:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800811a:	68fb      	ldr	r3, [r7, #12]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812e:	f3ef 8305 	mrs	r3, IPSR
 8008132:	607b      	str	r3, [r7, #4]
  return(result);
 8008134:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008136:	2b00      	cmp	r3, #0
 8008138:	bf14      	ite	ne
 800813a:	2301      	movne	r3, #1
 800813c:	2300      	moveq	r3, #0
 800813e:	b2db      	uxtb	r3, r3
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008150:	f001 f974 	bl	800943c <vTaskStartScheduler>
  
  return osOK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	bd80      	pop	{r7, pc}

0800815a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800815a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815c:	b089      	sub	sp, #36	@ 0x24
 800815e:	af04      	add	r7, sp, #16
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d020      	beq.n	80081ae <osThreadCreate+0x54>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01c      	beq.n	80081ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685c      	ldr	r4, [r3, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691e      	ldr	r6, [r3, #16]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff ffb6 	bl	80080f8 <makeFreeRtosPriority>
 800818c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008196:	9202      	str	r2, [sp, #8]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	9100      	str	r1, [sp, #0]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	4632      	mov	r2, r6
 80081a0:	4629      	mov	r1, r5
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 ff64 	bl	8009070 <xTaskCreateStatic>
 80081a8:	4603      	mov	r3, r0
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e01c      	b.n	80081e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685c      	ldr	r4, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff ff98 	bl	80080f8 <makeFreeRtosPriority>
 80081c8:	4602      	mov	r2, r0
 80081ca:	f107 030c 	add.w	r3, r7, #12
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	9200      	str	r2, [sp, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	4632      	mov	r2, r6
 80081d6:	4629      	mov	r1, r5
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 ffa9 	bl	8009130 <xTaskCreate>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d001      	beq.n	80081e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e000      	b.n	80081ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081e8:	68fb      	ldr	r3, [r7, #12]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <osDelay+0x16>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	e000      	b.n	800820a <osDelay+0x18>
 8008208:	2301      	movs	r3, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f8e0 	bl	80093d0 <vTaskDelay>
  
  return osOK;
 8008210:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4619      	mov	r1, r3
 8008230:	2001      	movs	r0, #1
 8008232:	f000 fab6 	bl	80087a2 <xQueueCreateMutexStatic>
 8008236:	4603      	mov	r3, r0
 8008238:	e003      	b.n	8008242 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800823a:	2001      	movs	r0, #1
 800823c:	f000 fa99 	bl	8008772 <xQueueCreateMutex>
 8008240:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008256:	2300      	movs	r3, #0
 8008258:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <osMutexWait+0x18>
    return osErrorParameter;
 8008260:	2380      	movs	r3, #128	@ 0x80
 8008262:	e03a      	b.n	80082da <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d103      	bne.n	8008278 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008270:	f04f 33ff 	mov.w	r3, #4294967295
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e009      	b.n	800828c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <osMutexWait+0x40>
      ticks = 1;
 8008288:	2301      	movs	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800828c:	f7ff ff4c 	bl	8008128 <inHandlerMode>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d017      	beq.n	80082c6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	461a      	mov	r2, r3
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fd3c 	bl	8008d1c <xQueueReceiveFromISR>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d001      	beq.n	80082ae <osMutexWait+0x62>
      return osErrorOS;
 80082aa:	23ff      	movs	r3, #255	@ 0xff
 80082ac:	e015      	b.n	80082da <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d011      	beq.n	80082d8 <osMutexWait+0x8c>
 80082b4:	4b0b      	ldr	r3, [pc, #44]	@ (80082e4 <osMutexWait+0x98>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	e008      	b.n	80082d8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80082c6:	68f9      	ldr	r1, [r7, #12]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc17 	bl	8008afc <xQueueSemaphoreTake>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d001      	beq.n	80082d8 <osMutexWait+0x8c>
    return osErrorOS;
 80082d4:	23ff      	movs	r3, #255	@ 0xff
 80082d6:	e000      	b.n	80082da <osMutexWait+0x8e>
  }
  
  return osOK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80082f8:	f7ff ff16 	bl	8008128 <inHandlerMode>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d016      	beq.n	8008330 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008302:	f107 0308 	add.w	r3, r7, #8
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fb67 	bl	80089dc <xQueueGiveFromISR>
 800830e:	4603      	mov	r3, r0
 8008310:	2b01      	cmp	r3, #1
 8008312:	d001      	beq.n	8008318 <osMutexRelease+0x30>
      return osErrorOS;
 8008314:	23ff      	movs	r3, #255	@ 0xff
 8008316:	e017      	b.n	8008348 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d013      	beq.n	8008346 <osMutexRelease+0x5e>
 800831e:	4b0c      	ldr	r3, [pc, #48]	@ (8008350 <osMutexRelease+0x68>)
 8008320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	e00a      	b.n	8008346 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa4e 	bl	80087d8 <xQueueGenericSend>
 800833c:	4603      	mov	r3, r0
 800833e:	2b01      	cmp	r3, #1
 8008340:	d001      	beq.n	8008346 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008342:	23ff      	movs	r3, #255	@ 0xff
 8008344:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008346:	68fb      	ldr	r3, [r7, #12]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f103 0208 	add.w	r2, r3, #8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f04f 32ff 	mov.w	r2, #4294967295
 800836c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f103 0208 	add.w	r2, r3, #8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f103 0208 	add.w	r2, r3, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d103      	bne.n	8008416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e00c      	b.n	8008430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3308      	adds	r3, #8
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	e002      	b.n	8008424 <vListInsert+0x2e>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	429a      	cmp	r2, r3
 800842e:	d2f6      	bcs.n	800841e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
}
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6892      	ldr	r2, [r2, #8]
 800847e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6852      	ldr	r2, [r2, #4]
 8008488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	429a      	cmp	r2, r3
 8008492:	d103      	bne.n	800849c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084e8:	f001 ff1e 	bl	800a328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	441a      	add	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008518:	3b01      	subs	r3, #1
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	441a      	add	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	22ff      	movs	r2, #255	@ 0xff
 800852c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	22ff      	movs	r2, #255	@ 0xff
 8008534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d114      	bne.n	8008568 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d01a      	beq.n	800857c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3310      	adds	r3, #16
 800854a:	4618      	mov	r0, r3
 800854c:	f001 f9d0 	bl	80098f0 <xTaskRemoveFromEventList>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d012      	beq.n	800857c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008556:	4b0d      	ldr	r3, [pc, #52]	@ (800858c <xQueueGenericReset+0xd0>)
 8008558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	e009      	b.n	800857c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3310      	adds	r3, #16
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fef1 	bl	8008354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3324      	adds	r3, #36	@ 0x24
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff feec 	bl	8008354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800857c:	f001 ff06 	bl	800a38c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008580:	2301      	movs	r3, #1
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08e      	sub	sp, #56	@ 0x38
 8008594:	af02      	add	r7, sp, #8
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <xQueueGenericCreateStatic+0x56>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <xQueueGenericCreateStatic+0x5a>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <xQueueGenericCreateStatic+0x5c>
 80085ea:	2300      	movs	r3, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	623b      	str	r3, [r7, #32]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <xQueueGenericCreateStatic+0x84>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <xQueueGenericCreateStatic+0x88>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <xQueueGenericCreateStatic+0x8a>
 8008618:	2300      	movs	r3, #0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61fb      	str	r3, [r7, #28]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008636:	2348      	movs	r3, #72	@ 0x48
 8008638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b48      	cmp	r3, #72	@ 0x48
 800863e:	d00b      	beq.n	8008658 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	61bb      	str	r3, [r7, #24]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008658:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800865e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800866c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f840 	bl	8008700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008682:	4618      	mov	r0, r3
 8008684:	3730      	adds	r7, #48	@ 0x30
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800868a:	b580      	push	{r7, lr}
 800868c:	b08a      	sub	sp, #40	@ 0x28
 800868e:	af02      	add	r7, sp, #8
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	4613      	mov	r3, r2
 8008696:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10b      	bne.n	80086b6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	613b      	str	r3, [r7, #16]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3348      	adds	r3, #72	@ 0x48
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 ff51 	bl	800a56c <pvPortMalloc>
 80086ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d011      	beq.n	80086f6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3348      	adds	r3, #72	@ 0x48
 80086da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086e4:	79fa      	ldrb	r2, [r7, #7]
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4613      	mov	r3, r2
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f805 	bl	8008700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086f6:	69bb      	ldr	r3, [r7, #24]
	}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d103      	bne.n	800871c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	e002      	b.n	8008722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800872e:	2101      	movs	r1, #1
 8008730:	69b8      	ldr	r0, [r7, #24]
 8008732:	f7ff fec3 	bl	80084bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800875e:	2300      	movs	r3, #0
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f837 	bl	80087d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	4603      	mov	r3, r0
 800877a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800877c:	2301      	movs	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	2300      	movs	r3, #0
 8008782:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	461a      	mov	r2, r3
 8008788:	6939      	ldr	r1, [r7, #16]
 800878a:	6978      	ldr	r0, [r7, #20]
 800878c:	f7ff ff7d 	bl	800868a <xQueueGenericCreate>
 8008790:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff ffd3 	bl	800873e <prvInitialiseMutex>

		return xNewQueue;
 8008798:	68fb      	ldr	r3, [r7, #12]
	}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b088      	sub	sp, #32
 80087a6:	af02      	add	r7, sp, #8
 80087a8:	4603      	mov	r3, r0
 80087aa:	6039      	str	r1, [r7, #0]
 80087ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80087ae:	2301      	movs	r3, #1
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2200      	movs	r2, #0
 80087be:	6939      	ldr	r1, [r7, #16]
 80087c0:	6978      	ldr	r0, [r7, #20]
 80087c2:	f7ff fee5 	bl	8008590 <xQueueGenericCreateStatic>
 80087c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff ffb8 	bl	800873e <prvInitialiseMutex>

		return xNewQueue;
 80087ce:	68fb      	ldr	r3, [r7, #12]
	}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08e      	sub	sp, #56	@ 0x38
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087e6:	2300      	movs	r3, #0
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10b      	bne.n	800880c <xQueueGenericSend+0x34>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <xQueueGenericSend+0x42>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <xQueueGenericSend+0x46>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <xQueueGenericSend+0x48>
 800881e:	2300      	movs	r3, #0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <xQueueGenericSend+0x64>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d103      	bne.n	800884a <xQueueGenericSend+0x72>
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <xQueueGenericSend+0x76>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xQueueGenericSend+0x78>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <xQueueGenericSend+0x94>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	623b      	str	r3, [r7, #32]
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800886c:	f001 fa06 	bl	8009c7c <xTaskGetSchedulerState>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <xQueueGenericSend+0xa4>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <xQueueGenericSend+0xa8>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <xQueueGenericSend+0xaa>
 8008880:	2300      	movs	r3, #0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <xQueueGenericSend+0xc6>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	61fb      	str	r3, [r7, #28]
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e7fd      	b.n	800889a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800889e:	f001 fd43 	bl	800a328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <xQueueGenericSend+0xdc>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d129      	bne.n	8008908 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ba:	f000 fac9 	bl	8008e50 <prvCopyDataToQueue>
 80088be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	3324      	adds	r3, #36	@ 0x24
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 f80f 	bl	80098f0 <xTaskRemoveFromEventList>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d013      	beq.n	8008900 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088d8:	4b3f      	ldr	r3, [pc, #252]	@ (80089d8 <xQueueGenericSend+0x200>)
 80088da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	e00a      	b.n	8008900 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d007      	beq.n	8008900 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088f0:	4b39      	ldr	r3, [pc, #228]	@ (80089d8 <xQueueGenericSend+0x200>)
 80088f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008900:	f001 fd44 	bl	800a38c <vPortExitCritical>
				return pdPASS;
 8008904:	2301      	movs	r3, #1
 8008906:	e063      	b.n	80089d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d103      	bne.n	8008916 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800890e:	f001 fd3d 	bl	800a38c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008912:	2300      	movs	r3, #0
 8008914:	e05c      	b.n	80089d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800891c:	f107 0314 	add.w	r3, r7, #20
 8008920:	4618      	mov	r0, r3
 8008922:	f001 f849 	bl	80099b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008926:	2301      	movs	r3, #1
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800892a:	f001 fd2f 	bl	800a38c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800892e:	f000 fdef 	bl	8009510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008932:	f001 fcf9 	bl	800a328 <vPortEnterCritical>
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800893c:	b25b      	sxtb	r3, r3
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d103      	bne.n	800894c <xQueueGenericSend+0x174>
 8008944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008952:	b25b      	sxtb	r3, r3
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d103      	bne.n	8008962 <xQueueGenericSend+0x18a>
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008962:	f001 fd13 	bl	800a38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008966:	1d3a      	adds	r2, r7, #4
 8008968:	f107 0314 	add.w	r3, r7, #20
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f001 f838 	bl	80099e4 <xTaskCheckForTimeOut>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d124      	bne.n	80089c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800897a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800897c:	f000 fb60 	bl	8009040 <prvIsQueueFull>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d018      	beq.n	80089b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	3310      	adds	r3, #16
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f000 ff88 	bl	80098a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008996:	f000 faeb 	bl	8008f70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800899a:	f000 fdc7 	bl	800952c <xTaskResumeAll>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f af7c 	bne.w	800889e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80089a6:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <xQueueGenericSend+0x200>)
 80089a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	e772      	b.n	800889e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089ba:	f000 fad9 	bl	8008f70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089be:	f000 fdb5 	bl	800952c <xTaskResumeAll>
 80089c2:	e76c      	b.n	800889e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089c6:	f000 fad3 	bl	8008f70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ca:	f000 fdaf 	bl	800952c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3738      	adds	r7, #56	@ 0x38
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08e      	sub	sp, #56	@ 0x38
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	623b      	str	r3, [r7, #32]
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	e7fd      	b.n	8008a04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	61fb      	str	r3, [r7, #28]
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <xQueueGiveFromISR+0x5c>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <xQueueGiveFromISR+0x60>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e000      	b.n	8008a3e <xQueueGiveFromISR+0x62>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	61bb      	str	r3, [r7, #24]
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	e7fd      	b.n	8008a56 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a5a:	f001 fd45 	bl	800a4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	617a      	str	r2, [r7, #20]
 8008a74:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d22b      	bcs.n	8008ae2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa4:	d112      	bne.n	8008acc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d016      	beq.n	8008adc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	3324      	adds	r3, #36	@ 0x24
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 ff1c 	bl	80098f0 <xTaskRemoveFromEventList>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00e      	beq.n	8008adc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e007      	b.n	8008adc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	b25a      	sxtb	r2, r3
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008adc:	2301      	movs	r3, #1
 8008ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ae0:	e001      	b.n	8008ae6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008af0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3738      	adds	r7, #56	@ 0x38
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08e      	sub	sp, #56	@ 0x38
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	623b      	str	r3, [r7, #32]
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	e7fd      	b.n	8008b2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	61fb      	str	r3, [r7, #28]
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b50:	f001 f894 	bl	8009c7c <xTaskGetSchedulerState>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <xQueueSemaphoreTake+0x64>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <xQueueSemaphoreTake+0x68>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <xQueueSemaphoreTake+0x6a>
 8008b64:	2300      	movs	r3, #0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	61bb      	str	r3, [r7, #24]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b82:	f001 fbd1 	bl	800a328 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d024      	beq.n	8008bdc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	1e5a      	subs	r2, r3, #1
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ba2:	f001 fa17 	bl	8009fd4 <pvTaskIncrementMutexHeldCount>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00f      	beq.n	8008bd4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb6:	3310      	adds	r3, #16
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fe99 	bl	80098f0 <xTaskRemoveFromEventList>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bc4:	4b54      	ldr	r3, [pc, #336]	@ (8008d18 <xQueueSemaphoreTake+0x21c>)
 8008bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bd4:	f001 fbda 	bl	800a38c <vPortExitCritical>
				return pdPASS;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e098      	b.n	8008d0e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d112      	bne.n	8008c08 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	617b      	str	r3, [r7, #20]
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c00:	f001 fbc4 	bl	800a38c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e082      	b.n	8008d0e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fed0 	bl	80099b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c1c:	f001 fbb6 	bl	800a38c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c20:	f000 fc76 	bl	8009510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c24:	f001 fb80 	bl	800a328 <vPortEnterCritical>
 8008c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c2e:	b25b      	sxtb	r3, r3
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d103      	bne.n	8008c3e <xQueueSemaphoreTake+0x142>
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c44:	b25b      	sxtb	r3, r3
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4a:	d103      	bne.n	8008c54 <xQueueSemaphoreTake+0x158>
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c54:	f001 fb9a 	bl	800a38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c58:	463a      	mov	r2, r7
 8008c5a:	f107 030c 	add.w	r3, r7, #12
 8008c5e:	4611      	mov	r1, r2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 febf 	bl	80099e4 <xTaskCheckForTimeOut>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d132      	bne.n	8008cd2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c6e:	f000 f9d1 	bl	8009014 <prvIsQueueEmpty>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d026      	beq.n	8008cc6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008c80:	f001 fb52 	bl	800a328 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 f815 	bl	8009cb8 <xTaskPriorityInherit>
 8008c8e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008c90:	f001 fb7c 	bl	800a38c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c96:	3324      	adds	r3, #36	@ 0x24
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fe01 	bl	80098a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ca4:	f000 f964 	bl	8008f70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ca8:	f000 fc40 	bl	800952c <xTaskResumeAll>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f47f af67 	bne.w	8008b82 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008cb4:	4b18      	ldr	r3, [pc, #96]	@ (8008d18 <xQueueSemaphoreTake+0x21c>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	e75d      	b.n	8008b82 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cc8:	f000 f952 	bl	8008f70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ccc:	f000 fc2e 	bl	800952c <xTaskResumeAll>
 8008cd0:	e757      	b.n	8008b82 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008cd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cd4:	f000 f94c 	bl	8008f70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cd8:	f000 fc28 	bl	800952c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cde:	f000 f999 	bl	8009014 <prvIsQueueEmpty>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f43f af4c 	beq.w	8008b82 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00d      	beq.n	8008d0c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008cf0:	f001 fb1a 	bl	800a328 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008cf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cf6:	f000 f893 	bl	8008e20 <prvGetDisinheritPriorityAfterTimeout>
 8008cfa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f001 f8d6 	bl	8009eb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d08:	f001 fb40 	bl	800a38c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3738      	adds	r7, #56	@ 0x38
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	@ 0x38
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	623b      	str	r3, [r7, #32]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <xQueueReceiveFromISR+0x3c>
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <xQueueReceiveFromISR+0x40>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <xQueueReceiveFromISR+0x42>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	61fb      	str	r3, [r7, #28]
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	e7fd      	b.n	8008d76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d7a:	f001 fbb5 	bl	800a4e8 <vPortValidateInterruptPriority>
	__asm volatile
 8008d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	61ba      	str	r2, [r7, #24]
 8008d94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d02f      	beq.n	8008e06 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008db4:	f000 f8b6 	bl	8008f24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	1e5a      	subs	r2, r3, #1
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008dc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	d112      	bne.n	8008df0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d016      	beq.n	8008e00 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	3310      	adds	r3, #16
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fd8a 	bl	80098f0 <xTaskRemoveFromEventList>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e007      	b.n	8008e00 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df4:	3301      	adds	r3, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	b25a      	sxtb	r2, r3
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008e00:	2301      	movs	r3, #1
 8008e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e04:	e001      	b.n	8008e0a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f383 8811 	msr	BASEPRI, r3
}
 8008e14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3738      	adds	r7, #56	@ 0x38
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1c3 0307 	rsb	r3, r3, #7
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	e001      	b.n	8008e42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e42:	68fb      	ldr	r3, [r7, #12]
	}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d14d      	bne.n	8008f12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 ff92 	bl	8009da4 <xTaskPriorityDisinherit>
 8008e80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	609a      	str	r2, [r3, #8]
 8008e88:	e043      	b.n	8008f12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d119      	bne.n	8008ec4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6858      	ldr	r0, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e98:	461a      	mov	r2, r3
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	f001 fdde 	bl	800aa5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea8:	441a      	add	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d32b      	bcc.n	8008f12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	e026      	b.n	8008f12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	68d8      	ldr	r0, [r3, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	461a      	mov	r2, r3
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	f001 fdc4 	bl	800aa5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008edc:	425b      	negs	r3, r3
 8008ede:	441a      	add	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d207      	bcs.n	8008f00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	425b      	negs	r3, r3
 8008efa:	441a      	add	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d105      	bne.n	8008f12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f1a:	697b      	ldr	r3, [r7, #20]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d018      	beq.n	8008f68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3e:	441a      	add	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d303      	bcc.n	8008f58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68d9      	ldr	r1, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f60:	461a      	mov	r2, r3
 8008f62:	6838      	ldr	r0, [r7, #0]
 8008f64:	f001 fd7a 	bl	800aa5c <memcpy>
	}
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f78:	f001 f9d6 	bl	800a328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f84:	e011      	b.n	8008faa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d012      	beq.n	8008fb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3324      	adds	r3, #36	@ 0x24
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fcac 	bl	80098f0 <xTaskRemoveFromEventList>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f9e:	f000 fd85 	bl	8009aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	dce9      	bgt.n	8008f86 <prvUnlockQueue+0x16>
 8008fb2:	e000      	b.n	8008fb6 <prvUnlockQueue+0x46>
					break;
 8008fb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	22ff      	movs	r2, #255	@ 0xff
 8008fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fbe:	f001 f9e5 	bl	800a38c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fc2:	f001 f9b1 	bl	800a328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fce:	e011      	b.n	8008ff4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d012      	beq.n	8008ffe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3310      	adds	r3, #16
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fc87 	bl	80098f0 <xTaskRemoveFromEventList>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fe8:	f000 fd60 	bl	8009aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dce9      	bgt.n	8008fd0 <prvUnlockQueue+0x60>
 8008ffc:	e000      	b.n	8009000 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ffe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	22ff      	movs	r2, #255	@ 0xff
 8009004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009008:	f001 f9c0 	bl	800a38c <vPortExitCritical>
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800901c:	f001 f984 	bl	800a328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	d102      	bne.n	800902e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009028:	2301      	movs	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	e001      	b.n	8009032 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009032:	f001 f9ab 	bl	800a38c <vPortExitCritical>

	return xReturn;
 8009036:	68fb      	ldr	r3, [r7, #12]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009048:	f001 f96e 	bl	800a328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009054:	429a      	cmp	r2, r3
 8009056:	d102      	bne.n	800905e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009058:	2301      	movs	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e001      	b.n	8009062 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009062:	f001 f993 	bl	800a38c <vPortExitCritical>

	return xReturn;
 8009066:	68fb      	ldr	r3, [r7, #12]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08e      	sub	sp, #56	@ 0x38
 8009074:	af04      	add	r7, sp, #16
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10b      	bne.n	800909c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	623b      	str	r3, [r7, #32]
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	e7fd      	b.n	8009098 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	61fb      	str	r3, [r7, #28]
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	e7fd      	b.n	80090b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090ba:	23a0      	movs	r3, #160	@ 0xa0
 80090bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80090c2:	d00b      	beq.n	80090dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	61bb      	str	r3, [r7, #24]
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	e7fd      	b.n	80090d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01e      	beq.n	8009122 <xTaskCreateStatic+0xb2>
 80090e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01b      	beq.n	8009122 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090fc:	2300      	movs	r3, #0
 80090fe:	9303      	str	r3, [sp, #12]
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f851 	bl	80091bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800911a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800911c:	f000 f8ee 	bl	80092fc <prvAddNewTaskToReadyList>
 8009120:	e001      	b.n	8009126 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009126:	697b      	ldr	r3, [r7, #20]
	}
 8009128:	4618      	mov	r0, r3
 800912a:	3728      	adds	r7, #40	@ 0x28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	@ 0x30
 8009134:	af04      	add	r7, sp, #16
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fa11 	bl	800a56c <pvPortMalloc>
 800914a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00e      	beq.n	8009170 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009152:	20a0      	movs	r0, #160	@ 0xa0
 8009154:	f001 fa0a 	bl	800a56c <pvPortMalloc>
 8009158:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	631a      	str	r2, [r3, #48]	@ 0x30
 8009166:	e005      	b.n	8009174 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009168:	6978      	ldr	r0, [r7, #20]
 800916a:	f001 facd 	bl	800a708 <vPortFree>
 800916e:	e001      	b.n	8009174 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d017      	beq.n	80091aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	2300      	movs	r3, #0
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	9302      	str	r3, [sp, #8]
 800918c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f80f 	bl	80091bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800919e:	69f8      	ldr	r0, [r7, #28]
 80091a0:	f000 f8ac 	bl	80092fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091a4:	2301      	movs	r3, #1
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	e002      	b.n	80091b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295
 80091ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091b0:	69bb      	ldr	r3, [r7, #24]
	}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80091d4:	3b01      	subs	r3, #1
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	f023 0307 	bic.w	r3, r3, #7
 80091e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00b      	beq.n	8009206 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	617b      	str	r3, [r7, #20]
}
 8009200:	bf00      	nop
 8009202:	bf00      	nop
 8009204:	e7fd      	b.n	8009202 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01f      	beq.n	800924c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	e012      	b.n	8009238 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4413      	add	r3, r2
 8009218:	7819      	ldrb	r1, [r3, #0]
 800921a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	3334      	adds	r3, #52	@ 0x34
 8009222:	460a      	mov	r2, r1
 8009224:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	3301      	adds	r3, #1
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2b0f      	cmp	r3, #15
 800923c:	d9e9      	bls.n	8009212 <prvInitialiseNewTask+0x56>
 800923e:	e000      	b.n	8009242 <prvInitialiseNewTask+0x86>
			{
				break;
 8009240:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800924a:	e003      	b.n	8009254 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800924c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	2b06      	cmp	r3, #6
 8009258:	d901      	bls.n	800925e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800925a:	2306      	movs	r3, #6
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009262:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009268:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	2200      	movs	r2, #0
 800926e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	3304      	adds	r3, #4
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff f88d 	bl	8008394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927c:	3318      	adds	r3, #24
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff f888 	bl	8008394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009288:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	f1c3 0207 	rsb	r2, r3, #7
 8009290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009292:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009298:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	2200      	movs	r2, #0
 800929e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	334c      	adds	r3, #76	@ 0x4c
 80092ae:	224c      	movs	r2, #76	@ 0x4c
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 fb48 	bl	800a948 <memset>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	4a0d      	ldr	r2, [pc, #52]	@ (80092f0 <prvInitialiseNewTask+0x134>)
 80092bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <prvInitialiseNewTask+0x138>)
 80092c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	4a0c      	ldr	r2, [pc, #48]	@ (80092f8 <prvInitialiseNewTask+0x13c>)
 80092c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	68f9      	ldr	r1, [r7, #12]
 80092ce:	69b8      	ldr	r0, [r7, #24]
 80092d0:	f000 fefa 	bl	800a0c8 <pxPortInitialiseStack>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092e6:	bf00      	nop
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	2000d8b4 	.word	0x2000d8b4
 80092f4:	2000d91c 	.word	0x2000d91c
 80092f8:	2000d984 	.word	0x2000d984

080092fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009304:	f001 f810 	bl	800a328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009308:	4b2a      	ldr	r3, [pc, #168]	@ (80093b4 <prvAddNewTaskToReadyList+0xb8>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	4a29      	ldr	r2, [pc, #164]	@ (80093b4 <prvAddNewTaskToReadyList+0xb8>)
 8009310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009312:	4b29      	ldr	r3, [pc, #164]	@ (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800931a:	4a27      	ldr	r2, [pc, #156]	@ (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009320:	4b24      	ldr	r3, [pc, #144]	@ (80093b4 <prvAddNewTaskToReadyList+0xb8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d110      	bne.n	800934a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009328:	f000 fbe4 	bl	8009af4 <prvInitialiseTaskLists>
 800932c:	e00d      	b.n	800934a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800932e:	4b23      	ldr	r3, [pc, #140]	@ (80093bc <prvAddNewTaskToReadyList+0xc0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009336:	4b20      	ldr	r3, [pc, #128]	@ (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009340:	429a      	cmp	r2, r3
 8009342:	d802      	bhi.n	800934a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009344:	4a1c      	ldr	r2, [pc, #112]	@ (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800934a:	4b1d      	ldr	r3, [pc, #116]	@ (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	4a1b      	ldr	r2, [pc, #108]	@ (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 8009352:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009358:	2201      	movs	r2, #1
 800935a:	409a      	lsls	r2, r3
 800935c:	4b19      	ldr	r3, [pc, #100]	@ (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4313      	orrs	r3, r2
 8009362:	4a18      	ldr	r2, [pc, #96]	@ (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4a15      	ldr	r2, [pc, #84]	@ (80093c8 <prvAddNewTaskToReadyList+0xcc>)
 8009374:	441a      	add	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f7ff f816 	bl	80083ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009382:	f001 f803 	bl	800a38c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <prvAddNewTaskToReadyList+0xc0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800938e:	4b0a      	ldr	r3, [pc, #40]	@ (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d207      	bcs.n	80093ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800939c:	4b0b      	ldr	r3, [pc, #44]	@ (80093cc <prvAddNewTaskToReadyList+0xd0>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20009c60 	.word	0x20009c60
 80093b8:	20009b60 	.word	0x20009b60
 80093bc:	20009c6c 	.word	0x20009c6c
 80093c0:	20009c7c 	.word	0x20009c7c
 80093c4:	20009c68 	.word	0x20009c68
 80093c8:	20009b64 	.word	0x20009b64
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d018      	beq.n	8009414 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093e2:	4b14      	ldr	r3, [pc, #80]	@ (8009434 <vTaskDelay+0x64>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <vTaskDelay+0x32>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	60bb      	str	r3, [r7, #8]
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009402:	f000 f885 	bl	8009510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009406:	2100      	movs	r1, #0
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fdf7 	bl	8009ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800940e:	f000 f88d 	bl	800952c <xTaskResumeAll>
 8009412:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d107      	bne.n	800942a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800941a:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <vTaskDelay+0x68>)
 800941c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20009c88 	.word	0x20009c88
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08a      	sub	sp, #40	@ 0x28
 8009440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800944a:	463a      	mov	r2, r7
 800944c:	1d39      	adds	r1, r7, #4
 800944e:	f107 0308 	add.w	r3, r7, #8
 8009452:	4618      	mov	r0, r3
 8009454:	f7f7 fffc 	bl	8001450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	9202      	str	r2, [sp, #8]
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	2300      	movs	r3, #0
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	2300      	movs	r3, #0
 8009468:	460a      	mov	r2, r1
 800946a:	4921      	ldr	r1, [pc, #132]	@ (80094f0 <vTaskStartScheduler+0xb4>)
 800946c:	4821      	ldr	r0, [pc, #132]	@ (80094f4 <vTaskStartScheduler+0xb8>)
 800946e:	f7ff fdff 	bl	8009070 <xTaskCreateStatic>
 8009472:	4603      	mov	r3, r0
 8009474:	4a20      	ldr	r2, [pc, #128]	@ (80094f8 <vTaskStartScheduler+0xbc>)
 8009476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009478:	4b1f      	ldr	r3, [pc, #124]	@ (80094f8 <vTaskStartScheduler+0xbc>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	e001      	b.n	800948a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d11b      	bne.n	80094c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	613b      	str	r3, [r7, #16]
}
 80094a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094a4:	4b15      	ldr	r3, [pc, #84]	@ (80094fc <vTaskStartScheduler+0xc0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	334c      	adds	r3, #76	@ 0x4c
 80094aa:	4a15      	ldr	r2, [pc, #84]	@ (8009500 <vTaskStartScheduler+0xc4>)
 80094ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094ae:	4b15      	ldr	r3, [pc, #84]	@ (8009504 <vTaskStartScheduler+0xc8>)
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094b6:	4b14      	ldr	r3, [pc, #80]	@ (8009508 <vTaskStartScheduler+0xcc>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094bc:	4b13      	ldr	r3, [pc, #76]	@ (800950c <vTaskStartScheduler+0xd0>)
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094c2:	f000 fe8d 	bl	800a1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094c6:	e00f      	b.n	80094e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ce:	d10b      	bne.n	80094e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	60fb      	str	r3, [r7, #12]
}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <vTaskStartScheduler+0xa8>
}
 80094e8:	bf00      	nop
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	0800ae08 	.word	0x0800ae08
 80094f4:	08009ac5 	.word	0x08009ac5
 80094f8:	20009c84 	.word	0x20009c84
 80094fc:	20009b60 	.word	0x20009b60
 8009500:	20006590 	.word	0x20006590
 8009504:	20009c80 	.word	0x20009c80
 8009508:	20009c6c 	.word	0x20009c6c
 800950c:	20009c64 	.word	0x20009c64

08009510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009514:	4b04      	ldr	r3, [pc, #16]	@ (8009528 <vTaskSuspendAll+0x18>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	4a03      	ldr	r2, [pc, #12]	@ (8009528 <vTaskSuspendAll+0x18>)
 800951c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800951e:	bf00      	nop
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	20009c88 	.word	0x20009c88

0800952c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009536:	2300      	movs	r3, #0
 8009538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800953a:	4b42      	ldr	r3, [pc, #264]	@ (8009644 <xTaskResumeAll+0x118>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10b      	bne.n	800955a <xTaskResumeAll+0x2e>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	603b      	str	r3, [r7, #0]
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop
 8009558:	e7fd      	b.n	8009556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800955a:	f000 fee5 	bl	800a328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800955e:	4b39      	ldr	r3, [pc, #228]	@ (8009644 <xTaskResumeAll+0x118>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3b01      	subs	r3, #1
 8009564:	4a37      	ldr	r2, [pc, #220]	@ (8009644 <xTaskResumeAll+0x118>)
 8009566:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009568:	4b36      	ldr	r3, [pc, #216]	@ (8009644 <xTaskResumeAll+0x118>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d161      	bne.n	8009634 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009570:	4b35      	ldr	r3, [pc, #212]	@ (8009648 <xTaskResumeAll+0x11c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d05d      	beq.n	8009634 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009578:	e02e      	b.n	80095d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957a:	4b34      	ldr	r3, [pc, #208]	@ (800964c <xTaskResumeAll+0x120>)
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3318      	adds	r3, #24
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe ff6e 	bl	8008468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3304      	adds	r3, #4
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe ff69 	bl	8008468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	2201      	movs	r2, #1
 800959c:	409a      	lsls	r2, r3
 800959e:	4b2c      	ldr	r3, [pc, #176]	@ (8009650 <xTaskResumeAll+0x124>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009650 <xTaskResumeAll+0x124>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4a27      	ldr	r2, [pc, #156]	@ (8009654 <xTaskResumeAll+0x128>)
 80095b6:	441a      	add	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4619      	mov	r1, r3
 80095be:	4610      	mov	r0, r2
 80095c0:	f7fe fef5 	bl	80083ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c8:	4b23      	ldr	r3, [pc, #140]	@ (8009658 <xTaskResumeAll+0x12c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d302      	bcc.n	80095d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80095d2:	4b22      	ldr	r3, [pc, #136]	@ (800965c <xTaskResumeAll+0x130>)
 80095d4:	2201      	movs	r2, #1
 80095d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095d8:	4b1c      	ldr	r3, [pc, #112]	@ (800964c <xTaskResumeAll+0x120>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1cc      	bne.n	800957a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095e6:	f000 fb29 	bl	8009c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009660 <xTaskResumeAll+0x134>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d010      	beq.n	8009618 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095f6:	f000 f837 	bl	8009668 <xTaskIncrementTick>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009600:	4b16      	ldr	r3, [pc, #88]	@ (800965c <xTaskResumeAll+0x130>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3b01      	subs	r3, #1
 800960a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1f1      	bne.n	80095f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009612:	4b13      	ldr	r3, [pc, #76]	@ (8009660 <xTaskResumeAll+0x134>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009618:	4b10      	ldr	r3, [pc, #64]	@ (800965c <xTaskResumeAll+0x130>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009624:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <xTaskResumeAll+0x138>)
 8009626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009634:	f000 feaa 	bl	800a38c <vPortExitCritical>

	return xAlreadyYielded;
 8009638:	68bb      	ldr	r3, [r7, #8]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20009c88 	.word	0x20009c88
 8009648:	20009c60 	.word	0x20009c60
 800964c:	20009c20 	.word	0x20009c20
 8009650:	20009c68 	.word	0x20009c68
 8009654:	20009b64 	.word	0x20009b64
 8009658:	20009b60 	.word	0x20009b60
 800965c:	20009c74 	.word	0x20009c74
 8009660:	20009c70 	.word	0x20009c70
 8009664:	e000ed04 	.word	0xe000ed04

08009668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009672:	4b4f      	ldr	r3, [pc, #316]	@ (80097b0 <xTaskIncrementTick+0x148>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f040 808f 	bne.w	800979a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800967c:	4b4d      	ldr	r3, [pc, #308]	@ (80097b4 <xTaskIncrementTick+0x14c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3301      	adds	r3, #1
 8009682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009684:	4a4b      	ldr	r2, [pc, #300]	@ (80097b4 <xTaskIncrementTick+0x14c>)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d121      	bne.n	80096d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009690:	4b49      	ldr	r3, [pc, #292]	@ (80097b8 <xTaskIncrementTick+0x150>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00b      	beq.n	80096b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	603b      	str	r3, [r7, #0]
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	e7fd      	b.n	80096ae <xTaskIncrementTick+0x46>
 80096b2:	4b41      	ldr	r3, [pc, #260]	@ (80097b8 <xTaskIncrementTick+0x150>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	4b40      	ldr	r3, [pc, #256]	@ (80097bc <xTaskIncrementTick+0x154>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a3e      	ldr	r2, [pc, #248]	@ (80097b8 <xTaskIncrementTick+0x150>)
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	4a3e      	ldr	r2, [pc, #248]	@ (80097bc <xTaskIncrementTick+0x154>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	4b3e      	ldr	r3, [pc, #248]	@ (80097c0 <xTaskIncrementTick+0x158>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	4a3c      	ldr	r2, [pc, #240]	@ (80097c0 <xTaskIncrementTick+0x158>)
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	f000 fab4 	bl	8009c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096d4:	4b3b      	ldr	r3, [pc, #236]	@ (80097c4 <xTaskIncrementTick+0x15c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d348      	bcc.n	8009770 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096de:	4b36      	ldr	r3, [pc, #216]	@ (80097b8 <xTaskIncrementTick+0x150>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e8:	4b36      	ldr	r3, [pc, #216]	@ (80097c4 <xTaskIncrementTick+0x15c>)
 80096ea:	f04f 32ff 	mov.w	r2, #4294967295
 80096ee:	601a      	str	r2, [r3, #0]
					break;
 80096f0:	e03e      	b.n	8009770 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f2:	4b31      	ldr	r3, [pc, #196]	@ (80097b8 <xTaskIncrementTick+0x150>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d203      	bcs.n	8009712 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800970a:	4a2e      	ldr	r2, [pc, #184]	@ (80097c4 <xTaskIncrementTick+0x15c>)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009710:	e02e      	b.n	8009770 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3304      	adds	r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fea6 	bl	8008468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3318      	adds	r3, #24
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fe9d 	bl	8008468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009732:	2201      	movs	r2, #1
 8009734:	409a      	lsls	r2, r3
 8009736:	4b24      	ldr	r3, [pc, #144]	@ (80097c8 <xTaskIncrementTick+0x160>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4313      	orrs	r3, r2
 800973c:	4a22      	ldr	r2, [pc, #136]	@ (80097c8 <xTaskIncrementTick+0x160>)
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a1f      	ldr	r2, [pc, #124]	@ (80097cc <xTaskIncrementTick+0x164>)
 800974e:	441a      	add	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	3304      	adds	r3, #4
 8009754:	4619      	mov	r1, r3
 8009756:	4610      	mov	r0, r2
 8009758:	f7fe fe29 	bl	80083ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009760:	4b1b      	ldr	r3, [pc, #108]	@ (80097d0 <xTaskIncrementTick+0x168>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009766:	429a      	cmp	r2, r3
 8009768:	d3b9      	bcc.n	80096de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800976a:	2301      	movs	r3, #1
 800976c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800976e:	e7b6      	b.n	80096de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009770:	4b17      	ldr	r3, [pc, #92]	@ (80097d0 <xTaskIncrementTick+0x168>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009776:	4915      	ldr	r1, [pc, #84]	@ (80097cc <xTaskIncrementTick+0x164>)
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d901      	bls.n	800978c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800978c:	4b11      	ldr	r3, [pc, #68]	@ (80097d4 <xTaskIncrementTick+0x16c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d007      	beq.n	80097a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e004      	b.n	80097a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800979a:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <xTaskIncrementTick+0x170>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	4a0d      	ldr	r2, [pc, #52]	@ (80097d8 <xTaskIncrementTick+0x170>)
 80097a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097a4:	697b      	ldr	r3, [r7, #20]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20009c88 	.word	0x20009c88
 80097b4:	20009c64 	.word	0x20009c64
 80097b8:	20009c18 	.word	0x20009c18
 80097bc:	20009c1c 	.word	0x20009c1c
 80097c0:	20009c78 	.word	0x20009c78
 80097c4:	20009c80 	.word	0x20009c80
 80097c8:	20009c68 	.word	0x20009c68
 80097cc:	20009b64 	.word	0x20009b64
 80097d0:	20009b60 	.word	0x20009b60
 80097d4:	20009c74 	.word	0x20009c74
 80097d8:	20009c70 	.word	0x20009c70

080097dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097e2:	4b2a      	ldr	r3, [pc, #168]	@ (800988c <vTaskSwitchContext+0xb0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097ea:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <vTaskSwitchContext+0xb4>)
 80097ec:	2201      	movs	r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097f0:	e045      	b.n	800987e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80097f2:	4b27      	ldr	r3, [pc, #156]	@ (8009890 <vTaskSwitchContext+0xb4>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f8:	4b26      	ldr	r3, [pc, #152]	@ (8009894 <vTaskSwitchContext+0xb8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	fab3 f383 	clz	r3, r3
 8009804:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	f1c3 031f 	rsb	r3, r3, #31
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	4922      	ldr	r1, [pc, #136]	@ (8009898 <vTaskSwitchContext+0xbc>)
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	440b      	add	r3, r1
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	607b      	str	r3, [r7, #4]
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	e7fd      	b.n	8009836 <vTaskSwitchContext+0x5a>
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4a14      	ldr	r2, [pc, #80]	@ (8009898 <vTaskSwitchContext+0xbc>)
 8009846:	4413      	add	r3, r2
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	605a      	str	r2, [r3, #4]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3308      	adds	r3, #8
 800985c:	429a      	cmp	r2, r3
 800985e:	d104      	bne.n	800986a <vTaskSwitchContext+0x8e>
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	4a0a      	ldr	r2, [pc, #40]	@ (800989c <vTaskSwitchContext+0xc0>)
 8009872:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009874:	4b09      	ldr	r3, [pc, #36]	@ (800989c <vTaskSwitchContext+0xc0>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	334c      	adds	r3, #76	@ 0x4c
 800987a:	4a09      	ldr	r2, [pc, #36]	@ (80098a0 <vTaskSwitchContext+0xc4>)
 800987c:	6013      	str	r3, [r2, #0]
}
 800987e:	bf00      	nop
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20009c88 	.word	0x20009c88
 8009890:	20009c74 	.word	0x20009c74
 8009894:	20009c68 	.word	0x20009c68
 8009898:	20009b64 	.word	0x20009b64
 800989c:	20009b60 	.word	0x20009b60
 80098a0:	20006590 	.word	0x20006590

080098a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10b      	bne.n	80098cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60fb      	str	r3, [r7, #12]
}
 80098c6:	bf00      	nop
 80098c8:	bf00      	nop
 80098ca:	e7fd      	b.n	80098c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098cc:	4b07      	ldr	r3, [pc, #28]	@ (80098ec <vTaskPlaceOnEventList+0x48>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3318      	adds	r3, #24
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe fd8e 	bl	80083f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098da:	2101      	movs	r1, #1
 80098dc:	6838      	ldr	r0, [r7, #0]
 80098de:	f000 fb8d 	bl	8009ffc <prvAddCurrentTaskToDelayedList>
}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20009b60 	.word	0x20009b60

080098f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10b      	bne.n	800991e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	3318      	adds	r3, #24
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fda0 	bl	8008468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009928:	4b1d      	ldr	r3, [pc, #116]	@ (80099a0 <xTaskRemoveFromEventList+0xb0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d11c      	bne.n	800996a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fd97 	bl	8008468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	2201      	movs	r2, #1
 8009940:	409a      	lsls	r2, r3
 8009942:	4b18      	ldr	r3, [pc, #96]	@ (80099a4 <xTaskRemoveFromEventList+0xb4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4313      	orrs	r3, r2
 8009948:	4a16      	ldr	r2, [pc, #88]	@ (80099a4 <xTaskRemoveFromEventList+0xb4>)
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4a13      	ldr	r2, [pc, #76]	@ (80099a8 <xTaskRemoveFromEventList+0xb8>)
 800995a:	441a      	add	r2, r3
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	3304      	adds	r3, #4
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7fe fd23 	bl	80083ae <vListInsertEnd>
 8009968:	e005      	b.n	8009976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3318      	adds	r3, #24
 800996e:	4619      	mov	r1, r3
 8009970:	480e      	ldr	r0, [pc, #56]	@ (80099ac <xTaskRemoveFromEventList+0xbc>)
 8009972:	f7fe fd1c 	bl	80083ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997a:	4b0d      	ldr	r3, [pc, #52]	@ (80099b0 <xTaskRemoveFromEventList+0xc0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	429a      	cmp	r2, r3
 8009982:	d905      	bls.n	8009990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <xTaskRemoveFromEventList+0xc4>)
 800998a:	2201      	movs	r2, #1
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	e001      	b.n	8009994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009994:	697b      	ldr	r3, [r7, #20]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20009c88 	.word	0x20009c88
 80099a4:	20009c68 	.word	0x20009c68
 80099a8:	20009b64 	.word	0x20009b64
 80099ac:	20009c20 	.word	0x20009c20
 80099b0:	20009b60 	.word	0x20009b60
 80099b4:	20009c74 	.word	0x20009c74

080099b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099c0:	4b06      	ldr	r3, [pc, #24]	@ (80099dc <vTaskInternalSetTimeOutState+0x24>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099c8:	4b05      	ldr	r3, [pc, #20]	@ (80099e0 <vTaskInternalSetTimeOutState+0x28>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	605a      	str	r2, [r3, #4]
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20009c78 	.word	0x20009c78
 80099e0:	20009c64 	.word	0x20009c64

080099e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10b      	bne.n	8009a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	613b      	str	r3, [r7, #16]
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	e7fd      	b.n	8009a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10b      	bne.n	8009a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60fb      	str	r3, [r7, #12]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a2a:	f000 fc7d 	bl	800a328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa4 <xTaskCheckForTimeOut+0xc0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a46:	d102      	bne.n	8009a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61fb      	str	r3, [r7, #28]
 8009a4c:	e023      	b.n	8009a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4b15      	ldr	r3, [pc, #84]	@ (8009aa8 <xTaskCheckForTimeOut+0xc4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d007      	beq.n	8009a6a <xTaskCheckForTimeOut+0x86>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d302      	bcc.n	8009a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	61fb      	str	r3, [r7, #28]
 8009a68:	e015      	b.n	8009a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d20b      	bcs.n	8009a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	1ad2      	subs	r2, r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff ff99 	bl	80099b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	e004      	b.n	8009a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a92:	2301      	movs	r3, #1
 8009a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a96:	f000 fc79 	bl	800a38c <vPortExitCritical>

	return xReturn;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20009c64 	.word	0x20009c64
 8009aa8:	20009c78 	.word	0x20009c78

08009aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ab0:	4b03      	ldr	r3, [pc, #12]	@ (8009ac0 <vTaskMissedYield+0x14>)
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	20009c74 	.word	0x20009c74

08009ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009acc:	f000 f852 	bl	8009b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ad0:	4b06      	ldr	r3, [pc, #24]	@ (8009aec <prvIdleTask+0x28>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d9f9      	bls.n	8009acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ad8:	4b05      	ldr	r3, [pc, #20]	@ (8009af0 <prvIdleTask+0x2c>)
 8009ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ae8:	e7f0      	b.n	8009acc <prvIdleTask+0x8>
 8009aea:	bf00      	nop
 8009aec:	20009b64 	.word	0x20009b64
 8009af0:	e000ed04 	.word	0xe000ed04

08009af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009afa:	2300      	movs	r3, #0
 8009afc:	607b      	str	r3, [r7, #4]
 8009afe:	e00c      	b.n	8009b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4a12      	ldr	r2, [pc, #72]	@ (8009b54 <prvInitialiseTaskLists+0x60>)
 8009b0c:	4413      	add	r3, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe fc20 	bl	8008354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3301      	adds	r3, #1
 8009b18:	607b      	str	r3, [r7, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b06      	cmp	r3, #6
 8009b1e:	d9ef      	bls.n	8009b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b20:	480d      	ldr	r0, [pc, #52]	@ (8009b58 <prvInitialiseTaskLists+0x64>)
 8009b22:	f7fe fc17 	bl	8008354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b26:	480d      	ldr	r0, [pc, #52]	@ (8009b5c <prvInitialiseTaskLists+0x68>)
 8009b28:	f7fe fc14 	bl	8008354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b2c:	480c      	ldr	r0, [pc, #48]	@ (8009b60 <prvInitialiseTaskLists+0x6c>)
 8009b2e:	f7fe fc11 	bl	8008354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b32:	480c      	ldr	r0, [pc, #48]	@ (8009b64 <prvInitialiseTaskLists+0x70>)
 8009b34:	f7fe fc0e 	bl	8008354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b38:	480b      	ldr	r0, [pc, #44]	@ (8009b68 <prvInitialiseTaskLists+0x74>)
 8009b3a:	f7fe fc0b 	bl	8008354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b6c <prvInitialiseTaskLists+0x78>)
 8009b40:	4a05      	ldr	r2, [pc, #20]	@ (8009b58 <prvInitialiseTaskLists+0x64>)
 8009b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b44:	4b0a      	ldr	r3, [pc, #40]	@ (8009b70 <prvInitialiseTaskLists+0x7c>)
 8009b46:	4a05      	ldr	r2, [pc, #20]	@ (8009b5c <prvInitialiseTaskLists+0x68>)
 8009b48:	601a      	str	r2, [r3, #0]
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20009b64 	.word	0x20009b64
 8009b58:	20009bf0 	.word	0x20009bf0
 8009b5c:	20009c04 	.word	0x20009c04
 8009b60:	20009c20 	.word	0x20009c20
 8009b64:	20009c34 	.word	0x20009c34
 8009b68:	20009c4c 	.word	0x20009c4c
 8009b6c:	20009c18 	.word	0x20009c18
 8009b70:	20009c1c 	.word	0x20009c1c

08009b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b7a:	e019      	b.n	8009bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b7c:	f000 fbd4 	bl	800a328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b80:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <prvCheckTasksWaitingTermination+0x50>)
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe fc6b 	bl	8008468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b92:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <prvCheckTasksWaitingTermination+0x54>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	4a0b      	ldr	r2, [pc, #44]	@ (8009bc8 <prvCheckTasksWaitingTermination+0x54>)
 8009b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009bcc <prvCheckTasksWaitingTermination+0x58>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8009bcc <prvCheckTasksWaitingTermination+0x58>)
 8009ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ba6:	f000 fbf1 	bl	800a38c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f810 	bl	8009bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bb0:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <prvCheckTasksWaitingTermination+0x58>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e1      	bne.n	8009b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20009c34 	.word	0x20009c34
 8009bc8:	20009c60 	.word	0x20009c60
 8009bcc:	20009c48 	.word	0x20009c48

08009bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	334c      	adds	r3, #76	@ 0x4c
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 febb 	bl	800a958 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d108      	bne.n	8009bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fd89 	bl	800a708 <vPortFree>
				vPortFree( pxTCB );
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fd86 	bl	800a708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bfc:	e019      	b.n	8009c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d103      	bne.n	8009c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fd7d 	bl	800a708 <vPortFree>
	}
 8009c0e:	e010      	b.n	8009c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d00b      	beq.n	8009c32 <prvDeleteTCB+0x62>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	60fb      	str	r3, [r7, #12]
}
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	e7fd      	b.n	8009c2e <prvDeleteTCB+0x5e>
	}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c42:	4b0c      	ldr	r3, [pc, #48]	@ (8009c74 <prvResetNextTaskUnblockTime+0x38>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d104      	bne.n	8009c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c78 <prvResetNextTaskUnblockTime+0x3c>)
 8009c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c54:	e008      	b.n	8009c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c56:	4b07      	ldr	r3, [pc, #28]	@ (8009c74 <prvResetNextTaskUnblockTime+0x38>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	4a04      	ldr	r2, [pc, #16]	@ (8009c78 <prvResetNextTaskUnblockTime+0x3c>)
 8009c66:	6013      	str	r3, [r2, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	20009c18 	.word	0x20009c18
 8009c78:	20009c80 	.word	0x20009c80

08009c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c82:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb0 <xTaskGetSchedulerState+0x34>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	e008      	b.n	8009ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c90:	4b08      	ldr	r3, [pc, #32]	@ (8009cb4 <xTaskGetSchedulerState+0x38>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	607b      	str	r3, [r7, #4]
 8009c9c:	e001      	b.n	8009ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ca2:	687b      	ldr	r3, [r7, #4]
	}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20009c6c 	.word	0x20009c6c
 8009cb4:	20009c88 	.word	0x20009c88

08009cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d05e      	beq.n	8009d8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cd2:	4b31      	ldr	r3, [pc, #196]	@ (8009d98 <xTaskPriorityInherit+0xe0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d24e      	bcs.n	8009d7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db06      	blt.n	8009cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8009d98 <xTaskPriorityInherit+0xe0>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cea:	f1c3 0207 	rsb	r2, r3, #7
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6959      	ldr	r1, [r3, #20]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4a26      	ldr	r2, [pc, #152]	@ (8009d9c <xTaskPriorityInherit+0xe4>)
 8009d04:	4413      	add	r3, r2
 8009d06:	4299      	cmp	r1, r3
 8009d08:	d12f      	bne.n	8009d6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fbaa 	bl	8008468 <uxListRemove>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1e:	2201      	movs	r2, #1
 8009d20:	fa02 f303 	lsl.w	r3, r2, r3
 8009d24:	43da      	mvns	r2, r3
 8009d26:	4b1e      	ldr	r3, [pc, #120]	@ (8009da0 <xTaskPriorityInherit+0xe8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009da0 <xTaskPriorityInherit+0xe8>)
 8009d2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d30:	4b19      	ldr	r3, [pc, #100]	@ (8009d98 <xTaskPriorityInherit+0xe0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3e:	2201      	movs	r2, #1
 8009d40:	409a      	lsls	r2, r3
 8009d42:	4b17      	ldr	r3, [pc, #92]	@ (8009da0 <xTaskPriorityInherit+0xe8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	4a15      	ldr	r2, [pc, #84]	@ (8009da0 <xTaskPriorityInherit+0xe8>)
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4a10      	ldr	r2, [pc, #64]	@ (8009d9c <xTaskPriorityInherit+0xe4>)
 8009d5a:	441a      	add	r2, r3
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4619      	mov	r1, r3
 8009d62:	4610      	mov	r0, r2
 8009d64:	f7fe fb23 	bl	80083ae <vListInsertEnd>
 8009d68:	e004      	b.n	8009d74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d98 <xTaskPriorityInherit+0xe0>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e008      	b.n	8009d8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d7e:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <xTaskPriorityInherit+0xe0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d201      	bcs.n	8009d8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20009b60 	.word	0x20009b60
 8009d9c:	20009b64 	.word	0x20009b64
 8009da0:	20009c68 	.word	0x20009c68

08009da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d070      	beq.n	8009e9c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dba:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea8 <xTaskPriorityDisinherit+0x104>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d00b      	beq.n	8009ddc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60fb      	str	r3, [r7, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	bf00      	nop
 8009dda:	e7fd      	b.n	8009dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10b      	bne.n	8009dfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60bb      	str	r3, [r7, #8]
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	e7fd      	b.n	8009df8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e00:	1e5a      	subs	r2, r3, #1
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d044      	beq.n	8009e9c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d140      	bne.n	8009e9c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fb22 	bl	8008468 <uxListRemove>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d115      	bne.n	8009e56 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2e:	491f      	ldr	r1, [pc, #124]	@ (8009eac <xTaskPriorityDisinherit+0x108>)
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	440b      	add	r3, r1
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <xTaskPriorityDisinherit+0xb2>
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e44:	2201      	movs	r2, #1
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	43da      	mvns	r2, r3
 8009e4c:	4b18      	ldr	r3, [pc, #96]	@ (8009eb0 <xTaskPriorityDisinherit+0x10c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4013      	ands	r3, r2
 8009e52:	4a17      	ldr	r2, [pc, #92]	@ (8009eb0 <xTaskPriorityDisinherit+0x10c>)
 8009e54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	f1c3 0207 	rsb	r2, r3, #7
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	2201      	movs	r2, #1
 8009e70:	409a      	lsls	r2, r3
 8009e72:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb0 <xTaskPriorityDisinherit+0x10c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	4a0d      	ldr	r2, [pc, #52]	@ (8009eb0 <xTaskPriorityDisinherit+0x10c>)
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4a08      	ldr	r2, [pc, #32]	@ (8009eac <xTaskPriorityDisinherit+0x108>)
 8009e8a:	441a      	add	r2, r3
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7fe fa8b 	bl	80083ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e9c:	697b      	ldr	r3, [r7, #20]
	}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20009b60 	.word	0x20009b60
 8009eac:	20009b64 	.word	0x20009b64
 8009eb0:	20009c68 	.word	0x20009c68

08009eb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d079      	beq.n	8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10b      	bne.n	8009eec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60fb      	str	r3, [r7, #12]
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	e7fd      	b.n	8009ee8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d902      	bls.n	8009efc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	e002      	b.n	8009f02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d059      	beq.n	8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d154      	bne.n	8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f16:	4b2c      	ldr	r3, [pc, #176]	@ (8009fc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d10b      	bne.n	8009f38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60bb      	str	r3, [r7, #8]
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	e7fd      	b.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	69fa      	ldr	r2, [r7, #28]
 8009f42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	db04      	blt.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f1c3 0207 	rsb	r2, r3, #7
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	6959      	ldr	r1, [r3, #20]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4a19      	ldr	r2, [pc, #100]	@ (8009fcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009f66:	4413      	add	r3, r2
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	d129      	bne.n	8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fa79 	bl	8008468 <uxListRemove>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f80:	2201      	movs	r2, #1
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43da      	mvns	r2, r3
 8009f88:	4b11      	ldr	r3, [pc, #68]	@ (8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	4a10      	ldr	r2, [pc, #64]	@ (8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	2201      	movs	r2, #1
 8009f98:	409a      	lsls	r2, r3
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa8:	4613      	mov	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4a06      	ldr	r2, [pc, #24]	@ (8009fcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fb2:	441a      	add	r2, r3
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f7fe f9f7 	bl	80083ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fc0:	bf00      	nop
 8009fc2:	3720      	adds	r7, #32
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20009b60 	.word	0x20009b60
 8009fcc:	20009b64 	.word	0x20009b64
 8009fd0:	20009c68 	.word	0x20009c68

08009fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009fd4:	b480      	push	{r7}
 8009fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fd8:	4b07      	ldr	r3, [pc, #28]	@ (8009ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fe0:	4b05      	ldr	r3, [pc, #20]	@ (8009ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fe6:	3201      	adds	r2, #1
 8009fe8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009fea:	4b03      	ldr	r3, [pc, #12]	@ (8009ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fec:	681b      	ldr	r3, [r3, #0]
	}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20009b60 	.word	0x20009b60

08009ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a006:	4b29      	ldr	r3, [pc, #164]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a00c:	4b28      	ldr	r3, [pc, #160]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3304      	adds	r3, #4
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fa28 	bl	8008468 <uxListRemove>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10b      	bne.n	800a036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a01e:	4b24      	ldr	r3, [pc, #144]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a024:	2201      	movs	r2, #1
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	43da      	mvns	r2, r3
 800a02c:	4b21      	ldr	r3, [pc, #132]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4013      	ands	r3, r2
 800a032:	4a20      	ldr	r2, [pc, #128]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03c:	d10a      	bne.n	800a054 <prvAddCurrentTaskToDelayedList+0x58>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a044:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3304      	adds	r3, #4
 800a04a:	4619      	mov	r1, r3
 800a04c:	481a      	ldr	r0, [pc, #104]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a04e:	f7fe f9ae 	bl	80083ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a052:	e026      	b.n	800a0a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4413      	add	r3, r2
 800a05a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a05c:	4b14      	ldr	r3, [pc, #80]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d209      	bcs.n	800a080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a06c:	4b13      	ldr	r3, [pc, #76]	@ (800a0bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fe f9bc 	bl	80083f6 <vListInsert>
}
 800a07e:	e010      	b.n	800a0a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a080:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3304      	adds	r3, #4
 800a08a:	4619      	mov	r1, r3
 800a08c:	4610      	mov	r0, r2
 800a08e:	f7fe f9b2 	bl	80083f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a092:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d202      	bcs.n	800a0a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a09c:	4a09      	ldr	r2, [pc, #36]	@ (800a0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	6013      	str	r3, [r2, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20009c64 	.word	0x20009c64
 800a0b0:	20009b60 	.word	0x20009b60
 800a0b4:	20009c68 	.word	0x20009c68
 800a0b8:	20009c4c 	.word	0x20009c4c
 800a0bc:	20009c1c 	.word	0x20009c1c
 800a0c0:	20009c18 	.word	0x20009c18
 800a0c4:	20009c80 	.word	0x20009c80

0800a0c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3b04      	subs	r3, #4
 800a0d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3b04      	subs	r3, #4
 800a0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f023 0201 	bic.w	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b04      	subs	r3, #4
 800a0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a12c <pxPortInitialiseStack+0x64>)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b14      	subs	r3, #20
 800a102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3b04      	subs	r3, #4
 800a10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f06f 0202 	mvn.w	r2, #2
 800a116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3b20      	subs	r3, #32
 800a11c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a11e:	68fb      	ldr	r3, [r7, #12]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	0800a131 	.word	0x0800a131

0800a130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a13a:	4b13      	ldr	r3, [pc, #76]	@ (800a188 <prvTaskExitError+0x58>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d00b      	beq.n	800a15c <prvTaskExitError+0x2c>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60fb      	str	r3, [r7, #12]
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	e7fd      	b.n	800a158 <prvTaskExitError+0x28>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	60bb      	str	r3, [r7, #8]
}
 800a16e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a170:	bf00      	nop
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0fc      	beq.n	800a172 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	2000658c 	.word	0x2000658c
 800a18c:	00000000 	.word	0x00000000

0800a190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a190:	4b07      	ldr	r3, [pc, #28]	@ (800a1b0 <pxCurrentTCBConst2>)
 800a192:	6819      	ldr	r1, [r3, #0]
 800a194:	6808      	ldr	r0, [r1, #0]
 800a196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	f380 8809 	msr	PSP, r0
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8811 	msr	BASEPRI, r0
 800a1aa:	4770      	bx	lr
 800a1ac:	f3af 8000 	nop.w

0800a1b0 <pxCurrentTCBConst2>:
 800a1b0:	20009b60 	.word	0x20009b60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop

0800a1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1b8:	4808      	ldr	r0, [pc, #32]	@ (800a1dc <prvPortStartFirstTask+0x24>)
 800a1ba:	6800      	ldr	r0, [r0, #0]
 800a1bc:	6800      	ldr	r0, [r0, #0]
 800a1be:	f380 8808 	msr	MSP, r0
 800a1c2:	f04f 0000 	mov.w	r0, #0
 800a1c6:	f380 8814 	msr	CONTROL, r0
 800a1ca:	b662      	cpsie	i
 800a1cc:	b661      	cpsie	f
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	df00      	svc	0
 800a1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1da:	bf00      	nop
 800a1dc:	e000ed08 	.word	0xe000ed08

0800a1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1e6:	4b47      	ldr	r3, [pc, #284]	@ (800a304 <xPortStartScheduler+0x124>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a47      	ldr	r2, [pc, #284]	@ (800a308 <xPortStartScheduler+0x128>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10b      	bne.n	800a208 <xPortStartScheduler+0x28>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
}
 800a202:	bf00      	nop
 800a204:	bf00      	nop
 800a206:	e7fd      	b.n	800a204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a208:	4b3e      	ldr	r3, [pc, #248]	@ (800a304 <xPortStartScheduler+0x124>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a3f      	ldr	r2, [pc, #252]	@ (800a30c <xPortStartScheduler+0x12c>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d10b      	bne.n	800a22a <xPortStartScheduler+0x4a>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	60fb      	str	r3, [r7, #12]
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	e7fd      	b.n	800a226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a22a:	4b39      	ldr	r3, [pc, #228]	@ (800a310 <xPortStartScheduler+0x130>)
 800a22c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	22ff      	movs	r2, #255	@ 0xff
 800a23a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	b2db      	uxtb	r3, r3
 800a248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	4b31      	ldr	r3, [pc, #196]	@ (800a314 <xPortStartScheduler+0x134>)
 800a250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a252:	4b31      	ldr	r3, [pc, #196]	@ (800a318 <xPortStartScheduler+0x138>)
 800a254:	2207      	movs	r2, #7
 800a256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a258:	e009      	b.n	800a26e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a25a:	4b2f      	ldr	r3, [pc, #188]	@ (800a318 <xPortStartScheduler+0x138>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3b01      	subs	r3, #1
 800a260:	4a2d      	ldr	r2, [pc, #180]	@ (800a318 <xPortStartScheduler+0x138>)
 800a262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a276:	2b80      	cmp	r3, #128	@ 0x80
 800a278:	d0ef      	beq.n	800a25a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a27a:	4b27      	ldr	r3, [pc, #156]	@ (800a318 <xPortStartScheduler+0x138>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f1c3 0307 	rsb	r3, r3, #7
 800a282:	2b04      	cmp	r3, #4
 800a284:	d00b      	beq.n	800a29e <xPortStartScheduler+0xbe>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	60bb      	str	r3, [r7, #8]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a29e:	4b1e      	ldr	r3, [pc, #120]	@ (800a318 <xPortStartScheduler+0x138>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <xPortStartScheduler+0x138>)
 800a2a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a318 <xPortStartScheduler+0x138>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2b0:	4a19      	ldr	r2, [pc, #100]	@ (800a318 <xPortStartScheduler+0x138>)
 800a2b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2bc:	4b17      	ldr	r3, [pc, #92]	@ (800a31c <xPortStartScheduler+0x13c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a16      	ldr	r2, [pc, #88]	@ (800a31c <xPortStartScheduler+0x13c>)
 800a2c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2c8:	4b14      	ldr	r3, [pc, #80]	@ (800a31c <xPortStartScheduler+0x13c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a13      	ldr	r2, [pc, #76]	@ (800a31c <xPortStartScheduler+0x13c>)
 800a2ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2d4:	f000 f8da 	bl	800a48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2d8:	4b11      	ldr	r3, [pc, #68]	@ (800a320 <xPortStartScheduler+0x140>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2de:	f000 f8f9 	bl	800a4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2e2:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <xPortStartScheduler+0x144>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a324 <xPortStartScheduler+0x144>)
 800a2e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a2ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2ee:	f7ff ff63 	bl	800a1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2f2:	f7ff fa73 	bl	80097dc <vTaskSwitchContext>
	prvTaskExitError();
 800a2f6:	f7ff ff1b 	bl	800a130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	e000ed00 	.word	0xe000ed00
 800a308:	410fc271 	.word	0x410fc271
 800a30c:	410fc270 	.word	0x410fc270
 800a310:	e000e400 	.word	0xe000e400
 800a314:	20009c8c 	.word	0x20009c8c
 800a318:	20009c90 	.word	0x20009c90
 800a31c:	e000ed20 	.word	0xe000ed20
 800a320:	2000658c 	.word	0x2000658c
 800a324:	e000ef34 	.word	0xe000ef34

0800a328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a342:	4b10      	ldr	r3, [pc, #64]	@ (800a384 <vPortEnterCritical+0x5c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	4a0e      	ldr	r2, [pc, #56]	@ (800a384 <vPortEnterCritical+0x5c>)
 800a34a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a34c:	4b0d      	ldr	r3, [pc, #52]	@ (800a384 <vPortEnterCritical+0x5c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d110      	bne.n	800a376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a354:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <vPortEnterCritical+0x60>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00b      	beq.n	800a376 <vPortEnterCritical+0x4e>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	603b      	str	r3, [r7, #0]
}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	e7fd      	b.n	800a372 <vPortEnterCritical+0x4a>
	}
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	2000658c 	.word	0x2000658c
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a392:	4b12      	ldr	r3, [pc, #72]	@ (800a3dc <vPortExitCritical+0x50>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <vPortExitCritical+0x26>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	607b      	str	r3, [r7, #4]
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	e7fd      	b.n	800a3ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3dc <vPortExitCritical+0x50>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	4a08      	ldr	r2, [pc, #32]	@ (800a3dc <vPortExitCritical+0x50>)
 800a3ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3bc:	4b07      	ldr	r3, [pc, #28]	@ (800a3dc <vPortExitCritical+0x50>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d105      	bne.n	800a3d0 <vPortExitCritical+0x44>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	f383 8811 	msr	BASEPRI, r3
}
 800a3ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	2000658c 	.word	0x2000658c

0800a3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3e0:	f3ef 8009 	mrs	r0, PSP
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	4b15      	ldr	r3, [pc, #84]	@ (800a440 <pxCurrentTCBConst>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	f01e 0f10 	tst.w	lr, #16
 800a3f0:	bf08      	it	eq
 800a3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fa:	6010      	str	r0, [r2, #0]
 800a3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a404:	f380 8811 	msr	BASEPRI, r0
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f7ff f9e4 	bl	80097dc <vTaskSwitchContext>
 800a414:	f04f 0000 	mov.w	r0, #0
 800a418:	f380 8811 	msr	BASEPRI, r0
 800a41c:	bc09      	pop	{r0, r3}
 800a41e:	6819      	ldr	r1, [r3, #0]
 800a420:	6808      	ldr	r0, [r1, #0]
 800a422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a426:	f01e 0f10 	tst.w	lr, #16
 800a42a:	bf08      	it	eq
 800a42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a430:	f380 8809 	msr	PSP, r0
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w

0800a440 <pxCurrentTCBConst>:
 800a440:	20009b60 	.word	0x20009b60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop

0800a448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a462:	f7ff f901 	bl	8009668 <xTaskIncrementTick>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a46c:	4b06      	ldr	r3, [pc, #24]	@ (800a488 <SysTick_Handler+0x40>)
 800a46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f383 8811 	msr	BASEPRI, r3
}
 800a47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a490:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c0 <vPortSetupTimerInterrupt+0x34>)
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a496:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c4 <vPortSetupTimerInterrupt+0x38>)
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a49c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <vPortSetupTimerInterrupt+0x3c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a4cc <vPortSetupTimerInterrupt+0x40>)
 800a4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a6:	099b      	lsrs	r3, r3, #6
 800a4a8:	4a09      	ldr	r2, [pc, #36]	@ (800a4d0 <vPortSetupTimerInterrupt+0x44>)
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ae:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <vPortSetupTimerInterrupt+0x34>)
 800a4b0:	2207      	movs	r2, #7
 800a4b2:	601a      	str	r2, [r3, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	e000e010 	.word	0xe000e010
 800a4c4:	e000e018 	.word	0xe000e018
 800a4c8:	20000000 	.word	0x20000000
 800a4cc:	10624dd3 	.word	0x10624dd3
 800a4d0:	e000e014 	.word	0xe000e014

0800a4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4e4 <vPortEnableVFP+0x10>
 800a4d8:	6801      	ldr	r1, [r0, #0]
 800a4da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4de:	6001      	str	r1, [r0, #0]
 800a4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4e2:	bf00      	nop
 800a4e4:	e000ed88 	.word	0xe000ed88

0800a4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4ee:	f3ef 8305 	mrs	r3, IPSR
 800a4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b0f      	cmp	r3, #15
 800a4f8:	d915      	bls.n	800a526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4fa:	4a18      	ldr	r2, [pc, #96]	@ (800a55c <vPortValidateInterruptPriority+0x74>)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a504:	4b16      	ldr	r3, [pc, #88]	@ (800a560 <vPortValidateInterruptPriority+0x78>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	7afa      	ldrb	r2, [r7, #11]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d20b      	bcs.n	800a526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	607b      	str	r3, [r7, #4]
}
 800a520:	bf00      	nop
 800a522:	bf00      	nop
 800a524:	e7fd      	b.n	800a522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a526:	4b0f      	ldr	r3, [pc, #60]	@ (800a564 <vPortValidateInterruptPriority+0x7c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a52e:	4b0e      	ldr	r3, [pc, #56]	@ (800a568 <vPortValidateInterruptPriority+0x80>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	429a      	cmp	r2, r3
 800a534:	d90b      	bls.n	800a54e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	603b      	str	r3, [r7, #0]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <vPortValidateInterruptPriority+0x62>
	}
 800a54e:	bf00      	nop
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	e000e3f0 	.word	0xe000e3f0
 800a560:	20009c8c 	.word	0x20009c8c
 800a564:	e000ed0c 	.word	0xe000ed0c
 800a568:	20009c90 	.word	0x20009c90

0800a56c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08a      	sub	sp, #40	@ 0x28
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a578:	f7fe ffca 	bl	8009510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a57c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6f0 <pvPortMalloc+0x184>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a584:	f000 f924 	bl	800a7d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a588:	4b5a      	ldr	r3, [pc, #360]	@ (800a6f4 <pvPortMalloc+0x188>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4013      	ands	r3, r2
 800a590:	2b00      	cmp	r3, #0
 800a592:	f040 8095 	bne.w	800a6c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01e      	beq.n	800a5da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a59c:	2208      	movs	r2, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d015      	beq.n	800a5da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f023 0307 	bic.w	r3, r3, #7
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <pvPortMalloc+0x6e>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	617b      	str	r3, [r7, #20]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d06f      	beq.n	800a6c0 <pvPortMalloc+0x154>
 800a5e0:	4b45      	ldr	r3, [pc, #276]	@ (800a6f8 <pvPortMalloc+0x18c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d86a      	bhi.n	800a6c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5ea:	4b44      	ldr	r3, [pc, #272]	@ (800a6fc <pvPortMalloc+0x190>)
 800a5ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5ee:	4b43      	ldr	r3, [pc, #268]	@ (800a6fc <pvPortMalloc+0x190>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5f4:	e004      	b.n	800a600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	429a      	cmp	r2, r3
 800a608:	d903      	bls.n	800a612 <pvPortMalloc+0xa6>
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f1      	bne.n	800a5f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a612:	4b37      	ldr	r3, [pc, #220]	@ (800a6f0 <pvPortMalloc+0x184>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a618:	429a      	cmp	r2, r3
 800a61a:	d051      	beq.n	800a6c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2208      	movs	r2, #8
 800a622:	4413      	add	r3, r2
 800a624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	1ad2      	subs	r2, r2, r3
 800a636:	2308      	movs	r3, #8
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d920      	bls.n	800a680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a63e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4413      	add	r3, r2
 800a644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00b      	beq.n	800a668 <pvPortMalloc+0xfc>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	613b      	str	r3, [r7, #16]
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a67a:	69b8      	ldr	r0, [r7, #24]
 800a67c:	f000 f90a 	bl	800a894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a680:	4b1d      	ldr	r3, [pc, #116]	@ (800a6f8 <pvPortMalloc+0x18c>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f8 <pvPortMalloc+0x18c>)
 800a68c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a68e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6f8 <pvPortMalloc+0x18c>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4b1b      	ldr	r3, [pc, #108]	@ (800a700 <pvPortMalloc+0x194>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	429a      	cmp	r2, r3
 800a698:	d203      	bcs.n	800a6a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a69a:	4b17      	ldr	r3, [pc, #92]	@ (800a6f8 <pvPortMalloc+0x18c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a18      	ldr	r2, [pc, #96]	@ (800a700 <pvPortMalloc+0x194>)
 800a6a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	4b13      	ldr	r3, [pc, #76]	@ (800a6f4 <pvPortMalloc+0x188>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6b6:	4b13      	ldr	r3, [pc, #76]	@ (800a704 <pvPortMalloc+0x198>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	4a11      	ldr	r2, [pc, #68]	@ (800a704 <pvPortMalloc+0x198>)
 800a6be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6c0:	f7fe ff34 	bl	800952c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	60fb      	str	r3, [r7, #12]
}
 800a6e0:	bf00      	nop
 800a6e2:	bf00      	nop
 800a6e4:	e7fd      	b.n	800a6e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3728      	adds	r7, #40	@ 0x28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	2000d89c 	.word	0x2000d89c
 800a6f4:	2000d8b0 	.word	0x2000d8b0
 800a6f8:	2000d8a0 	.word	0x2000d8a0
 800a6fc:	2000d894 	.word	0x2000d894
 800a700:	2000d8a4 	.word	0x2000d8a4
 800a704:	2000d8a8 	.word	0x2000d8a8

0800a708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d04f      	beq.n	800a7ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a71a:	2308      	movs	r3, #8
 800a71c:	425b      	negs	r3, r3
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	4413      	add	r3, r2
 800a722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	4b25      	ldr	r3, [pc, #148]	@ (800a7c4 <vPortFree+0xbc>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4013      	ands	r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10b      	bne.n	800a74e <vPortFree+0x46>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60fb      	str	r3, [r7, #12]
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00b      	beq.n	800a76e <vPortFree+0x66>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	60bb      	str	r3, [r7, #8]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	4b14      	ldr	r3, [pc, #80]	@ (800a7c4 <vPortFree+0xbc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4013      	ands	r3, r2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01e      	beq.n	800a7ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d11a      	bne.n	800a7ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c4 <vPortFree+0xbc>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	43db      	mvns	r3, r3
 800a78e:	401a      	ands	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a794:	f7fe febc 	bl	8009510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <vPortFree+0xc0>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	4a09      	ldr	r2, [pc, #36]	@ (800a7c8 <vPortFree+0xc0>)
 800a7a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7a6:	6938      	ldr	r0, [r7, #16]
 800a7a8:	f000 f874 	bl	800a894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7ac:	4b07      	ldr	r3, [pc, #28]	@ (800a7cc <vPortFree+0xc4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	4a06      	ldr	r2, [pc, #24]	@ (800a7cc <vPortFree+0xc4>)
 800a7b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7b6:	f7fe feb9 	bl	800952c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7ba:	bf00      	nop
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	2000d8b0 	.word	0x2000d8b0
 800a7c8:	2000d8a0 	.word	0x2000d8a0
 800a7cc:	2000d8ac 	.word	0x2000d8ac

0800a7d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7dc:	4b27      	ldr	r3, [pc, #156]	@ (800a87c <prvHeapInit+0xac>)
 800a7de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00c      	beq.n	800a804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3307      	adds	r3, #7
 800a7ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 0307 	bic.w	r3, r3, #7
 800a7f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a87c <prvHeapInit+0xac>)
 800a800:	4413      	add	r3, r2
 800a802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a808:	4a1d      	ldr	r2, [pc, #116]	@ (800a880 <prvHeapInit+0xb0>)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a80e:	4b1c      	ldr	r3, [pc, #112]	@ (800a880 <prvHeapInit+0xb0>)
 800a810:	2200      	movs	r2, #0
 800a812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	4413      	add	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a81c:	2208      	movs	r2, #8
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1a9b      	subs	r3, r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0307 	bic.w	r3, r3, #7
 800a82a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4a15      	ldr	r2, [pc, #84]	@ (800a884 <prvHeapInit+0xb4>)
 800a830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a832:	4b14      	ldr	r3, [pc, #80]	@ (800a884 <prvHeapInit+0xb4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2200      	movs	r2, #0
 800a838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a83a:	4b12      	ldr	r3, [pc, #72]	@ (800a884 <prvHeapInit+0xb4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a850:	4b0c      	ldr	r3, [pc, #48]	@ (800a884 <prvHeapInit+0xb4>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4a0a      	ldr	r2, [pc, #40]	@ (800a888 <prvHeapInit+0xb8>)
 800a85e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	4a09      	ldr	r2, [pc, #36]	@ (800a88c <prvHeapInit+0xbc>)
 800a866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a868:	4b09      	ldr	r3, [pc, #36]	@ (800a890 <prvHeapInit+0xc0>)
 800a86a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a86e:	601a      	str	r2, [r3, #0]
}
 800a870:	bf00      	nop
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	20009c94 	.word	0x20009c94
 800a880:	2000d894 	.word	0x2000d894
 800a884:	2000d89c 	.word	0x2000d89c
 800a888:	2000d8a4 	.word	0x2000d8a4
 800a88c:	2000d8a0 	.word	0x2000d8a0
 800a890:	2000d8b0 	.word	0x2000d8b0

0800a894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a89c:	4b28      	ldr	r3, [pc, #160]	@ (800a940 <prvInsertBlockIntoFreeList+0xac>)
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e002      	b.n	800a8a8 <prvInsertBlockIntoFreeList+0x14>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d8f7      	bhi.n	800a8a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	4413      	add	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d108      	bne.n	800a8d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	441a      	add	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	441a      	add	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d118      	bne.n	800a91c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	4b15      	ldr	r3, [pc, #84]	@ (800a944 <prvInsertBlockIntoFreeList+0xb0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d00d      	beq.n	800a912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	441a      	add	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	e008      	b.n	800a924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a912:	4b0c      	ldr	r3, [pc, #48]	@ (800a944 <prvInsertBlockIntoFreeList+0xb0>)
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	e003      	b.n	800a924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d002      	beq.n	800a932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a932:	bf00      	nop
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	2000d894 	.word	0x2000d894
 800a944:	2000d89c 	.word	0x2000d89c

0800a948 <memset>:
 800a948:	4402      	add	r2, r0
 800a94a:	4603      	mov	r3, r0
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d100      	bne.n	800a952 <memset+0xa>
 800a950:	4770      	bx	lr
 800a952:	f803 1b01 	strb.w	r1, [r3], #1
 800a956:	e7f9      	b.n	800a94c <memset+0x4>

0800a958 <_reclaim_reent>:
 800a958:	4b29      	ldr	r3, [pc, #164]	@ (800aa00 <_reclaim_reent+0xa8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4283      	cmp	r3, r0
 800a95e:	b570      	push	{r4, r5, r6, lr}
 800a960:	4604      	mov	r4, r0
 800a962:	d04b      	beq.n	800a9fc <_reclaim_reent+0xa4>
 800a964:	69c3      	ldr	r3, [r0, #28]
 800a966:	b1ab      	cbz	r3, 800a994 <_reclaim_reent+0x3c>
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	b16b      	cbz	r3, 800a988 <_reclaim_reent+0x30>
 800a96c:	2500      	movs	r5, #0
 800a96e:	69e3      	ldr	r3, [r4, #28]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	5959      	ldr	r1, [r3, r5]
 800a974:	2900      	cmp	r1, #0
 800a976:	d13b      	bne.n	800a9f0 <_reclaim_reent+0x98>
 800a978:	3504      	adds	r5, #4
 800a97a:	2d80      	cmp	r5, #128	@ 0x80
 800a97c:	d1f7      	bne.n	800a96e <_reclaim_reent+0x16>
 800a97e:	69e3      	ldr	r3, [r4, #28]
 800a980:	4620      	mov	r0, r4
 800a982:	68d9      	ldr	r1, [r3, #12]
 800a984:	f000 f878 	bl	800aa78 <_free_r>
 800a988:	69e3      	ldr	r3, [r4, #28]
 800a98a:	6819      	ldr	r1, [r3, #0]
 800a98c:	b111      	cbz	r1, 800a994 <_reclaim_reent+0x3c>
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 f872 	bl	800aa78 <_free_r>
 800a994:	6961      	ldr	r1, [r4, #20]
 800a996:	b111      	cbz	r1, 800a99e <_reclaim_reent+0x46>
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 f86d 	bl	800aa78 <_free_r>
 800a99e:	69e1      	ldr	r1, [r4, #28]
 800a9a0:	b111      	cbz	r1, 800a9a8 <_reclaim_reent+0x50>
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f868 	bl	800aa78 <_free_r>
 800a9a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a9aa:	b111      	cbz	r1, 800a9b2 <_reclaim_reent+0x5a>
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 f863 	bl	800aa78 <_free_r>
 800a9b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9b4:	b111      	cbz	r1, 800a9bc <_reclaim_reent+0x64>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 f85e 	bl	800aa78 <_free_r>
 800a9bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a9be:	b111      	cbz	r1, 800a9c6 <_reclaim_reent+0x6e>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 f859 	bl	800aa78 <_free_r>
 800a9c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a9c8:	b111      	cbz	r1, 800a9d0 <_reclaim_reent+0x78>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 f854 	bl	800aa78 <_free_r>
 800a9d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a9d2:	b111      	cbz	r1, 800a9da <_reclaim_reent+0x82>
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 f84f 	bl	800aa78 <_free_r>
 800a9da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a9dc:	b111      	cbz	r1, 800a9e4 <_reclaim_reent+0x8c>
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 f84a 	bl	800aa78 <_free_r>
 800a9e4:	6a23      	ldr	r3, [r4, #32]
 800a9e6:	b14b      	cbz	r3, 800a9fc <_reclaim_reent+0xa4>
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9ee:	4718      	bx	r3
 800a9f0:	680e      	ldr	r6, [r1, #0]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 f840 	bl	800aa78 <_free_r>
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	e7bb      	b.n	800a974 <_reclaim_reent+0x1c>
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
 800a9fe:	bf00      	nop
 800aa00:	20006590 	.word	0x20006590

0800aa04 <__errno>:
 800aa04:	4b01      	ldr	r3, [pc, #4]	@ (800aa0c <__errno+0x8>)
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20006590 	.word	0x20006590

0800aa10 <__libc_init_array>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	4d0d      	ldr	r5, [pc, #52]	@ (800aa48 <__libc_init_array+0x38>)
 800aa14:	4c0d      	ldr	r4, [pc, #52]	@ (800aa4c <__libc_init_array+0x3c>)
 800aa16:	1b64      	subs	r4, r4, r5
 800aa18:	10a4      	asrs	r4, r4, #2
 800aa1a:	2600      	movs	r6, #0
 800aa1c:	42a6      	cmp	r6, r4
 800aa1e:	d109      	bne.n	800aa34 <__libc_init_array+0x24>
 800aa20:	4d0b      	ldr	r5, [pc, #44]	@ (800aa50 <__libc_init_array+0x40>)
 800aa22:	4c0c      	ldr	r4, [pc, #48]	@ (800aa54 <__libc_init_array+0x44>)
 800aa24:	f000 f9b6 	bl	800ad94 <_init>
 800aa28:	1b64      	subs	r4, r4, r5
 800aa2a:	10a4      	asrs	r4, r4, #2
 800aa2c:	2600      	movs	r6, #0
 800aa2e:	42a6      	cmp	r6, r4
 800aa30:	d105      	bne.n	800aa3e <__libc_init_array+0x2e>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa38:	4798      	blx	r3
 800aa3a:	3601      	adds	r6, #1
 800aa3c:	e7ee      	b.n	800aa1c <__libc_init_array+0xc>
 800aa3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa42:	4798      	blx	r3
 800aa44:	3601      	adds	r6, #1
 800aa46:	e7f2      	b.n	800aa2e <__libc_init_array+0x1e>
 800aa48:	0800ae48 	.word	0x0800ae48
 800aa4c:	0800ae48 	.word	0x0800ae48
 800aa50:	0800ae48 	.word	0x0800ae48
 800aa54:	0800ae4c 	.word	0x0800ae4c

0800aa58 <__retarget_lock_acquire_recursive>:
 800aa58:	4770      	bx	lr

0800aa5a <__retarget_lock_release_recursive>:
 800aa5a:	4770      	bx	lr

0800aa5c <memcpy>:
 800aa5c:	440a      	add	r2, r1
 800aa5e:	4291      	cmp	r1, r2
 800aa60:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa64:	d100      	bne.n	800aa68 <memcpy+0xc>
 800aa66:	4770      	bx	lr
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa72:	4291      	cmp	r1, r2
 800aa74:	d1f9      	bne.n	800aa6a <memcpy+0xe>
 800aa76:	bd10      	pop	{r4, pc}

0800aa78 <_free_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	d041      	beq.n	800ab04 <_free_r+0x8c>
 800aa80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa84:	1f0c      	subs	r4, r1, #4
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfb8      	it	lt
 800aa8a:	18e4      	addlt	r4, r4, r3
 800aa8c:	f000 f83e 	bl	800ab0c <__malloc_lock>
 800aa90:	4a1d      	ldr	r2, [pc, #116]	@ (800ab08 <_free_r+0x90>)
 800aa92:	6813      	ldr	r3, [r2, #0]
 800aa94:	b933      	cbnz	r3, 800aaa4 <_free_r+0x2c>
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	6014      	str	r4, [r2, #0]
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa0:	f000 b83a 	b.w	800ab18 <__malloc_unlock>
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	d908      	bls.n	800aaba <_free_r+0x42>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	1821      	adds	r1, r4, r0
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf01      	itttt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	1809      	addeq	r1, r1, r0
 800aab6:	6021      	streq	r1, [r4, #0]
 800aab8:	e7ed      	b.n	800aa96 <_free_r+0x1e>
 800aaba:	461a      	mov	r2, r3
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	b10b      	cbz	r3, 800aac4 <_free_r+0x4c>
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	d9fa      	bls.n	800aaba <_free_r+0x42>
 800aac4:	6811      	ldr	r1, [r2, #0]
 800aac6:	1850      	adds	r0, r2, r1
 800aac8:	42a0      	cmp	r0, r4
 800aaca:	d10b      	bne.n	800aae4 <_free_r+0x6c>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	4401      	add	r1, r0
 800aad0:	1850      	adds	r0, r2, r1
 800aad2:	4283      	cmp	r3, r0
 800aad4:	6011      	str	r1, [r2, #0]
 800aad6:	d1e0      	bne.n	800aa9a <_free_r+0x22>
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	6053      	str	r3, [r2, #4]
 800aade:	4408      	add	r0, r1
 800aae0:	6010      	str	r0, [r2, #0]
 800aae2:	e7da      	b.n	800aa9a <_free_r+0x22>
 800aae4:	d902      	bls.n	800aaec <_free_r+0x74>
 800aae6:	230c      	movs	r3, #12
 800aae8:	602b      	str	r3, [r5, #0]
 800aaea:	e7d6      	b.n	800aa9a <_free_r+0x22>
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	1821      	adds	r1, r4, r0
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	bf04      	itt	eq
 800aaf4:	6819      	ldreq	r1, [r3, #0]
 800aaf6:	685b      	ldreq	r3, [r3, #4]
 800aaf8:	6063      	str	r3, [r4, #4]
 800aafa:	bf04      	itt	eq
 800aafc:	1809      	addeq	r1, r1, r0
 800aafe:	6021      	streq	r1, [r4, #0]
 800ab00:	6054      	str	r4, [r2, #4]
 800ab02:	e7ca      	b.n	800aa9a <_free_r+0x22>
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	2000d9f0 	.word	0x2000d9f0

0800ab0c <__malloc_lock>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	@ (800ab14 <__malloc_lock+0x8>)
 800ab0e:	f7ff bfa3 	b.w	800aa58 <__retarget_lock_acquire_recursive>
 800ab12:	bf00      	nop
 800ab14:	2000d9ec 	.word	0x2000d9ec

0800ab18 <__malloc_unlock>:
 800ab18:	4801      	ldr	r0, [pc, #4]	@ (800ab20 <__malloc_unlock+0x8>)
 800ab1a:	f7ff bf9e 	b.w	800aa5a <__retarget_lock_release_recursive>
 800ab1e:	bf00      	nop
 800ab20:	2000d9ec 	.word	0x2000d9ec

0800ab24 <fmod>:
 800ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab26:	ed2d 8b02 	vpush	{d8}
 800ab2a:	ec57 6b10 	vmov	r6, r7, d0
 800ab2e:	ec55 4b11 	vmov	r4, r5, d1
 800ab32:	f000 f825 	bl	800ab80 <__ieee754_fmod>
 800ab36:	4622      	mov	r2, r4
 800ab38:	462b      	mov	r3, r5
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ab42:	eef0 8a60 	vmov.f32	s17, s1
 800ab46:	f7f5 ffb9 	bl	8000abc <__aeabi_dcmpun>
 800ab4a:	b990      	cbnz	r0, 800ab72 <fmod+0x4e>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	4620      	mov	r0, r4
 800ab52:	4629      	mov	r1, r5
 800ab54:	f7f5 ff80 	bl	8000a58 <__aeabi_dcmpeq>
 800ab58:	b158      	cbz	r0, 800ab72 <fmod+0x4e>
 800ab5a:	f7ff ff53 	bl	800aa04 <__errno>
 800ab5e:	2321      	movs	r3, #33	@ 0x21
 800ab60:	6003      	str	r3, [r0, #0]
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	4610      	mov	r0, r2
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f7f5 fe37 	bl	80007dc <__aeabi_ddiv>
 800ab6e:	ec41 0b18 	vmov	d8, r0, r1
 800ab72:	eeb0 0a48 	vmov.f32	s0, s16
 800ab76:	eef0 0a68 	vmov.f32	s1, s17
 800ab7a:	ecbd 8b02 	vpop	{d8}
 800ab7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab80 <__ieee754_fmod>:
 800ab80:	ec53 2b11 	vmov	r2, r3, d1
 800ab84:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800ab88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	ea52 040c 	orrs.w	r4, r2, ip
 800ab90:	ec51 0b10 	vmov	r0, r1, d0
 800ab94:	461e      	mov	r6, r3
 800ab96:	4617      	mov	r7, r2
 800ab98:	4696      	mov	lr, r2
 800ab9a:	d00c      	beq.n	800abb6 <__ieee754_fmod+0x36>
 800ab9c:	4c77      	ldr	r4, [pc, #476]	@ (800ad7c <__ieee754_fmod+0x1fc>)
 800ab9e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800aba2:	45a0      	cmp	r8, r4
 800aba4:	4689      	mov	r9, r1
 800aba6:	d806      	bhi.n	800abb6 <__ieee754_fmod+0x36>
 800aba8:	4254      	negs	r4, r2
 800abaa:	4d75      	ldr	r5, [pc, #468]	@ (800ad80 <__ieee754_fmod+0x200>)
 800abac:	4314      	orrs	r4, r2
 800abae:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800abb2:	42ac      	cmp	r4, r5
 800abb4:	d909      	bls.n	800abca <__ieee754_fmod+0x4a>
 800abb6:	f7f5 fce7 	bl	8000588 <__aeabi_dmul>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	f7f5 fe0d 	bl	80007dc <__aeabi_ddiv>
 800abc2:	ec41 0b10 	vmov	d0, r0, r1
 800abc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abca:	45e0      	cmp	r8, ip
 800abcc:	4682      	mov	sl, r0
 800abce:	4604      	mov	r4, r0
 800abd0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800abd4:	dc09      	bgt.n	800abea <__ieee754_fmod+0x6a>
 800abd6:	dbf4      	blt.n	800abc2 <__ieee754_fmod+0x42>
 800abd8:	4282      	cmp	r2, r0
 800abda:	d8f2      	bhi.n	800abc2 <__ieee754_fmod+0x42>
 800abdc:	d105      	bne.n	800abea <__ieee754_fmod+0x6a>
 800abde:	4b69      	ldr	r3, [pc, #420]	@ (800ad84 <__ieee754_fmod+0x204>)
 800abe0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800abe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abe8:	e7eb      	b.n	800abc2 <__ieee754_fmod+0x42>
 800abea:	4a65      	ldr	r2, [pc, #404]	@ (800ad80 <__ieee754_fmod+0x200>)
 800abec:	ea19 0f02 	tst.w	r9, r2
 800abf0:	d148      	bne.n	800ac84 <__ieee754_fmod+0x104>
 800abf2:	f1b8 0f00 	cmp.w	r8, #0
 800abf6:	d13d      	bne.n	800ac74 <__ieee754_fmod+0xf4>
 800abf8:	4963      	ldr	r1, [pc, #396]	@ (800ad88 <__ieee754_fmod+0x208>)
 800abfa:	4653      	mov	r3, sl
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dc36      	bgt.n	800ac6e <__ieee754_fmod+0xee>
 800ac00:	4216      	tst	r6, r2
 800ac02:	d14f      	bne.n	800aca4 <__ieee754_fmod+0x124>
 800ac04:	f1bc 0f00 	cmp.w	ip, #0
 800ac08:	d144      	bne.n	800ac94 <__ieee754_fmod+0x114>
 800ac0a:	4a5f      	ldr	r2, [pc, #380]	@ (800ad88 <__ieee754_fmod+0x208>)
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc3d      	bgt.n	800ac8e <__ieee754_fmod+0x10e>
 800ac12:	485e      	ldr	r0, [pc, #376]	@ (800ad8c <__ieee754_fmod+0x20c>)
 800ac14:	4281      	cmp	r1, r0
 800ac16:	db4a      	blt.n	800acae <__ieee754_fmod+0x12e>
 800ac18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac20:	485a      	ldr	r0, [pc, #360]	@ (800ad8c <__ieee754_fmod+0x20c>)
 800ac22:	4282      	cmp	r2, r0
 800ac24:	db57      	blt.n	800acd6 <__ieee754_fmod+0x156>
 800ac26:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ac2a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800ac2e:	1a89      	subs	r1, r1, r2
 800ac30:	1b98      	subs	r0, r3, r6
 800ac32:	eba4 070e 	sub.w	r7, r4, lr
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d162      	bne.n	800ad00 <__ieee754_fmod+0x180>
 800ac3a:	4574      	cmp	r4, lr
 800ac3c:	bf38      	it	cc
 800ac3e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ac42:	2800      	cmp	r0, #0
 800ac44:	bfa4      	itt	ge
 800ac46:	463c      	movge	r4, r7
 800ac48:	4603      	movge	r3, r0
 800ac4a:	ea53 0104 	orrs.w	r1, r3, r4
 800ac4e:	d0c6      	beq.n	800abde <__ieee754_fmod+0x5e>
 800ac50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac54:	db69      	blt.n	800ad2a <__ieee754_fmod+0x1aa>
 800ac56:	494d      	ldr	r1, [pc, #308]	@ (800ad8c <__ieee754_fmod+0x20c>)
 800ac58:	428a      	cmp	r2, r1
 800ac5a:	db6c      	blt.n	800ad36 <__ieee754_fmod+0x1b6>
 800ac5c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac60:	432b      	orrs	r3, r5
 800ac62:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800ac66:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	e7a9      	b.n	800abc2 <__ieee754_fmod+0x42>
 800ac6e:	3901      	subs	r1, #1
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	e7c3      	b.n	800abfc <__ieee754_fmod+0x7c>
 800ac74:	4945      	ldr	r1, [pc, #276]	@ (800ad8c <__ieee754_fmod+0x20c>)
 800ac76:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	ddc0      	ble.n	800ac00 <__ieee754_fmod+0x80>
 800ac7e:	3901      	subs	r1, #1
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	e7fa      	b.n	800ac7a <__ieee754_fmod+0xfa>
 800ac84:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ac88:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ac8c:	e7b8      	b.n	800ac00 <__ieee754_fmod+0x80>
 800ac8e:	3a01      	subs	r2, #1
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	e7bc      	b.n	800ac0e <__ieee754_fmod+0x8e>
 800ac94:	4a3d      	ldr	r2, [pc, #244]	@ (800ad8c <__ieee754_fmod+0x20c>)
 800ac96:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	ddb9      	ble.n	800ac12 <__ieee754_fmod+0x92>
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	e7fa      	b.n	800ac9a <__ieee754_fmod+0x11a>
 800aca4:	ea4f 522c 	mov.w	r2, ip, asr #20
 800aca8:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800acac:	e7b1      	b.n	800ac12 <__ieee754_fmod+0x92>
 800acae:	1a40      	subs	r0, r0, r1
 800acb0:	281f      	cmp	r0, #31
 800acb2:	dc0a      	bgt.n	800acca <__ieee754_fmod+0x14a>
 800acb4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800acb8:	fa08 f800 	lsl.w	r8, r8, r0
 800acbc:	fa2a f303 	lsr.w	r3, sl, r3
 800acc0:	ea43 0308 	orr.w	r3, r3, r8
 800acc4:	fa0a f400 	lsl.w	r4, sl, r0
 800acc8:	e7aa      	b.n	800ac20 <__ieee754_fmod+0xa0>
 800acca:	4b31      	ldr	r3, [pc, #196]	@ (800ad90 <__ieee754_fmod+0x210>)
 800accc:	1a5b      	subs	r3, r3, r1
 800acce:	fa0a f303 	lsl.w	r3, sl, r3
 800acd2:	2400      	movs	r4, #0
 800acd4:	e7a4      	b.n	800ac20 <__ieee754_fmod+0xa0>
 800acd6:	1a80      	subs	r0, r0, r2
 800acd8:	281f      	cmp	r0, #31
 800acda:	dc0a      	bgt.n	800acf2 <__ieee754_fmod+0x172>
 800acdc:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800ace0:	fa0c fc00 	lsl.w	ip, ip, r0
 800ace4:	fa27 f606 	lsr.w	r6, r7, r6
 800ace8:	ea46 060c 	orr.w	r6, r6, ip
 800acec:	fa07 fe00 	lsl.w	lr, r7, r0
 800acf0:	e79d      	b.n	800ac2e <__ieee754_fmod+0xae>
 800acf2:	4e27      	ldr	r6, [pc, #156]	@ (800ad90 <__ieee754_fmod+0x210>)
 800acf4:	1ab6      	subs	r6, r6, r2
 800acf6:	fa07 f606 	lsl.w	r6, r7, r6
 800acfa:	f04f 0e00 	mov.w	lr, #0
 800acfe:	e796      	b.n	800ac2e <__ieee754_fmod+0xae>
 800ad00:	4574      	cmp	r4, lr
 800ad02:	bf38      	it	cc
 800ad04:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	da05      	bge.n	800ad18 <__ieee754_fmod+0x198>
 800ad0c:	0fe0      	lsrs	r0, r4, #31
 800ad0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ad12:	0064      	lsls	r4, r4, #1
 800ad14:	3901      	subs	r1, #1
 800ad16:	e78b      	b.n	800ac30 <__ieee754_fmod+0xb0>
 800ad18:	ea50 0307 	orrs.w	r3, r0, r7
 800ad1c:	f43f af5f 	beq.w	800abde <__ieee754_fmod+0x5e>
 800ad20:	0ffb      	lsrs	r3, r7, #31
 800ad22:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ad26:	007c      	lsls	r4, r7, #1
 800ad28:	e7f4      	b.n	800ad14 <__ieee754_fmod+0x194>
 800ad2a:	0fe1      	lsrs	r1, r4, #31
 800ad2c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ad30:	0064      	lsls	r4, r4, #1
 800ad32:	3a01      	subs	r2, #1
 800ad34:	e78c      	b.n	800ac50 <__ieee754_fmod+0xd0>
 800ad36:	1a89      	subs	r1, r1, r2
 800ad38:	2914      	cmp	r1, #20
 800ad3a:	dc0a      	bgt.n	800ad52 <__ieee754_fmod+0x1d2>
 800ad3c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800ad40:	fa03 f202 	lsl.w	r2, r3, r2
 800ad44:	40cc      	lsrs	r4, r1
 800ad46:	4322      	orrs	r2, r4
 800ad48:	410b      	asrs	r3, r1
 800ad4a:	ea43 0105 	orr.w	r1, r3, r5
 800ad4e:	4610      	mov	r0, r2
 800ad50:	e737      	b.n	800abc2 <__ieee754_fmod+0x42>
 800ad52:	291f      	cmp	r1, #31
 800ad54:	dc07      	bgt.n	800ad66 <__ieee754_fmod+0x1e6>
 800ad56:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800ad5a:	40cc      	lsrs	r4, r1
 800ad5c:	fa03 f202 	lsl.w	r2, r3, r2
 800ad60:	4322      	orrs	r2, r4
 800ad62:	462b      	mov	r3, r5
 800ad64:	e7f1      	b.n	800ad4a <__ieee754_fmod+0x1ca>
 800ad66:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800ad6a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ad6e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800ad72:	32e2      	adds	r2, #226	@ 0xe2
 800ad74:	fa43 f202 	asr.w	r2, r3, r2
 800ad78:	e7f3      	b.n	800ad62 <__ieee754_fmod+0x1e2>
 800ad7a:	bf00      	nop
 800ad7c:	7fefffff 	.word	0x7fefffff
 800ad80:	7ff00000 	.word	0x7ff00000
 800ad84:	0800ae30 	.word	0x0800ae30
 800ad88:	fffffbed 	.word	0xfffffbed
 800ad8c:	fffffc02 	.word	0xfffffc02
 800ad90:	fffffbe2 	.word	0xfffffbe2

0800ad94 <_init>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_fini>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr
